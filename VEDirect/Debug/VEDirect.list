
VEDirect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005690  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005840  08005840  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005840  08005840  00006840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005848  08005848  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005850  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  20000078  080058c8  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  080058c8  00007fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc45  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c50  00000000  00000000  00016ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00019938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f9  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a02d  00000000  00000000  0001ae09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001082a  00000000  00000000  00034e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9ac  00000000  00000000  00045660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e100c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  000e1050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e4090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000078 	.word	0x20000078
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005734 	.word	0x08005734

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000007c 	.word	0x2000007c
 8000100:	08005734 	.word	0x08005734

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <_DoInit+0x90>)
 8000638:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2203      	movs	r2, #3
 800063e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2203      	movs	r2, #3
 8000644:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <_DoInit+0x94>)
 800064a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4a1e      	ldr	r2, [pc, #120]	@ (80006c8 <_DoInit+0x98>)
 8000650:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	00d2      	lsls	r2, r2, #3
 8000658:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <_DoInit+0x94>)
 8000670:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <_DoInit+0x9c>)
 8000676:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2210      	movs	r2, #16
 800067c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e00c      	b.n	80006b0 <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	220f      	movs	r2, #15
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <_DoInit+0xa0>)
 800069e:	5cd1      	ldrb	r1, [r2, r3]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d9ef      	bls.n	8000696 <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000094 	.word	0x20000094
 80006c4:	0800574c 	.word	0x0800574c
 80006c8:	2000013c 	.word	0x2000013c
 80006cc:	2000053c 	.word	0x2000053c
 80006d0:	08005770 	.word	0x08005770

080006d4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d905      	bls.n	8000704 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	3b01      	subs	r3, #1
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
 8000702:	e007      	b.n	8000714 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	69b9      	ldr	r1, [r7, #24]
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	1acb      	subs	r3, r1, r3
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	4293      	cmp	r3, r2
 8000720:	d900      	bls.n	8000724 <_WriteBlocking+0x50>
 8000722:	0013      	movs	r3, r2
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4293      	cmp	r3, r2
 800072c:	d900      	bls.n	8000730 <_WriteBlocking+0x5c>
 800072e:	0013      	movs	r3, r2
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800073c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	0018      	movs	r0, r3
 8000744:	f004 fac5 	bl	8004cd2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	18d3      	adds	r3, r2, r3
 800074e:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	69fa      	ldr	r2, [r7, #28]
 800076e:	429a      	cmp	r2, r3
 8000770:	d101      	bne.n	8000776 <_WriteBlocking+0xa2>
      WrOff = 0u;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1b3      	bne.n	80006ea <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000782:	6a3b      	ldr	r3, [r7, #32]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b00a      	add	sp, #40	@ 0x28
 800078a:	bd80      	pop	{r7, pc}

0800078c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d910      	bls.n	80007d2 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	18d3      	adds	r3, r2, r3
 80007b8:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	0018      	movs	r0, r3
 80007c2:	f004 fa86 	bl	8004cd2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	18d2      	adds	r2, r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007d0:	e01e      	b.n	8000810 <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	18d3      	adds	r3, r2, r3
 80007de:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f004 fa73 	bl	8004cd2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	18d1      	adds	r1, r2, r3
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	0018      	movs	r0, r3
 8000806:	f004 fa64 	bl	8004cd2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	60da      	str	r2, [r3, #12]
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b008      	add	sp, #32
 8000816:	bd80      	pop	{r7, pc}

08000818 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d808      	bhi.n	8000846 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689a      	ldr	r2, [r3, #8]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	3b01      	subs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e004      	b.n	8000850 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	3b01      	subs	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000850:	697b      	ldr	r3, [r7, #20]
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b006      	add	sp, #24
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	0013      	movs	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	189b      	adds	r3, r3, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <SEGGER_RTT_WriteNoLock+0xac>)
 800087a:	189b      	adds	r3, r3, r2
 800087c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d02e      	beq.n	80008e4 <SEGGER_RTT_WriteNoLock+0x88>
 8000886:	d836      	bhi.n	80008f6 <SEGGER_RTT_WriteNoLock+0x9a>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <SEGGER_RTT_WriteNoLock+0x36>
 800088c:	2b01      	cmp	r3, #1
 800088e:	d016      	beq.n	80008be <SEGGER_RTT_WriteNoLock+0x62>
 8000890:	e031      	b.n	80008f6 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ffbf 	bl	8000818 <_GetAvailWriteSpace>
 800089a:	0003      	movs	r3, r0
 800089c:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d202      	bcs.n	80008ac <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008aa:	e027      	b.n	80008fc <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff68 	bl	800078c <_WriteNoCheck>
    break;
 80008bc:	e01e      	b.n	80008fc <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ffa9 	bl	8000818 <_GetAvailWriteSpace>
 80008c6:	0003      	movs	r3, r0
 80008c8:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d900      	bls.n	80008d4 <SEGGER_RTT_WriteNoLock+0x78>
 80008d2:	0013      	movs	r3, r2
 80008d4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008d6:	69fa      	ldr	r2, [r7, #28]
 80008d8:	69b9      	ldr	r1, [r7, #24]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff55 	bl	800078c <_WriteNoCheck>
    break;
 80008e2:	e00b      	b.n	80008fc <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	69b9      	ldr	r1, [r7, #24]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	0018      	movs	r0, r3
 80008ec:	f7ff fef2 	bl	80006d4 <_WriteBlocking>
 80008f0:	0003      	movs	r3, r0
 80008f2:	61fb      	str	r3, [r7, #28]
    break;
 80008f4:	e002      	b.n	80008fc <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    break;
 80008fa:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 80008fc:	69fb      	ldr	r3, [r7, #28]
}
 80008fe:	0018      	movs	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	b008      	add	sp, #32
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	20000094 	.word	0x20000094

0800090c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <SEGGER_RTT_Write+0x4c>)
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <SEGGER_RTT_Write+0x1e>
 8000926:	f7ff fe83 	bl	8000630 <_DoInit>
  SEGGER_RTT_LOCK();
 800092a:	f3ef 8310 	mrs	r3, PRIMASK
 800092e:	2101      	movs	r1, #1
 8000930:	f381 8810 	msr	PRIMASK, r1
 8000934:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff8d 	bl	800085c <SEGGER_RTT_WriteNoLock>
 8000942:	0003      	movs	r3, r0
 8000944:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	f383 8810 	msr	PRIMASK, r3
  return Status;
 800094c:	697b      	ldr	r3, [r7, #20]
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b008      	add	sp, #32
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	20000094 	.word	0x20000094

0800095c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800096c:	623b      	str	r3, [r7, #32]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <SEGGER_RTT_ConfigUpBuffer+0x20>
 8000978:	f7ff fe5a 	bl	8000630 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <SEGGER_RTT_ConfigUpBuffer+0x90>)
 800097e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d829      	bhi.n	80009da <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 8000986:	f3ef 8310 	mrs	r3, PRIMASK
 800098a:	2101      	movs	r1, #1
 800098c:	f381 8810 	msr	PRIMASK, r1
 8000990:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	0013      	movs	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	189b      	adds	r3, r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00e      	beq.n	80009c8 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009cc:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d8:	e002      	b.n	80009e0 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 80009da:	2301      	movs	r3, #1
 80009dc:	425b      	negs	r3, r3
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b00a      	add	sp, #40	@ 0x28
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	20000094 	.word	0x20000094

080009f0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  _DoInit();
 80009f4:	f7ff fe1c 	bl	8000630 <_DoInit>
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	0019      	movs	r1, r3
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ff7a 	bl	800090c <SEGGER_RTT_Write>
  return len;
 8000a18:	683b      	ldr	r3, [r7, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_DMA_Init+0x38>)
 8000a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_DMA_Init+0x38>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_DMA_Init+0x38>)
 8000a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2102      	movs	r1, #2
 8000a46:	2009      	movs	r0, #9
 8000a48:	f000 fde6 	bl	8001618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a4c:	2009      	movs	r0, #9
 8000a4e:	f000 fdf8 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	@ 0x24
 8000a64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	240c      	movs	r4, #12
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f004 f887 	bl	8004b84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a86:	2204      	movs	r2, #4
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a94:	2120      	movs	r1, #32
 8000a96:	430a      	orrs	r2, r1
 8000a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_GPIO_Init+0x9c>)
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000abe:	23a0      	movs	r3, #160	@ 0xa0
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fa5a 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000acc:	0021      	movs	r1, r4
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	187a      	adds	r2, r7, r1
 8000ae8:	23a0      	movs	r3, #160	@ 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 f8e2 	bl	8001cb8 <HAL_GPIO_Init>

}
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b009      	add	sp, #36	@ 0x24
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	40021000 	.word	0x40021000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af02      	add	r7, sp, #8
	setvbuf(stdout, NULL, _IONBF, 0);
 8000b06:	4b39      	ldr	r3, [pc, #228]	@ (8000bec <main+0xec>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6898      	ldr	r0, [r3, #8]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2202      	movs	r2, #2
 8000b10:	2100      	movs	r1, #0
 8000b12:	f003 fe95 	bl	8004840 <setvbuf>

  /* USER CODE BEGIN 1 */
	checksum = 0;
 8000b16:	4b36      	ldr	r3, [pc, #216]	@ (8000bf0 <main+0xf0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fc4a 	bl	80013b4 <HAL_Init>

 
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f872 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff ff9c 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b28:	f7ff ff7c 	bl	8000a24 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b2c:	f000 fb12 	bl	8001154 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000b30:	f000 fac2 	bl	80010b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_IDLE);
 8000b34:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <main+0xf4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2210      	movs	r2, #16
 8000b3a:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(&huart3, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <main+0xf8>)
 8000b3e:	6859      	ldr	r1, [r3, #4]
 8000b40:	1dfc      	adds	r4, r7, #7
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	009a      	lsls	r2, r3, #2
 8000b46:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <main+0xf4>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f003 fc7f 	bl	800444c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	7023      	strb	r3, [r4, #0]
 // __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
  SEGGER_RTT_ConfigUpBuffer  (0,  NULL  ,  NULL  , 0,  SEGGER_RTT_MODE_NO_BLOCK_SKIP  );
 8000b52:	2300      	movs	r3, #0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fefd 	bl	800095c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_Init();
 8000b62:	f7ff ff45 	bl	80009f0 <SEGGER_RTT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(vedirect_rx_get_state() == VEDIRECT_RX_State_DATA_READY){
 8000b66:	f000 fa97 	bl	8001098 <vedirect_rx_get_state>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d1fa      	bne.n	8000b66 <main+0x66>

		  //calculate checksum of the whole frame
		  checksum = calculate_checksum(protocol_rx_buff.p_rx_buff_user, protocol_rx_buff.new_data_sz);
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <main+0xf8>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <main+0xf8>)
 8000b76:	891b      	ldrh	r3, [r3, #8]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	0010      	movs	r0, r2
 8000b7e:	f000 f8a1 	bl	8000cc4 <calculate_checksum>
 8000b82:	0003      	movs	r3, r0
 8000b84:	001a      	movs	r2, r3
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <main+0xf0>)
 8000b88:	701a      	strb	r2, [r3, #0]

		  if(checksum == 0){
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <main+0xf0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10e      	bne.n	8000bb2 <main+0xb2>
			  data_set_state(CHECKSUM_OK);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 f885 	bl	8000ca4 <data_set_state>
			  parse_frame(protocol_rx_buff.p_rx_buff_user);
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <main+0xf8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 f8be 	bl	8000d20 <parse_frame>
			  printf("parsed: %s %s\n", ve_data.fields[2].label,ve_data.fields[2].value);
 8000ba4:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <main+0xfc>)
 8000ba6:	4916      	ldr	r1, [pc, #88]	@ (8000c00 <main+0x100>)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <main+0x104>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f003 fdd8 	bl	8004760 <iprintf>
 8000bb0:	e002      	b.n	8000bb8 <main+0xb8>
		  }
		  else
			  data_set_state(CHECKSUM_FAIL);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 f876 	bl	8000ca4 <data_set_state>

		  //TODO: ADD LOGGER FOL FAIL CHECKSUM


		  HAL_StatusTypeDef check = HAL_UARTEx_ReceiveToIdle_DMA(&huart3, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <main+0xf8>)
 8000bba:	6859      	ldr	r1, [r3, #4]
 8000bbc:	1dbc      	adds	r4, r7, #6
 8000bbe:	2380      	movs	r3, #128	@ 0x80
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <main+0xf4>)
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f003 fc41 	bl	800444c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	7023      	strb	r3, [r4, #0]


		  if (check != HAL_OK) Error_Handler();
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <main+0xda>
 8000bd6:	f000 f85f 	bl	8000c98 <Error_Handler>
		  __HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_IDLE);
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <main+0xf4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2210      	movs	r2, #16
 8000be0:	621a      	str	r2, [r3, #32]


		  vedirect_rx_set_state(VEDIRECT_RX_State_RECEIVING);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 fa48 	bl	8001078 <vedirect_rx_set_state>
	  if(vedirect_rx_get_state() == VEDIRECT_RX_State_DATA_READY){
 8000be8:	e7bd      	b.n	8000b66 <main+0x66>
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	2000094c 	.word	0x2000094c
 8000bf4:	20000d88 	.word	0x20000d88
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	200009ad 	.word	0x200009ad
 8000c00:	200009a4 	.word	0x200009a4
 8000c04:	0800575c 	.word	0x0800575c

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b093      	sub	sp, #76	@ 0x4c
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	2410      	movs	r4, #16
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	0018      	movs	r0, r3
 8000c14:	2338      	movs	r3, #56	@ 0x38
 8000c16:	001a      	movs	r2, r3
 8000c18:	2100      	movs	r1, #0
 8000c1a:	f003 ffb3 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	003b      	movs	r3, r7
 8000c20:	0018      	movs	r0, r3
 8000c22:	2310      	movs	r3, #16
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f003 ffac 	bl	8004b84 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 f9c3 	bl	8001fbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2202      	movs	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0052      	lsls	r2, r2, #1
 8000c42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2240      	movs	r2, #64	@ 0x40
 8000c4e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 f9fb 	bl	8002054 <HAL_RCC_OscConfig>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c62:	f000 f819 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	003b      	movs	r3, r7
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6c:	003b      	movs	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c72:	003b      	movs	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c78:	003b      	movs	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c7e:	003b      	movs	r3, r7
 8000c80:	2100      	movs	r1, #0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 fd00 	bl	8002688 <HAL_RCC_ClockConfig>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c8c:	f000 f804 	bl	8000c98 <Error_Handler>
  }
}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b013      	add	sp, #76	@ 0x4c
 8000c96:	bd90      	pop	{r4, r7, pc}

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <data_set_state>:

vedirect_data_t ve_data;

// Function to set the state
void data_set_state(DATA_STATE new_state)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
    data_state = new_state;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <data_set_state+0x1c>)
 8000cb2:	1dfa      	adds	r2, r7, #7
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000000c 	.word	0x2000000c

08000cc4 <calculate_checksum>:
    return data_state;
}


uint8_t calculate_checksum(char *frame, uint16_t size)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	000a      	movs	r2, r1
 8000cce:	1cbb      	adds	r3, r7, #2
 8000cd0:	801a      	strh	r2, [r3, #0]
	volatile int checksum_calculated = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]

	for(int i = 0; i < size; i++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e011      	b.n	8000d00 <calculate_checksum+0x3c>
        checksum_calculated = (checksum_calculated + (int)frame[i]) % 256;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <calculate_checksum+0x54>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	d503      	bpl.n	8000cf8 <calculate_checksum+0x34>
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <calculate_checksum+0x58>)
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < size; i++) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dbe8      	blt.n	8000cdc <calculate_checksum+0x18>
    }

    //printf("Calculated checksum: %c", checksum_calculated );

    return checksum_calculated;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	b2db      	uxtb	r3, r3
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	800000ff 	.word	0x800000ff
 8000d1c:	ffffff00 	.word	0xffffff00

08000d20 <parse_frame>:

//parses the whole string frame to array of structs
void parse_frame(char *frame)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	ve_data.field_count = 0; // Reset field count
 8000d28:	4a3b      	ldr	r2, [pc, #236]	@ (8000e18 <parse_frame+0xf8>)
 8000d2a:	23e7      	movs	r3, #231	@ 0xe7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	2100      	movs	r1, #0
 8000d30:	54d1      	strb	r1, [r2, r3]

	char *line_start = frame;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	61fb      	str	r3, [r7, #28]
	char *line_end;

	//seperates string into new lines based on \r\n
	while ((line_end = strstr(line_start, "\r\n")) != NULL) {
 8000d36:	e05f      	b.n	8000df8 <parse_frame+0xd8>
		*line_end = '\0'; // to know where it ends
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]

		// process data line by line
		char *tab_pos = strstr(line_start, "\t");
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	2109      	movs	r1, #9
 8000d42:	0018      	movs	r0, r3
 8000d44:	f003 ff26 	bl	8004b94 <strchr>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	617b      	str	r3, [r7, #20]
		if (tab_pos != NULL) {
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d04f      	beq.n	8000df2 <parse_frame+0xd2>
			*tab_pos = '\0'; // to know where it ends
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

		char *label = line_start;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	613b      	str	r3, [r7, #16]
		char *value = tab_pos + 1; //+1 to skip tab;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]

		if (ve_data.field_count < MAX_FIELDS) {
 8000d62:	4a2d      	ldr	r2, [pc, #180]	@ (8000e18 <parse_frame+0xf8>)
 8000d64:	23e7      	movs	r3, #231	@ 0xe7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	2b15      	cmp	r3, #21
 8000d6c:	d841      	bhi.n	8000df2 <parse_frame+0xd2>
			strncpy(ve_data.fields[ve_data.field_count].label, label, LABEL_SIZE - 1);
 8000d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e18 <parse_frame+0xf8>)
 8000d70:	23e7      	movs	r3, #231	@ 0xe7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	001a      	movs	r2, r3
 8000d78:	232a      	movs	r3, #42	@ 0x2a
 8000d7a:	435a      	muls	r2, r3
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <parse_frame+0xf8>)
 8000d7e:	18d3      	adds	r3, r2, r3
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	2208      	movs	r2, #8
 8000d84:	0018      	movs	r0, r3
 8000d86:	f003 ff13 	bl	8004bb0 <strncpy>
			ve_data.fields[ve_data.field_count].label[LABEL_SIZE - 1] = '\0';
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <parse_frame+0xf8>)
 8000d8c:	23e7      	movs	r3, #231	@ 0xe7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	0019      	movs	r1, r3
 8000d94:	4a20      	ldr	r2, [pc, #128]	@ (8000e18 <parse_frame+0xf8>)
 8000d96:	232a      	movs	r3, #42	@ 0x2a
 8000d98:	434b      	muls	r3, r1
 8000d9a:	18d3      	adds	r3, r2, r3
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]

			strncpy(ve_data.fields[ve_data.field_count].value, value, VALUE_SIZE - 1);
 8000da2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e18 <parse_frame+0xf8>)
 8000da4:	23e7      	movs	r3, #231	@ 0xe7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	001a      	movs	r2, r3
 8000dac:	232a      	movs	r3, #42	@ 0x2a
 8000dae:	4353      	muls	r3, r2
 8000db0:	3308      	adds	r3, #8
 8000db2:	001a      	movs	r2, r3
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <parse_frame+0xf8>)
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	68f9      	ldr	r1, [r7, #12]
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f003 fef6 	bl	8004bb0 <strncpy>
			ve_data.fields[ve_data.field_count].value[VALUE_SIZE - 1] = '\0';
 8000dc4:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <parse_frame+0xf8>)
 8000dc6:	23e7      	movs	r3, #231	@ 0xe7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <parse_frame+0xf8>)
 8000dd0:	2129      	movs	r1, #41	@ 0x29
 8000dd2:	232a      	movs	r3, #42	@ 0x2a
 8000dd4:	4343      	muls	r3, r0
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]

			ve_data.field_count++;
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <parse_frame+0xf8>)
 8000de0:	23e7      	movs	r3, #231	@ 0xe7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	5cd3      	ldrb	r3, [r2, r3]
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2d9      	uxtb	r1, r3
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <parse_frame+0xf8>)
 8000dec:	23e7      	movs	r3, #231	@ 0xe7
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	54d1      	strb	r1, [r2, r3]
			}
		}

		line_start = line_end + 2;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	3302      	adds	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
	while ((line_end = strstr(line_start, "\r\n")) != NULL) {
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <parse_frame+0xfc>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 feea 	bl	8004bd8 <strstr>
 8000e04:	0003      	movs	r3, r0
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d194      	bne.n	8000d38 <parse_frame+0x18>
	}
}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b008      	add	sp, #32
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000950 	.word	0x20000950
 8000e1c:	0800576c 	.word	0x0800576c

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	2201      	movs	r2, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	0549      	lsls	r1, r1, #21
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_MspInit+0x44>)
 8000e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	055b      	lsls	r3, r3, #21
 8000e54:	4013      	ands	r3, r2
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 fafa 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	46c0      	nop			@ (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fdc6 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	20000e1c 	.word	0x20000e1c

08000eb4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <USART3_4_LPUART1_IRQHandler+0x14>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f001 ff9c 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000d88 	.word	0x20000d88

08000ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	e000      	b.n	8000ee2 <_read+0x16>
 8000ee0:	bf00      	nop
 8000ee2:	0001      	movs	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b006      	add	sp, #24
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	425b      	negs	r3, r3
}
 8000f12:	0018      	movs	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	0192      	lsls	r2, r2, #6
 8000f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f003 fe72 	bl	8004c78 <__errno>
 8000f94:	0003      	movs	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	18d2      	adds	r2, r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <_sbrk+0x64>)
 8000fb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b006      	add	sp, #24
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20009000 	.word	0x20009000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	20000cf0 	.word	0x20000cf0
 8000fc8:	20000fc8 	.word	0x20000fc8

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_UARTEx_RxEventCallback>:
#define BUFFER_SIZE 512  // Large enough to accommodate more frames

extern UART_HandleTypeDef huart3;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	000a      	movs	r2, r1
 8000fe2:	1cbb      	adds	r3, r7, #2
 8000fe4:	801a      	strh	r2, [r3, #0]
    if (huart == &huart3)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_UARTEx_RxEventCallback+0x50>)
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d117      	bne.n	800101e <HAL_UARTEx_RxEventCallback+0x46>
    {
    	 // Swap the buffers so the main loop can access the received data
        volatile uint8_t *p_tmp = protocol_rx_buff.p_rx_buff_user;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]
        protocol_rx_buff.p_rx_buff_user = protocol_rx_buff.p_rx_buff_reception;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 8000ffa:	601a      	str	r2, [r3, #0]
        protocol_rx_buff.p_rx_buff_reception = p_tmp;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	605a      	str	r2, [r3, #4]

        protocol_rx_buff.new_data_sz = Size;
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 8001004:	1cba      	adds	r2, r7, #2
 8001006:	8812      	ldrh	r2, [r2, #0]
 8001008:	811a      	strh	r2, [r3, #8]

        printf("%s\n", (char *)protocol_rx_buff.p_rx_buff_reception);
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_UARTEx_RxEventCallback+0x54>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	0018      	movs	r0, r3
 8001010:	f003 fc0c 	bl	800482c <puts>
        
        vedirect_rx_upd_rx_timestamp();
 8001014:	f000 f84a 	bl	80010ac <vedirect_rx_upd_rx_timestamp>
        vedirect_rx_set_state(VEDIRECT_RX_State_DATA_READY);
 8001018:	2002      	movs	r0, #2
 800101a:	f000 f82d 	bl	8001078 <vedirect_rx_set_state>
    }
}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	20000d88 	.word	0x20000d88
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_UART_RxCpltCallback>:

// DMA Transfer Complete callback
void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <HAL_UART_RxCpltCallback+0x40>)
 800103c:	429a      	cmp	r2, r3
 800103e:	d113      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x38>
    {
        // This can be used to handle data if full buffer is filled
        // For example, reset DMA here if necessary

        // Reset the DMA for next reception
        __HAL_DMA_DISABLE(huart->hdmarx); // Disable the DMA stream
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	589b      	ldr	r3, [r3, r2]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	585b      	ldr	r3, [r3, r1]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
        //memset(&protocol_rx_buff.p_rx_buff_user, 0, BUFFER_SIZE);
        //memset(&protocol_rx_buff.p_rx_buff_reception, 0, BUFFER_SIZE);
        HAL_UARTEx_ReceiveToIdle_DMA(huart, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_UART_RxCpltCallback+0x44>)
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	009a      	lsls	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f003 f9f2 	bl	800444c <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000d88 	.word	0x20000d88
 8001074:	20000000 	.word	0x20000000

08001078 <vedirect_rx_set_state>:
    }
}

// Function to set the state
void vedirect_rx_set_state(VEDIRECT_RX_State new_state)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	701a      	strb	r2, [r3, #0]
    rx_state = new_state;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <vedirect_rx_set_state+0x1c>)
 8001086:	1dfa      	adds	r2, r7, #7
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000094d 	.word	0x2000094d

08001098 <vedirect_rx_get_state>:

// Function to get the current state
VEDIRECT_RX_State vedirect_rx_get_state(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    return rx_state;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <vedirect_rx_get_state+0x10>)
 800109e:	781b      	ldrb	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	2000094d 	.word	0x2000094d

080010ac <vedirect_rx_upd_rx_timestamp>:

// Function to update the timestamp (dummy function for example)
void vedirect_rx_upd_rx_timestamp(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    // Implement timestamp update logic if needed
    // For now, it's just a placeholder function
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010be:	4a24      	ldr	r2, [pc, #144]	@ (8001150 <MX_USART2_UART_Init+0x98>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010c4:	22e1      	movs	r2, #225	@ 0xe1
 80010c6:	0252      	lsls	r2, r2, #9
 80010c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART2_UART_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_USART2_UART_Init+0x94>)
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fe22 	bl	8002d4c <HAL_UART_Init>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d001      	beq.n	8001110 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800110c:	f7ff fdc4 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x94>)
 8001112:	2100      	movs	r1, #0
 8001114:	0018      	movs	r0, r3
 8001116:	f003 f917 	bl	8004348 <HAL_UARTEx_SetTxFifoThreshold>
 800111a:	1e03      	subs	r3, r0, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800111e:	f7ff fdbb 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <MX_USART2_UART_Init+0x94>)
 8001124:	2100      	movs	r1, #0
 8001126:	0018      	movs	r0, r3
 8001128:	f003 f94e 	bl	80043c8 <HAL_UARTEx_SetRxFifoThreshold>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001130:	f7ff fdb2 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x94>)
 8001136:	0018      	movs	r0, r3
 8001138:	f003 f8cc 	bl	80042d4 <HAL_UARTEx_DisableFifoMode>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d001      	beq.n	8001144 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001140:	f7ff fdaa 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	20000cf4 	.word	0x20000cf4
 8001150:	40004400 	.word	0x40004400

08001154 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_USART3_UART_Init+0x64>)
 800115c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001160:	2296      	movs	r2, #150	@ 0x96
 8001162:	01d2      	lsls	r2, r2, #7
 8001164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <MX_USART3_UART_Init+0x60>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fdd4 	bl	8002d4c <HAL_UART_Init>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011a8:	f7ff fd76 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	20000d88 	.word	0x20000d88
 80011b8:	40004800 	.word	0x40004800

080011bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b099      	sub	sp, #100	@ 0x64
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	234c      	movs	r3, #76	@ 0x4c
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	0018      	movs	r0, r3
 80011ca:	2314      	movs	r3, #20
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f003 fcd8 	bl	8004b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d4:	2418      	movs	r4, #24
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	0018      	movs	r0, r3
 80011da:	2334      	movs	r3, #52	@ 0x34
 80011dc:	001a      	movs	r2, r3
 80011de:	2100      	movs	r1, #0
 80011e0:	f003 fcd0 	bl	8004b84 <memset>
  if(uartHandle->Instance==USART2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a57      	ldr	r2, [pc, #348]	@ (8001348 <HAL_UART_MspInit+0x18c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d13f      	bne.n	800126e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	2202      	movs	r2, #2
 80011f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 fbed 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff fd47 	bl	8000c98 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800120a:	4b50      	ldr	r3, [pc, #320]	@ (800134c <HAL_UART_MspInit+0x190>)
 800120c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800120e:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <HAL_UART_MspInit+0x190>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0289      	lsls	r1, r1, #10
 8001214:	430a      	orrs	r2, r1
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001218:	4b4c      	ldr	r3, [pc, #304]	@ (800134c <HAL_UART_MspInit+0x190>)
 800121a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	029b      	lsls	r3, r3, #10
 8001220:	4013      	ands	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b49      	ldr	r3, [pc, #292]	@ (800134c <HAL_UART_MspInit+0x190>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800122a:	4b48      	ldr	r3, [pc, #288]	@ (800134c <HAL_UART_MspInit+0x190>)
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
 8001232:	4b46      	ldr	r3, [pc, #280]	@ (800134c <HAL_UART_MspInit+0x190>)
 8001234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800123e:	214c      	movs	r1, #76	@ 0x4c
 8001240:	187b      	adds	r3, r7, r1
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2202      	movs	r2, #2
 800124a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001258:	187b      	adds	r3, r7, r1
 800125a:	2201      	movs	r2, #1
 800125c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	187a      	adds	r2, r7, r1
 8001260:	23a0      	movs	r3, #160	@ 0xa0
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	0011      	movs	r1, r2
 8001266:	0018      	movs	r0, r3
 8001268:	f000 fd26 	bl	8001cb8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800126c:	e067      	b.n	800133e <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a37      	ldr	r2, [pc, #220]	@ (8001350 <HAL_UART_MspInit+0x194>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d162      	bne.n	800133e <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001278:	4b34      	ldr	r3, [pc, #208]	@ (800134c <HAL_UART_MspInit+0x190>)
 800127a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <HAL_UART_MspInit+0x190>)
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	02c9      	lsls	r1, r1, #11
 8001282:	430a      	orrs	r2, r1
 8001284:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <HAL_UART_MspInit+0x190>)
 8001288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	02db      	lsls	r3, r3, #11
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_UART_MspInit+0x190>)
 8001296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001298:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <HAL_UART_MspInit+0x190>)
 800129a:	2104      	movs	r1, #4
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34
 80012a0:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <HAL_UART_MspInit+0x190>)
 80012a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a4:	2204      	movs	r2, #4
 80012a6:	4013      	ands	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ac:	214c      	movs	r1, #76	@ 0x4c
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2230      	movs	r2, #48	@ 0x30
 80012b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2202      	movs	r2, #2
 80012b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <HAL_UART_MspInit+0x198>)
 80012d0:	0019      	movs	r1, r3
 80012d2:	0010      	movs	r0, r2
 80012d4:	f000 fcf0 	bl	8001cb8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012da:	4a20      	ldr	r2, [pc, #128]	@ (800135c <HAL_UART_MspInit+0x1a0>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80012de:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012e0:	2236      	movs	r2, #54	@ 0x36
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012f2:	2280      	movs	r2, #128	@ 0x80
 80012f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fc:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	0152      	lsls	r2, r2, #5
 800130e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f9b2 	bl	800167c <HAL_DMA_Init>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <HAL_UART_MspInit+0x164>
      Error_Handler();
 800131c:	f7ff fcbc 	bl	8000c98 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 8001326:	505a      	str	r2, [r3, r1]
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_UART_MspInit+0x19c>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	201d      	movs	r0, #29
 8001334:	f000 f970 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8001338:	201d      	movs	r0, #29
 800133a:	f000 f982 	bl	8001642 <HAL_NVIC_EnableIRQ>
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b019      	add	sp, #100	@ 0x64
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	40004400 	.word	0x40004400
 800134c:	40021000 	.word	0x40021000
 8001350:	40004800 	.word	0x40004800
 8001354:	50000800 	.word	0x50000800
 8001358:	20000e1c 	.word	0x20000e1c
 800135c:	40020008 	.word	0x40020008

08001360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8001360:	480d      	ldr	r0, [pc, #52]	@ (8001398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001362:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001364:	f7ff fe32 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800138e:	f003 fc79 	bl	8004c84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001392:	f7ff fbb5 	bl	8000b00 <main>

08001396 <LoopForever>:

LoopForever:
  b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
ldr   r0, =_estack
 8001398:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013a4:	08005850 	.word	0x08005850
  ldr r2, =_sbss
 80013a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013ac:	20000fc8 	.word	0x20000fc8

080013b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_COMP_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <HAL_Init+0x3c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Init+0x3c>)
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	0049      	lsls	r1, r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f810 	bl	80013f4 <HAL_InitTick>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e001      	b.n	80013e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fd1e 	bl	8000e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	230f      	movs	r3, #15
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_InitTick+0x88>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02b      	beq.n	8001464 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <HAL_InitTick+0x8c>)
 800140e:	681c      	ldr	r4, [r3, #0]
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_InitTick+0x88>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	0019      	movs	r1, r3
 8001416:	23fa      	movs	r3, #250	@ 0xfa
 8001418:	0098      	lsls	r0, r3, #2
 800141a:	f7fe fe7d 	bl	8000118 <__udivsi3>
 800141e:	0003      	movs	r3, r0
 8001420:	0019      	movs	r1, r3
 8001422:	0020      	movs	r0, r4
 8001424:	f7fe fe78 	bl	8000118 <__udivsi3>
 8001428:	0003      	movs	r3, r0
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f919 	bl	8001662 <HAL_SYSTICK_Config>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d112      	bne.n	800145a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d80a      	bhi.n	8001450 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2301      	movs	r3, #1
 800143e:	425b      	negs	r3, r3
 8001440:	2200      	movs	r2, #0
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f8e8 	bl	8001618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_InitTick+0x90>)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00d      	b.n	800146c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e008      	b.n	800146c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e003      	b.n	800146c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800146c:	230f      	movs	r3, #15
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b005      	add	sp, #20
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	20000018 	.word	0x20000018
 8001480:	20000010 	.word	0x20000010
 8001484:	20000014 	.word	0x20000014

08001488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_IncTick+0x1c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	001a      	movs	r2, r3
 8001492:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <HAL_IncTick+0x20>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	18d2      	adds	r2, r2, r3
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_IncTick+0x20>)
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000018 	.word	0x20000018
 80014a8:	20000e78 	.word	0x20000e78

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b02      	ldr	r3, [pc, #8]	@ (80014bc <HAL_GetTick+0x10>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000e78 	.word	0x20000e78

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	0002      	movs	r2, r0
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	1dfb      	adds	r3, r7, #7
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80014d2:	d809      	bhi.n	80014e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	001a      	movs	r2, r3
 80014da:	231f      	movs	r3, #31
 80014dc:	401a      	ands	r2, r3
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_EnableIRQ+0x30>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	4091      	lsls	r1, r2
 80014e4:	000a      	movs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b7f      	cmp	r3, #127	@ 0x7f
 8001508:	d828      	bhi.n	800155c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150a:	4a2f      	ldr	r2, [pc, #188]	@ (80015c8 <__NVIC_SetPriority+0xd4>)
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	33c0      	adds	r3, #192	@ 0xc0
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	589b      	ldr	r3, [r3, r2]
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	0011      	movs	r1, r2
 8001520:	2203      	movs	r2, #3
 8001522:	400a      	ands	r2, r1
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	21ff      	movs	r1, #255	@ 0xff
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	22ff      	movs	r2, #255	@ 0xff
 8001538:	401a      	ands	r2, r3
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	2303      	movs	r3, #3
 8001542:	4003      	ands	r3, r0
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	481f      	ldr	r0, [pc, #124]	@ (80015c8 <__NVIC_SetPriority+0xd4>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b25b      	sxtb	r3, r3
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	430a      	orrs	r2, r1
 8001554:	33c0      	adds	r3, #192	@ 0xc0
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800155a:	e031      	b.n	80015c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <__NVIC_SetPriority+0xd8>)
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	0019      	movs	r1, r3
 8001564:	230f      	movs	r3, #15
 8001566:	400b      	ands	r3, r1
 8001568:	3b08      	subs	r3, #8
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3306      	adds	r3, #6
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	18d3      	adds	r3, r2, r3
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	1dfa      	adds	r2, r7, #7
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	0011      	movs	r1, r2
 800157c:	2203      	movs	r2, #3
 800157e:	400a      	ands	r2, r1
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	21ff      	movs	r1, #255	@ 0xff
 8001584:	4091      	lsls	r1, r2
 8001586:	000a      	movs	r2, r1
 8001588:	43d2      	mvns	r2, r2
 800158a:	401a      	ands	r2, r3
 800158c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	019b      	lsls	r3, r3, #6
 8001592:	22ff      	movs	r2, #255	@ 0xff
 8001594:	401a      	ands	r2, r3
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	0018      	movs	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4003      	ands	r3, r0
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015a4:	4809      	ldr	r0, [pc, #36]	@ (80015cc <__NVIC_SetPriority+0xd8>)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	001c      	movs	r4, r3
 80015ac:	230f      	movs	r3, #15
 80015ae:	4023      	ands	r3, r4
 80015b0:	3b08      	subs	r3, #8
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	430a      	orrs	r2, r1
 80015b6:	3306      	adds	r3, #6
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	18c3      	adds	r3, r0, r3
 80015bc:	3304      	adds	r3, #4
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b003      	add	sp, #12
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	045b      	lsls	r3, r3, #17
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d301      	bcc.n	80015e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e4:	2301      	movs	r3, #1
 80015e6:	e010      	b.n	800160a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <SysTick_Config+0x44>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	3a01      	subs	r2, #1
 80015ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f0:	2301      	movs	r3, #1
 80015f2:	425b      	negs	r3, r3
 80015f4:	2103      	movs	r1, #3
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff ff7c 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <SysTick_Config+0x44>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Config+0x44>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	210f      	movs	r1, #15
 8001624:	187b      	adds	r3, r7, r1
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	187b      	adds	r3, r7, r1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b25b      	sxtb	r3, r3
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff ff5d 	bl	80014f4 <__NVIC_SetPriority>
}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	0002      	movs	r2, r0
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff33 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff ffaf 	bl	80015d0 <SysTick_Config>
 8001672:	0003      	movs	r3, r0
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e077      	b.n	800177e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a3d      	ldr	r2, [pc, #244]	@ (8001788 <HAL_DMA_Init+0x10c>)
 8001694:	4694      	mov	ip, r2
 8001696:	4463      	add	r3, ip
 8001698:	2114      	movs	r1, #20
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe fd3c 	bl	8000118 <__udivsi3>
 80016a0:	0003      	movs	r3, r0
 80016a2:	009a      	lsls	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2225      	movs	r2, #37	@ 0x25
 80016ac:	2102      	movs	r1, #2
 80016ae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4934      	ldr	r1, [pc, #208]	@ (800178c <HAL_DMA_Init+0x110>)
 80016bc:	400a      	ands	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 fa8d 	bl	8001c18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	01db      	lsls	r3, r3, #7
 8001706:	429a      	cmp	r2, r3
 8001708:	d102      	bne.n	8001710 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001718:	213f      	movs	r1, #63	@ 0x3f
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001726:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d011      	beq.n	8001754 <HAL_DMA_Init+0xd8>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d80d      	bhi.n	8001754 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 fa98 	bl	8001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	e008      	b.n	8001766 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2225      	movs	r2, #37	@ 0x25
 8001770:	2101      	movs	r1, #1
 8001772:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	bffdfff8 	.word	0xbffdfff8
 800178c:	ffff800f 	.word	0xffff800f

08001790 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800179e:	2317      	movs	r3, #23
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2224      	movs	r2, #36	@ 0x24
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_DMA_Start_IT+0x24>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e06f      	b.n	8001894 <HAL_DMA_Start_IT+0x104>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2224      	movs	r2, #36	@ 0x24
 80017b8:	2101      	movs	r1, #1
 80017ba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2225      	movs	r2, #37	@ 0x25
 80017c0:	5c9b      	ldrb	r3, [r3, r2]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d157      	bne.n	8001878 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2225      	movs	r2, #37	@ 0x25
 80017cc:	2102      	movs	r1, #2
 80017ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	438a      	bics	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f9d3 	bl	8001b98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	210e      	movs	r1, #14
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e00f      	b.n	800182c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2104      	movs	r1, #4
 8001818:	438a      	bics	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	210a      	movs	r1, #10
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	4013      	ands	r3, r2
 8001838:	d008      	beq.n	800184c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800185e:	2180      	movs	r1, #128	@ 0x80
 8001860:	0049      	lsls	r1, r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e00a      	b.n	800188e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2224      	movs	r2, #36	@ 0x24
 8001882:	2100      	movs	r1, #0
 8001884:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001886:	2317      	movs	r3, #23
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800188e:	2317      	movs	r3, #23
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b006      	add	sp, #24
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e050      	b.n	8001950 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2225      	movs	r2, #37	@ 0x25
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d008      	beq.n	80018cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	@ 0x24
 80018c4:	2100      	movs	r1, #0
 80018c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e041      	b.n	8001950 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	210e      	movs	r1, #14
 80018d8:	438a      	bics	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	491c      	ldr	r1, [pc, #112]	@ (8001958 <HAL_DMA_Abort+0xbc>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2101      	movs	r1, #1
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <HAL_DMA_Abort+0xc0>)
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	221c      	movs	r2, #28
 8001906:	4013      	ands	r3, r2
 8001908:	2201      	movs	r2, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_DMA_Abort+0xc0>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800191a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192e:	490a      	ldr	r1, [pc, #40]	@ (8001958 <HAL_DMA_Abort+0xbc>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800193c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2225      	movs	r2, #37	@ 0x25
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2224      	movs	r2, #36	@ 0x24
 800194a:	2100      	movs	r1, #0
 800194c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	fffffeff 	.word	0xfffffeff
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	210f      	movs	r1, #15
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2225      	movs	r2, #37	@ 0x25
 8001974:	5c9b      	ldrb	r3, [r3, r2]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d006      	beq.n	800198a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2204      	movs	r2, #4
 8001980:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e049      	b.n	8001a1e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	210e      	movs	r1, #14
 8001996:	438a      	bics	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	438a      	bics	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b4:	491d      	ldr	r1, [pc, #116]	@ (8001a2c <HAL_DMA_Abort_IT+0xcc>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_DMA_Abort_IT+0xd0>)
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	221c      	movs	r2, #28
 80019c4:	4013      	ands	r3, r2
 80019c6:	2201      	movs	r2, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_DMA_Abort_IT+0xd0>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ec:	490f      	ldr	r1, [pc, #60]	@ (8001a2c <HAL_DMA_Abort_IT+0xcc>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2225      	movs	r2, #37	@ 0x25
 8001a00:	2101      	movs	r1, #1
 8001a02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	@ 0x24
 8001a08:	2100      	movs	r1, #0
 8001a0a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	4798      	blx	r3
    }
  }
  return status;
 8001a1e:	230f      	movs	r3, #15
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b004      	add	sp, #16
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	fffffeff 	.word	0xfffffeff
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001a3c:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	221c      	movs	r2, #28
 8001a50:	4013      	ands	r3, r2
 8001a52:	2204      	movs	r2, #4
 8001a54:	409a      	lsls	r2, r3
 8001a56:	0013      	movs	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d027      	beq.n	8001aae <HAL_DMA_IRQHandler+0x7a>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2204      	movs	r2, #4
 8001a62:	4013      	ands	r3, r2
 8001a64:	d023      	beq.n	8001aae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d107      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	438a      	bics	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001a82:	4b44      	ldr	r3, [pc, #272]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	221c      	movs	r2, #28
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2204      	movs	r2, #4
 8001a90:	409a      	lsls	r2, r3
 8001a92:	4b40      	ldr	r3, [pc, #256]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d100      	bne.n	8001aa2 <HAL_DMA_IRQHandler+0x6e>
 8001aa0:	e073      	b.n	8001b8a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001aac:	e06d      	b.n	8001b8a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	221c      	movs	r2, #28
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	0013      	movs	r3, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d02e      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xec>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d02a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d10b      	bne.n	8001aee <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2225      	movs	r2, #37	@ 0x25
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	221c      	movs	r2, #28
 8001af8:	4013      	ands	r3, r2
 8001afa:	2202      	movs	r2, #2
 8001afc:	409a      	lsls	r2, r3
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2224      	movs	r2, #36	@ 0x24
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03a      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	0010      	movs	r0, r2
 8001b1c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001b1e:	e034      	b.n	8001b8a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	221c      	movs	r2, #28
 8001b26:	4013      	ands	r3, r2
 8001b28:	2208      	movs	r2, #8
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	d02b      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x158>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2208      	movs	r2, #8
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d027      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	210e      	movs	r1, #14
 8001b48:	438a      	bics	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	221c      	movs	r2, #28
 8001b56:	4013      	ands	r3, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_DMA_IRQHandler+0x160>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2225      	movs	r2, #37	@ 0x25
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	0010      	movs	r0, r2
 8001b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46c0      	nop			@ (mov r8, r8)
}
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40020000 	.word	0x40020000

08001b98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <DMA_SetConfig+0x7c>)
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	221c      	movs	r2, #28
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <DMA_SetConfig+0x7c>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d108      	bne.n	8001bfa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bf8:	e007      	b.n	8001c0a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]
}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	40020000 	.word	0x40020000

08001c18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	4a10      	ldr	r2, [pc, #64]	@ (8001c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001c28:	4694      	mov	ip, r2
 8001c2a:	4463      	add	r3, ip
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	001a      	movs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	001a      	movs	r2, r3
 8001c3a:	23ff      	movs	r3, #255	@ 0xff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	3b08      	subs	r3, #8
 8001c40:	2114      	movs	r1, #20
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7fe fa68 	bl	8000118 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001c50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	221f      	movs	r2, #31
 8001c56:	4013      	ands	r3, r2
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	10008200 	.word	0x10008200
 8001c6c:	40020880 	.word	0x40020880

08001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	223f      	movs	r2, #63	@ 0x3f
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c86:	4694      	mov	ip, r2
 8001c88:	4463      	add	r3, ip
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	1000823f 	.word	0x1000823f
 8001cb4:	40020940 	.word	0x40020940

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e147      	b.n	8001f58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <HAL_GPIO_Init+0x28>
 8001cde:	e138      	b.n	8001f52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x40>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	409a      	lsls	r2, r3
 8001d06:	0013      	movs	r3, r2
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	2201      	movs	r2, #1
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d017      	beq.n	8001d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	43da      	mvns	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d123      	bne.n	8001dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	58d3      	ldr	r3, [r2, r3]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2207      	movs	r2, #7
 8001db4:	4013      	ands	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2107      	movs	r1, #7
 8001dce:	400b      	ands	r3, r1
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2203      	movs	r2, #3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	23c0      	movs	r3, #192	@ 0xc0
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d100      	bne.n	8001e2c <HAL_GPIO_Init+0x174>
 8001e2a:	e092      	b.n	8001f52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e2c:	4a50      	ldr	r2, [pc, #320]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3318      	adds	r3, #24
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	589b      	ldr	r3, [r3, r2]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	220f      	movs	r2, #15
 8001e44:	409a      	lsls	r2, r3
 8001e46:	0013      	movs	r3, r2
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	23a0      	movs	r3, #160	@ 0xa0
 8001e54:	05db      	lsls	r3, r3, #23
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x1ca>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a45      	ldr	r2, [pc, #276]	@ (8001f74 <HAL_GPIO_Init+0x2bc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x1c6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a44      	ldr	r2, [pc, #272]	@ (8001f78 <HAL_GPIO_Init+0x2c0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x1c2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a43      	ldr	r2, [pc, #268]	@ (8001f7c <HAL_GPIO_Init+0x2c4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x1be>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x1cc>
 8001e76:	2305      	movs	r3, #5
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x1cc>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x1cc>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x1cc>
 8001e82:	2300      	movs	r3, #0
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	2103      	movs	r1, #3
 8001e88:	400a      	ands	r2, r1
 8001e8a:	00d2      	lsls	r2, r2, #3
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e94:	4936      	ldr	r1, [pc, #216]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea2:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	035b      	lsls	r3, r3, #13
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	039b      	lsls	r3, r3, #14
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001ef8:	2384      	movs	r3, #132	@ 0x84
 8001efa:	58d3      	ldr	r3, [r2, r3]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43da      	mvns	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	029b      	lsls	r3, r3, #10
 8001f10:	4013      	ands	r3, r2
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1c:	4914      	ldr	r1, [pc, #80]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	2284      	movs	r2, #132	@ 0x84
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	58d3      	ldr	r3, [r2, r3]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	025b      	lsls	r3, r3, #9
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4a:	4909      	ldr	r1, [pc, #36]	@ (8001f70 <HAL_GPIO_Init+0x2b8>)
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	40da      	lsrs	r2, r3
 8001f60:	1e13      	subs	r3, r2, #0
 8001f62:	d000      	beq.n	8001f66 <HAL_GPIO_Init+0x2ae>
 8001f64:	e6b0      	b.n	8001cc8 <HAL_GPIO_Init+0x10>
  }
}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b006      	add	sp, #24
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021800 	.word	0x40021800
 8001f74:	50000400 	.word	0x50000400
 8001f78:	50000800 	.word	0x50000800
 8001f7c:	50000c00 	.word	0x50000c00

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	0008      	movs	r0, r1
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	1c02      	adds	r2, r0, #0
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	1c7b      	adds	r3, r7, #1
 8001f94:	1c0a      	adds	r2, r1, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f98:	1c7b      	adds	r3, r7, #1
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa0:	1cbb      	adds	r3, r7, #2
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001faa:	1cbb      	adds	r3, r7, #2
 8001fac:	881a      	ldrh	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d11f      	bne.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	189b      	adds	r3, r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4912      	ldr	r1, [pc, #72]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7fe f892 	bl	8000118 <__udivsi3>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ffa:	e008      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3b01      	subs	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e001      	b.n	800200e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e009      	b.n	8002022 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	401a      	ands	r2, r3
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	429a      	cmp	r2, r3
 800201e:	d0ed      	beq.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	40007000 	.word	0x40007000
 8002030:	fffff9ff 	.word	0xfffff9ff
 8002034:	20000010 	.word	0x20000010
 8002038:	000f4240 	.word	0x000f4240

0800203c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002040:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	23e0      	movs	r3, #224	@ 0xe0
 8002046:	01db      	lsls	r3, r3, #7
 8002048:	4013      	ands	r3, r2
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2fe      	b.n	8002664 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x1e>
 8002070:	e07c      	b.n	800216c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002072:	4bc3      	ldr	r3, [pc, #780]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2238      	movs	r2, #56	@ 0x38
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207c:	4bc0      	ldr	r3, [pc, #768]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2203      	movs	r2, #3
 8002082:	4013      	ands	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b10      	cmp	r3, #16
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x3e>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d002      	beq.n	8002098 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d10b      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	4bb9      	ldr	r3, [pc, #740]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	d062      	beq.n	800216a <HAL_RCC_OscConfig+0x116>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d15e      	bne.n	800216a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e2d9      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x78>
 80020bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4baf      	ldr	r3, [pc, #700]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	2180      	movs	r1, #128	@ 0x80
 80020c4:	0249      	lsls	r1, r1, #9
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e020      	b.n	800210e <HAL_RCC_OscConfig+0xba>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	23a0      	movs	r3, #160	@ 0xa0
 80020d2:	02db      	lsls	r3, r3, #11
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10e      	bne.n	80020f6 <HAL_RCC_OscConfig+0xa2>
 80020d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020de:	2180      	movs	r1, #128	@ 0x80
 80020e0:	02c9      	lsls	r1, r1, #11
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0249      	lsls	r1, r1, #9
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e00b      	b.n	800210e <HAL_RCC_OscConfig+0xba>
 80020f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	49a1      	ldr	r1, [pc, #644]	@ (8002384 <HAL_RCC_OscConfig+0x330>)
 80020fe:	400a      	ands	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b9f      	ldr	r3, [pc, #636]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b9e      	ldr	r3, [pc, #632]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002108:	499f      	ldr	r1, [pc, #636]	@ (8002388 <HAL_RCC_OscConfig+0x334>)
 800210a:	400a      	ands	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f9c9 	bl	80014ac <HAL_GetTick>
 800211a:	0003      	movs	r3, r0
 800211c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f9c4 	bl	80014ac <HAL_GetTick>
 8002124:	0002      	movs	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	@ 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e298      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	4b93      	ldr	r3, [pc, #588]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	4013      	ands	r3, r2
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0xcc>
 800213e:	e015      	b.n	800216c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f9b4 	bl	80014ac <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214a:	f7ff f9af 	bl	80014ac <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	@ 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e283      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215c:	4b88      	ldr	r3, [pc, #544]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	029b      	lsls	r3, r3, #10
 8002164:	4013      	ands	r3, r2
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0xf6>
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d100      	bne.n	8002178 <HAL_RCC_OscConfig+0x124>
 8002176:	e099      	b.n	80022ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002178:	4b81      	ldr	r3, [pc, #516]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2238      	movs	r2, #56	@ 0x38
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002182:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d102      	bne.n	8002198 <HAL_RCC_OscConfig+0x144>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d002      	beq.n	800219e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d135      	bne.n	800220a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800219e:	4b78      	ldr	r3, [pc, #480]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x162>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e256      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a74      	ldr	r2, [pc, #464]	@ (800238c <HAL_RCC_OscConfig+0x338>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	021a      	lsls	r2, r3, #8
 80021c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002390 <HAL_RCC_OscConfig+0x33c>)
 80021d8:	4013      	ands	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	4b67      	ldr	r3, [pc, #412]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021e6:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	2207      	movs	r2, #7
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a68      	ldr	r2, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x340>)
 80021f2:	40da      	lsrs	r2, r3
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x344>)
 80021f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_OscConfig+0x348>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff f8f9 	bl	80013f4 <HAL_InitTick>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d051      	beq.n	80022aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e22c      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d030      	beq.n	8002274 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002212:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5e      	ldr	r2, [pc, #376]	@ (8002390 <HAL_RCC_OscConfig+0x33c>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002226:	4b56      	ldr	r3, [pc, #344]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b55      	ldr	r3, [pc, #340]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	0049      	lsls	r1, r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f93a 	bl	80014ac <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223e:	f7ff f935 	bl	80014ac <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e209      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4013      	ands	r3, r2
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a4a      	ldr	r2, [pc, #296]	@ (800238c <HAL_RCC_OscConfig+0x338>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	4b44      	ldr	r3, [pc, #272]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	e01b      	b.n	80022ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002274:	4b42      	ldr	r3, [pc, #264]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b41      	ldr	r3, [pc, #260]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800227a:	4949      	ldr	r1, [pc, #292]	@ (80023a0 <HAL_RCC_OscConfig+0x34c>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff f914 	bl	80014ac <HAL_GetTick>
 8002284:	0003      	movs	r3, r0
 8002286:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f90f 	bl	80014ac <HAL_GetTick>
 800228e:	0002      	movs	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1e3      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	4b38      	ldr	r3, [pc, #224]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x236>
 80022a8:	e000      	b.n	80022ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2208      	movs	r2, #8
 80022b2:	4013      	ands	r3, r2
 80022b4:	d047      	beq.n	8002346 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022b6:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2238      	movs	r2, #56	@ 0x38
 80022bc:	4013      	ands	r3, r2
 80022be:	2b18      	cmp	r3, #24
 80022c0:	d10a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	d03c      	beq.n	8002346 <HAL_RCC_OscConfig+0x2f2>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d138      	bne.n	8002346 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e1c5      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d019      	beq.n	8002314 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022e0:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022e4:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff f8de 	bl	80014ac <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff f8d9 	bl	80014ac <HAL_GetTick>
 80022fa:	0002      	movs	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1ad      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002308:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	d0f1      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2a2>
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002314:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002316:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800231a:	2101      	movs	r1, #1
 800231c:	438a      	bics	r2, r1
 800231e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f8c4 	bl	80014ac <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232a:	f7ff f8bf 	bl	80014ac <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e193      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233c:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800233e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d1f1      	bne.n	800232a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2204      	movs	r2, #4
 800234c:	4013      	ands	r3, r2
 800234e:	d100      	bne.n	8002352 <HAL_RCC_OscConfig+0x2fe>
 8002350:	e0c6      	b.n	80024e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	231f      	movs	r3, #31
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2238      	movs	r2, #56	@ 0x38
 8002360:	4013      	ands	r3, r2
 8002362:	2b20      	cmp	r3, #32
 8002364:	d11e      	bne.n	80023a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_OscConfig+0x32c>)
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x31e>
 8002370:	e0b6      	b.n	80024e0 <HAL_RCC_OscConfig+0x48c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d000      	beq.n	800237c <HAL_RCC_OscConfig+0x328>
 800237a:	e0b1      	b.n	80024e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e171      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
 8002380:	40021000 	.word	0x40021000
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	fffbffff 	.word	0xfffbffff
 800238c:	ffff80ff 	.word	0xffff80ff
 8002390:	ffffc7ff 	.word	0xffffc7ff
 8002394:	00f42400 	.word	0x00f42400
 8002398:	20000010 	.word	0x20000010
 800239c:	20000014 	.word	0x20000014
 80023a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a4:	4bb1      	ldr	r3, [pc, #708]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x360>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x362>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4bac      	ldr	r3, [pc, #688]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80023bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023be:	4bab      	ldr	r3, [pc, #684]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	430a      	orrs	r2, r1
 80023c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023c8:	4ba8      	ldr	r3, [pc, #672]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80023ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	055b      	lsls	r3, r3, #21
 80023d0:	4013      	ands	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	4ba4      	ldr	r3, [pc, #656]	@ (8002670 <HAL_RCC_OscConfig+0x61c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d11a      	bne.n	8002420 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ea:	4ba1      	ldr	r3, [pc, #644]	@ (8002670 <HAL_RCC_OscConfig+0x61c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002670 <HAL_RCC_OscConfig+0x61c>)
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	0049      	lsls	r1, r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f858 	bl	80014ac <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002402:	f7ff f853 	bl	80014ac <HAL_GetTick>
 8002406:	0002      	movs	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e127      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b96      	ldr	r3, [pc, #600]	@ (8002670 <HAL_RCC_OscConfig+0x61c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x3e2>
 8002428:	4b90      	ldr	r3, [pc, #576]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800242a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800242c:	4b8f      	ldr	r3, [pc, #572]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002434:	e01c      	b.n	8002470 <HAL_RCC_OscConfig+0x41c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x404>
 800243e:	4b8b      	ldr	r3, [pc, #556]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002440:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002442:	4b8a      	ldr	r3, [pc, #552]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002444:	2104      	movs	r1, #4
 8002446:	430a      	orrs	r2, r1
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c
 800244a:	4b88      	ldr	r3, [pc, #544]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800244c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800244e:	4b87      	ldr	r3, [pc, #540]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002450:	2101      	movs	r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0x41c>
 8002458:	4b84      	ldr	r3, [pc, #528]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800245a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800245c:	4b83      	ldr	r3, [pc, #524]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800245e:	2101      	movs	r1, #1
 8002460:	438a      	bics	r2, r1
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002464:	4b81      	ldr	r3, [pc, #516]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002466:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002468:	4b80      	ldr	r3, [pc, #512]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800246a:	2104      	movs	r1, #4
 800246c:	438a      	bics	r2, r1
 800246e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d014      	beq.n	80024a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff f818 	bl	80014ac <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002480:	e009      	b.n	8002496 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7ff f813 	bl	80014ac <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	4a79      	ldr	r2, [pc, #484]	@ (8002674 <HAL_RCC_OscConfig+0x620>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0e6      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x42e>
 80024a0:	e013      	b.n	80024ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff f803 	bl	80014ac <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024aa:	e009      	b.n	80024c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fffe 	bl	80014ac <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002674 <HAL_RCC_OscConfig+0x620>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0d1      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024c0:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024ca:	231f      	movs	r3, #31
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80024d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024d8:	4b64      	ldr	r3, [pc, #400]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80024da:	4967      	ldr	r1, [pc, #412]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80024dc:	400a      	ands	r2, r1
 80024de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d100      	bne.n	80024ea <HAL_RCC_OscConfig+0x496>
 80024e8:	e0bb      	b.n	8002662 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	4b60      	ldr	r3, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2238      	movs	r2, #56	@ 0x38
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d100      	bne.n	80024f8 <HAL_RCC_OscConfig+0x4a4>
 80024f6:	e07b      	b.n	80025f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d156      	bne.n	80025ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b5a      	ldr	r3, [pc, #360]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b59      	ldr	r3, [pc, #356]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002506:	495d      	ldr	r1, [pc, #372]	@ (800267c <HAL_RCC_OscConfig+0x628>)
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe ffce 	bl	80014ac <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe ffc9 	bl	80014ac <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e09d      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	4b50      	ldr	r3, [pc, #320]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	049b      	lsls	r3, r3, #18
 8002530:	4013      	ands	r3, r2
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b4d      	ldr	r3, [pc, #308]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a51      	ldr	r2, [pc, #324]	@ (8002680 <HAL_RCC_OscConfig+0x62c>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002560:	431a      	orrs	r2, r3
 8002562:	4b42      	ldr	r3, [pc, #264]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b40      	ldr	r3, [pc, #256]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0449      	lsls	r1, r1, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002576:	4b3d      	ldr	r3, [pc, #244]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b3c      	ldr	r3, [pc, #240]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	0549      	lsls	r1, r1, #21
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe ff92 	bl	80014ac <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe ff8d 	bl	80014ac <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e061      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a0:	4b32      	ldr	r3, [pc, #200]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	049b      	lsls	r3, r3, #18
 80025a8:	4013      	ands	r3, r2
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x53a>
 80025ac:	e059      	b.n	8002662 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ae:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025b4:	4931      	ldr	r1, [pc, #196]	@ (800267c <HAL_RCC_OscConfig+0x628>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe ff77 	bl	80014ac <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe ff72 	bl	80014ac <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e046      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	049b      	lsls	r3, r3, #18
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025e8:	4926      	ldr	r1, [pc, #152]	@ (8002684 <HAL_RCC_OscConfig+0x630>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	e038      	b.n	8002662 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e033      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x618>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2203      	movs	r2, #3
 8002606:	401a      	ands	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d126      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2270      	movs	r2, #112	@ 0x70
 8002614:	401a      	ands	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d11f      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	23fe      	movs	r3, #254	@ 0xfe
 8002622:	01db      	lsls	r3, r3, #7
 8002624:	401a      	ands	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d116      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	23f8      	movs	r3, #248	@ 0xf8
 8002634:	039b      	lsls	r3, r3, #14
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d10e      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	23e0      	movs	r3, #224	@ 0xe0
 8002644:	051b      	lsls	r3, r3, #20
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	0f5b      	lsrs	r3, r3, #29
 8002654:	075a      	lsls	r2, r3, #29
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b008      	add	sp, #32
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
 8002674:	00001388 	.word	0x00001388
 8002678:	efffffff 	.word	0xefffffff
 800267c:	feffffff 	.word	0xfeffffff
 8002680:	11c1808c 	.word	0x11c1808c
 8002684:	eefefffc 	.word	0xeefefffc

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0e9      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2207      	movs	r2, #7
 80026a2:	4013      	ands	r3, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d91e      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b73      	ldr	r3, [pc, #460]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2207      	movs	r2, #7
 80026b0:	4393      	bics	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b70      	ldr	r3, [pc, #448]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fef6 	bl	80014ac <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c4:	e009      	b.n	80026da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe fef1 	bl	80014ac <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a6a      	ldr	r2, [pc, #424]	@ (800287c <HAL_RCC_ClockConfig+0x1f4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0ca      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026da:	4b67      	ldr	r3, [pc, #412]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2207      	movs	r2, #7
 80026e0:	4013      	ands	r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d015      	beq.n	800271e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2204      	movs	r2, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d006      	beq.n	800270a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026fc:	4b60      	ldr	r3, [pc, #384]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002702:	21e0      	movs	r1, #224	@ 0xe0
 8002704:	01c9      	lsls	r1, r1, #7
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4a5d      	ldr	r2, [pc, #372]	@ (8002884 <HAL_RCC_ClockConfig+0x1fc>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d057      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002730:	4b53      	ldr	r3, [pc, #332]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	4013      	ands	r3, r2
 800273a:	d12b      	bne.n	8002794 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e097      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d107      	bne.n	8002758 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002748:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	049b      	lsls	r3, r3, #18
 8002750:	4013      	ands	r3, r2
 8002752:	d11f      	bne.n	8002794 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e08b      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002760:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4013      	ands	r3, r2
 800276a:	d113      	bne.n	8002794 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e07f      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002778:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	d108      	bne.n	8002794 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e074      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e06d      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2207      	movs	r2, #7
 800279a:	4393      	bics	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fe80 	bl	80014ac <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b0:	e009      	b.n	80027c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b2:	f7fe fe7b 	bl	80014ac <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <HAL_RCC_ClockConfig+0x1f4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e054      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2238      	movs	r2, #56	@ 0x38
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1ec      	bne.n	80027b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2207      	movs	r2, #7
 80027de:	4013      	ands	r3, r2
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d21e      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2207      	movs	r2, #7
 80027ec:	4393      	bics	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fe58 	bl	80014ac <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002800:	e009      	b.n	8002816 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002802:	f7fe fe53 	bl	80014ac <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_RCC_ClockConfig+0x1f4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e02c      	b.n	8002870 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002816:	4b18      	ldr	r3, [pc, #96]	@ (8002878 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d1ee      	bne.n	8002802 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2204      	movs	r2, #4
 800282a:	4013      	ands	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800282e:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_RCC_ClockConfig+0x200>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002842:	f000 f829 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002846:	0001      	movs	r1, r0
 8002848:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_RCC_ClockConfig+0x1f8>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	220f      	movs	r2, #15
 8002850:	401a      	ands	r2, r3
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <HAL_RCC_ClockConfig+0x204>)
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	58d3      	ldr	r3, [r2, r3]
 8002858:	221f      	movs	r2, #31
 800285a:	4013      	ands	r3, r2
 800285c:	000a      	movs	r2, r1
 800285e:	40da      	lsrs	r2, r3
 8002860:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCC_ClockConfig+0x208>)
 8002862:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_ClockConfig+0x20c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fdc3 	bl	80013f4 <HAL_InitTick>
 800286e:	0003      	movs	r3, r0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	00001388 	.word	0x00001388
 8002880:	40021000 	.word	0x40021000
 8002884:	fffff0ff 	.word	0xfffff0ff
 8002888:	ffff8fff 	.word	0xffff8fff
 800288c:	08005784 	.word	0x08005784
 8002890:	20000010 	.word	0x20000010
 8002894:	20000014 	.word	0x20000014

08002898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289e:	4b3c      	ldr	r3, [pc, #240]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2238      	movs	r2, #56	@ 0x38
 80028a4:	4013      	ands	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028a8:	4b39      	ldr	r3, [pc, #228]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0adb      	lsrs	r3, r3, #11
 80028ae:	2207      	movs	r2, #7
 80028b0:	4013      	ands	r3, r2
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	0013      	movs	r3, r2
 80028b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	4835      	ldr	r0, [pc, #212]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028be:	f7fd fc2b 	bl	8000118 <__udivsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e05d      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c8:	4b31      	ldr	r3, [pc, #196]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2238      	movs	r2, #56	@ 0x38
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d102      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d4:	4b30      	ldr	r3, [pc, #192]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x100>)
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e054      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2238      	movs	r2, #56	@ 0x38
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d138      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2203      	movs	r2, #3
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028f0:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	2207      	movs	r2, #7
 80028f8:	4013      	ands	r3, r2
 80028fa:	3301      	adds	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d10d      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	4824      	ldr	r0, [pc, #144]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x100>)
 8002908:	f7fd fc06 	bl	8000118 <__udivsi3>
 800290c:	0003      	movs	r3, r0
 800290e:	0019      	movs	r1, r3
 8002910:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	227f      	movs	r2, #127	@ 0x7f
 8002918:	4013      	ands	r3, r2
 800291a:	434b      	muls	r3, r1
 800291c:	617b      	str	r3, [r7, #20]
        break;
 800291e:	e00d      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	481c      	ldr	r0, [pc, #112]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002924:	f7fd fbf8 	bl	8000118 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	0019      	movs	r1, r3
 800292c:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	227f      	movs	r2, #127	@ 0x7f
 8002934:	4013      	ands	r3, r2
 8002936:	434b      	muls	r3, r1
 8002938:	617b      	str	r3, [r7, #20]
        break;
 800293a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0f5b      	lsrs	r3, r3, #29
 8002942:	2207      	movs	r2, #7
 8002944:	4013      	ands	r3, r2
 8002946:	3301      	adds	r3, #1
 8002948:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7fd fbe3 	bl	8000118 <__udivsi3>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	e015      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2238      	movs	r2, #56	@ 0x38
 800295e:	4013      	ands	r3, r2
 8002960:	2b20      	cmp	r3, #32
 8002962:	d103      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2238      	movs	r2, #56	@ 0x38
 8002972:	4013      	ands	r3, r2
 8002974:	2b18      	cmp	r3, #24
 8002976:	d103      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002978:	23fa      	movs	r3, #250	@ 0xfa
 800297a:	01db      	lsls	r3, r3, #7
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	e001      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002984:	693b      	ldr	r3, [r7, #16]
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b006      	add	sp, #24
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	40021000 	.word	0x40021000
 8002994:	00f42400 	.word	0x00f42400
 8002998:	007a1200 	.word	0x007a1200

0800299c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b02      	ldr	r3, [pc, #8]	@ (80029ac <HAL_RCC_GetHCLKFreq+0x10>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			@ (mov r8, r8)
 80029ac:	20000010 	.word	0x20000010

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029b4:	f7ff fff2 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029b8:	0004      	movs	r4, r0
 80029ba:	f7ff fb3f 	bl	800203c <LL_RCC_GetAPB1Prescaler>
 80029be:	0003      	movs	r3, r0
 80029c0:	0b1a      	lsrs	r2, r3, #12
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	58d3      	ldr	r3, [r2, r3]
 80029c8:	221f      	movs	r2, #31
 80029ca:	4013      	ands	r3, r2
 80029cc:	40dc      	lsrs	r4, r3
 80029ce:	0023      	movs	r3, r4
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdb0      	pop	{r4, r5, r7, pc}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	080057c4 	.word	0x080057c4

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029e4:	2313      	movs	r3, #19
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ec:	2312      	movs	r3, #18
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	029b      	lsls	r3, r3, #10
 80029fc:	4013      	ands	r3, r2
 80029fe:	d100      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a00:	e0a3      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2011      	movs	r0, #17
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4bc3      	ldr	r3, [pc, #780]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	055b      	lsls	r3, r3, #21
 8002a12:	4013      	ands	r3, r2
 8002a14:	d110      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4bc0      	ldr	r3, [pc, #768]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a1a:	4bbf      	ldr	r3, [pc, #764]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	0549      	lsls	r1, r1, #21
 8002a20:	430a      	orrs	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a24:	4bbc      	ldr	r3, [pc, #752]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	055b      	lsls	r3, r3, #21
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a38:	4bb8      	ldr	r3, [pc, #736]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4bb7      	ldr	r3, [pc, #732]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a3e:	2180      	movs	r1, #128	@ 0x80
 8002a40:	0049      	lsls	r1, r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a46:	f7fe fd31 	bl	80014ac <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fe fd2c 	bl	80014ac <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d904      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a5e:	2313      	movs	r3, #19
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2203      	movs	r2, #3
 8002a64:	701a      	strb	r2, [r3, #0]
        break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a68:	4bac      	ldr	r3, [pc, #688]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0ed      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a74:	2313      	movs	r3, #19
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d154      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7e:	4ba6      	ldr	r3, [pc, #664]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a82:	23c0      	movs	r3, #192	@ 0xc0
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d014      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9a:	4b9f      	ldr	r3, [pc, #636]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9e:	4aa0      	ldr	r2, [pc, #640]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa8:	4b9b      	ldr	r3, [pc, #620]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	0249      	lsls	r1, r1, #9
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	4b99      	ldr	r3, [pc, #612]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab6:	4b98      	ldr	r3, [pc, #608]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab8:	499a      	ldr	r1, [pc, #616]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002abe:	4b96      	ldr	r3, [pc, #600]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d016      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fcee 	bl	80014ac <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad4:	e00c      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fce9 	bl	80014ac <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	4a91      	ldr	r2, [pc, #580]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d904      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ae6:	2313      	movs	r3, #19
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2203      	movs	r2, #3
 8002aec:	701a      	strb	r2, [r3, #0]
            break;
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af0:	4b89      	ldr	r3, [pc, #548]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0ed      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002afa:	2313      	movs	r3, #19
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b04:	4b84      	ldr	r3, [pc, #528]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	4a85      	ldr	r2, [pc, #532]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b12:	4b81      	ldr	r3, [pc, #516]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b18:	e00c      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2213      	movs	r2, #19
 8002b20:	18ba      	adds	r2, r7, r2
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e005      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2213      	movs	r2, #19
 8002b2e:	18ba      	adds	r2, r7, r2
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b34:	2311      	movs	r3, #17
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b42:	4b75      	ldr	r3, [pc, #468]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b44:	4979      	ldr	r1, [pc, #484]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b54:	4b70      	ldr	r3, [pc, #448]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b72:	4b69      	ldr	r3, [pc, #420]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	220c      	movs	r2, #12
 8002b78:	4393      	bics	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b65      	ldr	r3, [pc, #404]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b90:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	4a66      	ldr	r2, [pc, #408]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d009      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bb0:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	4b56      	ldr	r3, [pc, #344]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bd0:	4b51      	ldr	r3, [pc, #324]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4013      	ands	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	4a52      	ldr	r2, [pc, #328]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	4b46      	ldr	r3, [pc, #280]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c0e:	4b42      	ldr	r3, [pc, #264]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	0899      	lsrs	r1, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b39      	ldr	r3, [pc, #228]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	0249      	lsls	r1, r1, #9
 8002c36:	430a      	orrs	r2, r1
 8002c38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	4013      	ands	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c46:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c54:	4b30      	ldr	r3, [pc, #192]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	039b      	lsls	r3, r3, #14
 8002c62:	4013      	ands	r3, r2
 8002c64:	d016      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c66:	4b2c      	ldr	r3, [pc, #176]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	4a35      	ldr	r2, [pc, #212]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c74:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c76:	430a      	orrs	r2, r1
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	03db      	lsls	r3, r3, #15
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d106      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	0449      	lsls	r1, r1, #17
 8002c90:	430a      	orrs	r2, r1
 8002c92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	03db      	lsls	r3, r3, #15
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d016      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	4a27      	ldr	r2, [pc, #156]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cae:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	045b      	lsls	r3, r3, #17
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d106      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	0449      	lsls	r1, r1, #17
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002cda:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	01db      	lsls	r3, r3, #7
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	0249      	lsls	r1, r1, #9
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d08:	2312      	movs	r3, #18
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b006      	add	sp, #24
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	fffffcff 	.word	0xfffffcff
 8002d24:	fffeffff 	.word	0xfffeffff
 8002d28:	00001388 	.word	0x00001388
 8002d2c:	efffffff 	.word	0xefffffff
 8002d30:	fffff3ff 	.word	0xfffff3ff
 8002d34:	fff3ffff 	.word	0xfff3ffff
 8002d38:	ffcfffff 	.word	0xffcfffff
 8002d3c:	ffffcfff 	.word	0xffffcfff
 8002d40:	ffbfffff 	.word	0xffbfffff
 8002d44:	feffffff 	.word	0xfeffffff
 8002d48:	ffff3fff 	.word	0xffff3fff

08002d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e046      	b.n	8002dec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2288      	movs	r2, #136	@ 0x88
 8002d62:	589b      	ldr	r3, [r3, r2]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2284      	movs	r2, #132	@ 0x84
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fe fa22 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2288      	movs	r2, #136	@ 0x88
 8002d7c:	2124      	movs	r1, #36	@ 0x24
 8002d7e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fe28 	bl	80039f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 fb66 	bl	8003474 <UART_SetConfig>
 8002da8:	0003      	movs	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e01c      	b.n	8002dec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	490d      	ldr	r1, [pc, #52]	@ (8002df4 <HAL_UART_Init+0xa8>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	212a      	movs	r1, #42	@ 0x2a
 8002dce:	438a      	bics	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 feb7 	bl	8003b58 <UART_CheckIdleState>
 8002dea:	0003      	movs	r3, r0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	ffffb7ff 	.word	0xffffb7ff

08002df8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b0aa      	sub	sp, #168	@ 0xa8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	22a4      	movs	r2, #164	@ 0xa4
 8002e08:	18b9      	adds	r1, r7, r2
 8002e0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	20a0      	movs	r0, #160	@ 0xa0
 8002e14:	1839      	adds	r1, r7, r0
 8002e16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	249c      	movs	r4, #156	@ 0x9c
 8002e20:	1939      	adds	r1, r7, r4
 8002e22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e24:	0011      	movs	r1, r2
 8002e26:	18bb      	adds	r3, r7, r2
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4aa2      	ldr	r2, [pc, #648]	@ (80030b4 <HAL_UART_IRQHandler+0x2bc>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2298      	movs	r2, #152	@ 0x98
 8002e30:	18bd      	adds	r5, r7, r2
 8002e32:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e34:	18bb      	adds	r3, r7, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d11a      	bne.n	8002e72 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2220      	movs	r2, #32
 8002e42:	4013      	ands	r3, r2
 8002e44:	d015      	beq.n	8002e72 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d105      	bne.n	8002e5c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	055b      	lsls	r3, r3, #21
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d00a      	beq.n	8002e72 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d100      	bne.n	8002e66 <HAL_UART_IRQHandler+0x6e>
 8002e64:	e2dc      	b.n	8003420 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	4798      	blx	r3
      }
      return;
 8002e70:	e2d6      	b.n	8003420 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e72:	2398      	movs	r3, #152	@ 0x98
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <HAL_UART_IRQHandler+0x86>
 8002e7c:	e122      	b.n	80030c4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e7e:	239c      	movs	r3, #156	@ 0x9c
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8c      	ldr	r2, [pc, #560]	@ (80030b8 <HAL_UART_IRQHandler+0x2c0>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e8a:	23a0      	movs	r3, #160	@ 0xa0
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a8a      	ldr	r2, [pc, #552]	@ (80030bc <HAL_UART_IRQHandler+0x2c4>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	d100      	bne.n	8002e98 <HAL_UART_IRQHandler+0xa0>
 8002e96:	e115      	b.n	80030c4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e98:	23a4      	movs	r3, #164	@ 0xa4
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d012      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
 8002ea4:	23a0      	movs	r3, #160	@ 0xa0
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2290      	movs	r2, #144	@ 0x90
 8002ebe:	589b      	ldr	r3, [r3, r2]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2190      	movs	r1, #144	@ 0x90
 8002ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eca:	23a4      	movs	r3, #164	@ 0xa4
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d011      	beq.n	8002efa <HAL_UART_IRQHandler+0x102>
 8002ed6:	239c      	movs	r3, #156	@ 0x9c
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2290      	movs	r2, #144	@ 0x90
 8002eee:	589b      	ldr	r3, [r3, r2]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2190      	movs	r1, #144	@ 0x90
 8002ef8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002efa:	23a4      	movs	r3, #164	@ 0xa4
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d011      	beq.n	8002f2a <HAL_UART_IRQHandler+0x132>
 8002f06:	239c      	movs	r3, #156	@ 0x9c
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2204      	movs	r2, #4
 8002f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2290      	movs	r2, #144	@ 0x90
 8002f1e:	589b      	ldr	r3, [r3, r2]
 8002f20:	2202      	movs	r2, #2
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2190      	movs	r1, #144	@ 0x90
 8002f28:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f2a:	23a4      	movs	r3, #164	@ 0xa4
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2208      	movs	r2, #8
 8002f32:	4013      	ands	r3, r2
 8002f34:	d017      	beq.n	8002f66 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f36:	23a0      	movs	r3, #160	@ 0xa0
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d105      	bne.n	8002f4e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f42:	239c      	movs	r3, #156	@ 0x9c
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5b      	ldr	r2, [pc, #364]	@ (80030b8 <HAL_UART_IRQHandler+0x2c0>)
 8002f4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f4c:	d00b      	beq.n	8002f66 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2290      	movs	r2, #144	@ 0x90
 8002f5a:	589b      	ldr	r3, [r3, r2]
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2190      	movs	r1, #144	@ 0x90
 8002f64:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f66:	23a4      	movs	r3, #164	@ 0xa4
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_UART_IRQHandler+0x1a4>
 8002f74:	23a0      	movs	r3, #160	@ 0xa0
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	04db      	lsls	r3, r3, #19
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d00c      	beq.n	8002f9c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2280      	movs	r2, #128	@ 0x80
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2290      	movs	r2, #144	@ 0x90
 8002f90:	589b      	ldr	r3, [r3, r2]
 8002f92:	2220      	movs	r2, #32
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2190      	movs	r1, #144	@ 0x90
 8002f9a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2290      	movs	r2, #144	@ 0x90
 8002fa0:	589b      	ldr	r3, [r3, r2]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d100      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x1b0>
 8002fa6:	e23d      	b.n	8003424 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fa8:	23a4      	movs	r3, #164	@ 0xa4
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d015      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fb4:	23a0      	movs	r3, #160	@ 0xa0
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d106      	bne.n	8002fce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fc0:	239c      	movs	r3, #156	@ 0x9c
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	055b      	lsls	r3, r3, #21
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d008      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	0010      	movs	r0, r2
 8002fde:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2290      	movs	r2, #144	@ 0x90
 8002fe4:	589b      	ldr	r3, [r3, r2]
 8002fe6:	2194      	movs	r1, #148	@ 0x94
 8002fe8:	187a      	adds	r2, r7, r1
 8002fea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2240      	movs	r2, #64	@ 0x40
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b40      	cmp	r3, #64	@ 0x40
 8002ff8:	d004      	beq.n	8003004 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2228      	movs	r2, #40	@ 0x28
 8003000:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003002:	d04c      	beq.n	800309e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 ffa6 	bl	8003f58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2240      	movs	r2, #64	@ 0x40
 8003014:	4013      	ands	r3, r2
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d13c      	bne.n	8003094 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301a:	f3ef 8310 	mrs	r3, PRIMASK
 800301e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003022:	2090      	movs	r0, #144	@ 0x90
 8003024:	183a      	adds	r2, r7, r0
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	2301      	movs	r3, #1
 800302a:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	438a      	bics	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	183b      	adds	r3, r7, r0
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2280      	movs	r2, #128	@ 0x80
 8003056:	589b      	ldr	r3, [r3, r2]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	589b      	ldr	r3, [r3, r2]
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <HAL_UART_IRQHandler+0x2c8>)
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	589b      	ldr	r3, [r3, r2]
 800306c:	0018      	movs	r0, r3
 800306e:	f7fe fc77 	bl	8001960 <HAL_DMA_Abort_IT>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d01c      	beq.n	80030b0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	589b      	ldr	r3, [r3, r2]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	5852      	ldr	r2, [r2, r1]
 8003084:	0010      	movs	r0, r2
 8003086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e012      	b.n	80030b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f9e9 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003092:	e00d      	b.n	80030b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f9e4 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e008      	b.n	80030b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f9df 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2290      	movs	r2, #144	@ 0x90
 80030aa:	2100      	movs	r1, #0
 80030ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030ae:	e1b9      	b.n	8003424 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80030b2:	e1b7      	b.n	8003424 <HAL_UART_IRQHandler+0x62c>
 80030b4:	0000080f 	.word	0x0000080f
 80030b8:	10000001 	.word	0x10000001
 80030bc:	04000120 	.word	0x04000120
 80030c0:	0800421d 	.word	0x0800421d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d000      	beq.n	80030ce <HAL_UART_IRQHandler+0x2d6>
 80030cc:	e13e      	b.n	800334c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ce:	23a4      	movs	r3, #164	@ 0xa4
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	d100      	bne.n	80030dc <HAL_UART_IRQHandler+0x2e4>
 80030da:	e137      	b.n	800334c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030dc:	23a0      	movs	r3, #160	@ 0xa0
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	4013      	ands	r3, r2
 80030e6:	d100      	bne.n	80030ea <HAL_UART_IRQHandler+0x2f2>
 80030e8:	e130      	b.n	800334c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b40      	cmp	r3, #64	@ 0x40
 80030fe:	d000      	beq.n	8003102 <HAL_UART_IRQHandler+0x30a>
 8003100:	e0a4      	b.n	800324c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	589b      	ldr	r3, [r3, r2]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	217e      	movs	r1, #126	@ 0x7e
 800310e:	187b      	adds	r3, r7, r1
 8003110:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003112:	187b      	adds	r3, r7, r1
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d100      	bne.n	800311c <HAL_UART_IRQHandler+0x324>
 800311a:	e185      	b.n	8003428 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	225c      	movs	r2, #92	@ 0x5c
 8003120:	5a9b      	ldrh	r3, [r3, r2]
 8003122:	187a      	adds	r2, r7, r1
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d300      	bcc.n	800312c <HAL_UART_IRQHandler+0x334>
 800312a:	e17d      	b.n	8003428 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	187a      	adds	r2, r7, r1
 8003130:	215e      	movs	r1, #94	@ 0x5e
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2280      	movs	r2, #128	@ 0x80
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d170      	bne.n	8003228 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003146:	f3ef 8310 	mrs	r3, PRIMASK
 800314a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003150:	2301      	movs	r3, #1
 8003152:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	49b4      	ldr	r1, [pc, #720]	@ (8003438 <HAL_UART_IRQHandler+0x640>)
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800316e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	677b      	str	r3, [r7, #116]	@ 0x74
 8003182:	2301      	movs	r3, #1
 8003184:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031a0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80031b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80031b4:	2301      	movs	r3, #1
 80031b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2140      	movs	r1, #64	@ 0x40
 80031cc:	438a      	bics	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	228c      	movs	r2, #140	@ 0x8c
 80031e0:	2120      	movs	r1, #32
 80031e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ea:	f3ef 8310 	mrs	r3, PRIMASK
 80031ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031f4:	2301      	movs	r3, #1
 80031f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031fa:	f383 8810 	msr	PRIMASK, r3
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2110      	movs	r1, #16
 800320c:	438a      	bics	r2, r1
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003212:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003214:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003216:	f383 8810 	msr	PRIMASK, r3
}
 800321a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2280      	movs	r2, #128	@ 0x80
 8003220:	589b      	ldr	r3, [r3, r2]
 8003222:	0018      	movs	r0, r3
 8003224:	f7fe fb3a 	bl	800189c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	225c      	movs	r2, #92	@ 0x5c
 8003232:	5a9a      	ldrh	r2, [r3, r2]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	215e      	movs	r1, #94	@ 0x5e
 8003238:	5a5b      	ldrh	r3, [r3, r1]
 800323a:	b29b      	uxth	r3, r3
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0011      	movs	r1, r2
 8003244:	0018      	movs	r0, r3
 8003246:	f7fd fec7 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800324a:	e0ed      	b.n	8003428 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	225c      	movs	r2, #92	@ 0x5c
 8003250:	5a99      	ldrh	r1, [r3, r2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	225e      	movs	r2, #94	@ 0x5e
 8003256:	5a9b      	ldrh	r3, [r3, r2]
 8003258:	b29a      	uxth	r2, r3
 800325a:	208e      	movs	r0, #142	@ 0x8e
 800325c:	183b      	adds	r3, r7, r0
 800325e:	1a8a      	subs	r2, r1, r2
 8003260:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	225e      	movs	r2, #94	@ 0x5e
 8003266:	5a9b      	ldrh	r3, [r3, r2]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x478>
 800326e:	e0dd      	b.n	800342c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003270:	183b      	adds	r3, r7, r0
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d100      	bne.n	800327a <HAL_UART_IRQHandler+0x482>
 8003278:	e0d8      	b.n	800342c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327a:	f3ef 8310 	mrs	r3, PRIMASK
 800327e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003280:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003282:	2488      	movs	r4, #136	@ 0x88
 8003284:	193a      	adds	r2, r7, r4
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	2301      	movs	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4967      	ldr	r1, [pc, #412]	@ (800343c <HAL_UART_IRQHandler+0x644>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f383 8810 	msr	PRIMASK, r3
}
 80032b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80032b8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032ba:	2484      	movs	r4, #132	@ 0x84
 80032bc:	193a      	adds	r2, r7, r4
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f383 8810 	msr	PRIMASK, r3
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	495a      	ldr	r1, [pc, #360]	@ (8003440 <HAL_UART_IRQHandler+0x648>)
 80032d8:	400a      	ands	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	228c      	movs	r2, #140	@ 0x8c
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	2480      	movs	r4, #128	@ 0x80
 8003308:	193a      	adds	r2, r7, r4
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	2301      	movs	r3, #1
 800330e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	f383 8810 	msr	PRIMASK, r3
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2110      	movs	r1, #16
 8003324:	438a      	bics	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	193b      	adds	r3, r7, r4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	f383 8810 	msr	PRIMASK, r3
}
 8003334:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800333c:	183b      	adds	r3, r7, r0
 800333e:	881a      	ldrh	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f7fd fe47 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800334a:	e06f      	b.n	800342c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800334c:	23a4      	movs	r3, #164	@ 0xa4
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	035b      	lsls	r3, r3, #13
 8003356:	4013      	ands	r3, r2
 8003358:	d010      	beq.n	800337c <HAL_UART_IRQHandler+0x584>
 800335a:	239c      	movs	r3, #156	@ 0x9c
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	2380      	movs	r3, #128	@ 0x80
 8003362:	03db      	lsls	r3, r3, #15
 8003364:	4013      	ands	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2280      	movs	r2, #128	@ 0x80
 800336e:	0352      	lsls	r2, r2, #13
 8003370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 ff94 	bl	80042a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800337a:	e05a      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800337c:	23a4      	movs	r3, #164	@ 0xa4
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	4013      	ands	r3, r2
 8003386:	d016      	beq.n	80033b6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003388:	23a0      	movs	r3, #160	@ 0xa0
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	4013      	ands	r3, r2
 8003392:	d106      	bne.n	80033a2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003394:	239c      	movs	r3, #156	@ 0x9c
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	2380      	movs	r3, #128	@ 0x80
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	4013      	ands	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d042      	beq.n	8003430 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	0010      	movs	r0, r2
 80033b2:	4798      	blx	r3
    }
    return;
 80033b4:	e03c      	b.n	8003430 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033b6:	23a4      	movs	r3, #164	@ 0xa4
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2240      	movs	r2, #64	@ 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d00a      	beq.n	80033d8 <HAL_UART_IRQHandler+0x5e0>
 80033c2:	23a0      	movs	r3, #160	@ 0xa0
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	4013      	ands	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 ff3a 	bl	800424a <UART_EndTransmit_IT>
    return;
 80033d6:	e02c      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80033d8:	23a4      	movs	r3, #164	@ 0xa4
 80033da:	18fb      	adds	r3, r7, r3
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	4013      	ands	r3, r2
 80033e4:	d00b      	beq.n	80033fe <HAL_UART_IRQHandler+0x606>
 80033e6:	23a0      	movs	r3, #160	@ 0xa0
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	4013      	ands	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 ff63 	bl	80042c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033fc:	e019      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033fe:	23a4      	movs	r3, #164	@ 0xa4
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	045b      	lsls	r3, r3, #17
 8003408:	4013      	ands	r3, r2
 800340a:	d012      	beq.n	8003432 <HAL_UART_IRQHandler+0x63a>
 800340c:	23a0      	movs	r3, #160	@ 0xa0
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	da0d      	bge.n	8003432 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 ff4a 	bl	80042b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800341e:	e008      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
      return;
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	e006      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
    return;
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	e004      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
      return;
 8003428:	46c0      	nop			@ (mov r8, r8)
 800342a:	e002      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
      return;
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	e000      	b.n	8003432 <HAL_UART_IRQHandler+0x63a>
    return;
 8003430:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003432:	46bd      	mov	sp, r7
 8003434:	b02a      	add	sp, #168	@ 0xa8
 8003436:	bdb0      	pop	{r4, r5, r7, pc}
 8003438:	fffffeff 	.word	0xfffffeff
 800343c:	fffffedf 	.word	0xfffffedf
 8003440:	effffffe 	.word	0xeffffffe

08003444 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800344c:	46c0      	nop			@ (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b090      	sub	sp, #64	@ 0x40
 8003478:	af00      	add	r7, sp, #0
 800347a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347c:	231a      	movs	r3, #26
 800347e:	2220      	movs	r2, #32
 8003480:	189b      	adds	r3, r3, r2
 8003482:	19db      	adds	r3, r3, r7
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	431a      	orrs	r2, r3
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	4313      	orrs	r3, r2
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4aaf      	ldr	r2, [pc, #700]	@ (8003764 <UART_SetConfig+0x2f0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4aaa      	ldr	r2, [pc, #680]	@ (8003768 <UART_SetConfig+0x2f4>)
 80034be:	4013      	ands	r3, r2
 80034c0:	0018      	movs	r0, r3
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	0003      	movs	r3, r0
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4aa4      	ldr	r2, [pc, #656]	@ (800376c <UART_SetConfig+0x2f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034e6:	4313      	orrs	r3, r2
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003770 <UART_SetConfig+0x2fc>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	220f      	movs	r2, #15
 8003508:	4393      	bics	r3, r2
 800350a:	0018      	movs	r0, r3
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	0003      	movs	r3, r0
 8003516:	430b      	orrs	r3, r1
 8003518:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a95      	ldr	r2, [pc, #596]	@ (8003774 <UART_SetConfig+0x300>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d131      	bne.n	8003588 <UART_SetConfig+0x114>
 8003524:	4b94      	ldr	r3, [pc, #592]	@ (8003778 <UART_SetConfig+0x304>)
 8003526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003528:	2203      	movs	r2, #3
 800352a:	4013      	ands	r3, r2
 800352c:	2b03      	cmp	r3, #3
 800352e:	d01d      	beq.n	800356c <UART_SetConfig+0xf8>
 8003530:	d823      	bhi.n	800357a <UART_SetConfig+0x106>
 8003532:	2b02      	cmp	r3, #2
 8003534:	d00c      	beq.n	8003550 <UART_SetConfig+0xdc>
 8003536:	d820      	bhi.n	800357a <UART_SetConfig+0x106>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <UART_SetConfig+0xce>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d00e      	beq.n	800355e <UART_SetConfig+0xea>
 8003540:	e01b      	b.n	800357a <UART_SetConfig+0x106>
 8003542:	231b      	movs	r3, #27
 8003544:	2220      	movs	r2, #32
 8003546:	189b      	adds	r3, r3, r2
 8003548:	19db      	adds	r3, r3, r7
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e0b4      	b.n	80036ba <UART_SetConfig+0x246>
 8003550:	231b      	movs	r3, #27
 8003552:	2220      	movs	r2, #32
 8003554:	189b      	adds	r3, r3, r2
 8003556:	19db      	adds	r3, r3, r7
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e0ad      	b.n	80036ba <UART_SetConfig+0x246>
 800355e:	231b      	movs	r3, #27
 8003560:	2220      	movs	r2, #32
 8003562:	189b      	adds	r3, r3, r2
 8003564:	19db      	adds	r3, r3, r7
 8003566:	2204      	movs	r2, #4
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e0a6      	b.n	80036ba <UART_SetConfig+0x246>
 800356c:	231b      	movs	r3, #27
 800356e:	2220      	movs	r2, #32
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	2208      	movs	r2, #8
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e09f      	b.n	80036ba <UART_SetConfig+0x246>
 800357a:	231b      	movs	r3, #27
 800357c:	2220      	movs	r2, #32
 800357e:	189b      	adds	r3, r3, r2
 8003580:	19db      	adds	r3, r3, r7
 8003582:	2210      	movs	r2, #16
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e098      	b.n	80036ba <UART_SetConfig+0x246>
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a7b      	ldr	r2, [pc, #492]	@ (800377c <UART_SetConfig+0x308>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d131      	bne.n	80035f6 <UART_SetConfig+0x182>
 8003592:	4b79      	ldr	r3, [pc, #484]	@ (8003778 <UART_SetConfig+0x304>)
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	220c      	movs	r2, #12
 8003598:	4013      	ands	r3, r2
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d01d      	beq.n	80035da <UART_SetConfig+0x166>
 800359e:	d823      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d00c      	beq.n	80035be <UART_SetConfig+0x14a>
 80035a4:	d820      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0x13c>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d00e      	beq.n	80035cc <UART_SetConfig+0x158>
 80035ae:	e01b      	b.n	80035e8 <UART_SetConfig+0x174>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2220      	movs	r2, #32
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e07d      	b.n	80036ba <UART_SetConfig+0x246>
 80035be:	231b      	movs	r3, #27
 80035c0:	2220      	movs	r2, #32
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e076      	b.n	80036ba <UART_SetConfig+0x246>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2220      	movs	r2, #32
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e06f      	b.n	80036ba <UART_SetConfig+0x246>
 80035da:	231b      	movs	r3, #27
 80035dc:	2220      	movs	r2, #32
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	19db      	adds	r3, r3, r7
 80035e2:	2208      	movs	r2, #8
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e068      	b.n	80036ba <UART_SetConfig+0x246>
 80035e8:	231b      	movs	r3, #27
 80035ea:	2220      	movs	r2, #32
 80035ec:	189b      	adds	r3, r3, r2
 80035ee:	19db      	adds	r3, r3, r7
 80035f0:	2210      	movs	r2, #16
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e061      	b.n	80036ba <UART_SetConfig+0x246>
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a61      	ldr	r2, [pc, #388]	@ (8003780 <UART_SetConfig+0x30c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d106      	bne.n	800360e <UART_SetConfig+0x19a>
 8003600:	231b      	movs	r3, #27
 8003602:	2220      	movs	r2, #32
 8003604:	189b      	adds	r3, r3, r2
 8003606:	19db      	adds	r3, r3, r7
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e055      	b.n	80036ba <UART_SetConfig+0x246>
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5c      	ldr	r2, [pc, #368]	@ (8003784 <UART_SetConfig+0x310>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d106      	bne.n	8003626 <UART_SetConfig+0x1b2>
 8003618:	231b      	movs	r3, #27
 800361a:	2220      	movs	r2, #32
 800361c:	189b      	adds	r3, r3, r2
 800361e:	19db      	adds	r3, r3, r7
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e049      	b.n	80036ba <UART_SetConfig+0x246>
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a50      	ldr	r2, [pc, #320]	@ (800376c <UART_SetConfig+0x2f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d13e      	bne.n	80036ae <UART_SetConfig+0x23a>
 8003630:	4b51      	ldr	r3, [pc, #324]	@ (8003778 <UART_SetConfig+0x304>)
 8003632:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003634:	23c0      	movs	r3, #192	@ 0xc0
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	4013      	ands	r3, r2
 800363a:	22c0      	movs	r2, #192	@ 0xc0
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	4293      	cmp	r3, r2
 8003640:	d027      	beq.n	8003692 <UART_SetConfig+0x21e>
 8003642:	22c0      	movs	r2, #192	@ 0xc0
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	4293      	cmp	r3, r2
 8003648:	d82a      	bhi.n	80036a0 <UART_SetConfig+0x22c>
 800364a:	2280      	movs	r2, #128	@ 0x80
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	4293      	cmp	r3, r2
 8003650:	d011      	beq.n	8003676 <UART_SetConfig+0x202>
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	4293      	cmp	r3, r2
 8003658:	d822      	bhi.n	80036a0 <UART_SetConfig+0x22c>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <UART_SetConfig+0x1f4>
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	00d2      	lsls	r2, r2, #3
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <UART_SetConfig+0x210>
 8003666:	e01b      	b.n	80036a0 <UART_SetConfig+0x22c>
 8003668:	231b      	movs	r3, #27
 800366a:	2220      	movs	r2, #32
 800366c:	189b      	adds	r3, r3, r2
 800366e:	19db      	adds	r3, r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e021      	b.n	80036ba <UART_SetConfig+0x246>
 8003676:	231b      	movs	r3, #27
 8003678:	2220      	movs	r2, #32
 800367a:	189b      	adds	r3, r3, r2
 800367c:	19db      	adds	r3, r3, r7
 800367e:	2202      	movs	r2, #2
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e01a      	b.n	80036ba <UART_SetConfig+0x246>
 8003684:	231b      	movs	r3, #27
 8003686:	2220      	movs	r2, #32
 8003688:	189b      	adds	r3, r3, r2
 800368a:	19db      	adds	r3, r3, r7
 800368c:	2204      	movs	r2, #4
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e013      	b.n	80036ba <UART_SetConfig+0x246>
 8003692:	231b      	movs	r3, #27
 8003694:	2220      	movs	r2, #32
 8003696:	189b      	adds	r3, r3, r2
 8003698:	19db      	adds	r3, r3, r7
 800369a:	2208      	movs	r2, #8
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e00c      	b.n	80036ba <UART_SetConfig+0x246>
 80036a0:	231b      	movs	r3, #27
 80036a2:	2220      	movs	r2, #32
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	19db      	adds	r3, r3, r7
 80036a8:	2210      	movs	r2, #16
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e005      	b.n	80036ba <UART_SetConfig+0x246>
 80036ae:	231b      	movs	r3, #27
 80036b0:	2220      	movs	r2, #32
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	19db      	adds	r3, r3, r7
 80036b6:	2210      	movs	r2, #16
 80036b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2b      	ldr	r2, [pc, #172]	@ (800376c <UART_SetConfig+0x2f8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d000      	beq.n	80036c6 <UART_SetConfig+0x252>
 80036c4:	e0a9      	b.n	800381a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036c6:	231b      	movs	r3, #27
 80036c8:	2220      	movs	r2, #32
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d015      	beq.n	8003700 <UART_SetConfig+0x28c>
 80036d4:	dc18      	bgt.n	8003708 <UART_SetConfig+0x294>
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d00d      	beq.n	80036f6 <UART_SetConfig+0x282>
 80036da:	dc15      	bgt.n	8003708 <UART_SetConfig+0x294>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <UART_SetConfig+0x272>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d005      	beq.n	80036f0 <UART_SetConfig+0x27c>
 80036e4:	e010      	b.n	8003708 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e6:	f7ff f963 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 80036ea:	0003      	movs	r3, r0
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036ee:	e014      	b.n	800371a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b25      	ldr	r3, [pc, #148]	@ (8003788 <UART_SetConfig+0x314>)
 80036f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036f4:	e011      	b.n	800371a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7ff f8cf 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 80036fa:	0003      	movs	r3, r0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036fe:	e00c      	b.n	800371a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003706:	e008      	b.n	800371a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800370c:	231a      	movs	r3, #26
 800370e:	2220      	movs	r2, #32
 8003710:	189b      	adds	r3, r3, r2
 8003712:	19db      	adds	r3, r3, r7
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
        break;
 8003718:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d100      	bne.n	8003722 <UART_SetConfig+0x2ae>
 8003720:	e14b      	b.n	80039ba <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003726:	4b19      	ldr	r3, [pc, #100]	@ (800378c <UART_SetConfig+0x318>)
 8003728:	0052      	lsls	r2, r2, #1
 800372a:	5ad3      	ldrh	r3, [r2, r3]
 800372c:	0019      	movs	r1, r3
 800372e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003730:	f7fc fcf2 	bl	8000118 <__udivsi3>
 8003734:	0003      	movs	r3, r0
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	0013      	movs	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	189b      	adds	r3, r3, r2
 8003742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003744:	429a      	cmp	r2, r3
 8003746:	d305      	bcc.n	8003754 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800374e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003750:	429a      	cmp	r2, r3
 8003752:	d91d      	bls.n	8003790 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003754:	231a      	movs	r3, #26
 8003756:	2220      	movs	r2, #32
 8003758:	189b      	adds	r3, r3, r2
 800375a:	19db      	adds	r3, r3, r7
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e12b      	b.n	80039ba <UART_SetConfig+0x546>
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	cfff69f3 	.word	0xcfff69f3
 8003768:	ffffcfff 	.word	0xffffcfff
 800376c:	40008000 	.word	0x40008000
 8003770:	11fff4ff 	.word	0x11fff4ff
 8003774:	40013800 	.word	0x40013800
 8003778:	40021000 	.word	0x40021000
 800377c:	40004400 	.word	0x40004400
 8003780:	40004800 	.word	0x40004800
 8003784:	40004c00 	.word	0x40004c00
 8003788:	00f42400 	.word	0x00f42400
 800378c:	080057e4 	.word	0x080057e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379c:	4b92      	ldr	r3, [pc, #584]	@ (80039e8 <UART_SetConfig+0x574>)
 800379e:	0052      	lsls	r2, r2, #1
 80037a0:	5ad3      	ldrh	r3, [r2, r3]
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	69b8      	ldr	r0, [r7, #24]
 80037ae:	69f9      	ldr	r1, [r7, #28]
 80037b0:	f7fc fe28 	bl	8000404 <__aeabi_uldivmod>
 80037b4:	0002      	movs	r2, r0
 80037b6:	000b      	movs	r3, r1
 80037b8:	0e11      	lsrs	r1, r2, #24
 80037ba:	021d      	lsls	r5, r3, #8
 80037bc:	430d      	orrs	r5, r1
 80037be:	0214      	lsls	r4, r2, #8
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	1900      	adds	r0, r0, r4
 80037d2:	4169      	adcs	r1, r5
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f7fc fe0f 	bl	8000404 <__aeabi_uldivmod>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0013      	movs	r3, r2
 80037ec:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f0:	23c0      	movs	r3, #192	@ 0xc0
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d309      	bcc.n	800380c <UART_SetConfig+0x398>
 80037f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	035b      	lsls	r3, r3, #13
 80037fe:	429a      	cmp	r2, r3
 8003800:	d204      	bcs.n	800380c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	e0d6      	b.n	80039ba <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800380c:	231a      	movs	r3, #26
 800380e:	2220      	movs	r2, #32
 8003810:	189b      	adds	r3, r3, r2
 8003812:	19db      	adds	r3, r3, r7
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e0cf      	b.n	80039ba <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	429a      	cmp	r2, r3
 8003824:	d000      	beq.n	8003828 <UART_SetConfig+0x3b4>
 8003826:	e070      	b.n	800390a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003828:	231b      	movs	r3, #27
 800382a:	2220      	movs	r2, #32
 800382c:	189b      	adds	r3, r3, r2
 800382e:	19db      	adds	r3, r3, r7
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d015      	beq.n	8003862 <UART_SetConfig+0x3ee>
 8003836:	dc18      	bgt.n	800386a <UART_SetConfig+0x3f6>
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00d      	beq.n	8003858 <UART_SetConfig+0x3e4>
 800383c:	dc15      	bgt.n	800386a <UART_SetConfig+0x3f6>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <UART_SetConfig+0x3d4>
 8003842:	2b02      	cmp	r3, #2
 8003844:	d005      	beq.n	8003852 <UART_SetConfig+0x3de>
 8003846:	e010      	b.n	800386a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003848:	f7ff f8b2 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 800384c:	0003      	movs	r3, r0
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003850:	e014      	b.n	800387c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003852:	4b66      	ldr	r3, [pc, #408]	@ (80039ec <UART_SetConfig+0x578>)
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003856:	e011      	b.n	800387c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003858:	f7ff f81e 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800385c:	0003      	movs	r3, r0
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003860:	e00c      	b.n	800387c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003862:	2380      	movs	r3, #128	@ 0x80
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003868:	e008      	b.n	800387c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800386e:	231a      	movs	r3, #26
 8003870:	2220      	movs	r2, #32
 8003872:	189b      	adds	r3, r3, r2
 8003874:	19db      	adds	r3, r3, r7
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
        break;
 800387a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800387c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	d100      	bne.n	8003884 <UART_SetConfig+0x410>
 8003882:	e09a      	b.n	80039ba <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003888:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <UART_SetConfig+0x574>)
 800388a:	0052      	lsls	r2, r2, #1
 800388c:	5ad3      	ldrh	r3, [r2, r3]
 800388e:	0019      	movs	r1, r3
 8003890:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003892:	f7fc fc41 	bl	8000118 <__udivsi3>
 8003896:	0003      	movs	r3, r0
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	18d2      	adds	r2, r2, r3
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0019      	movs	r1, r3
 80038a8:	0010      	movs	r0, r2
 80038aa:	f7fc fc35 	bl	8000118 <__udivsi3>
 80038ae:	0003      	movs	r3, r0
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	2b0f      	cmp	r3, #15
 80038b6:	d921      	bls.n	80038fc <UART_SetConfig+0x488>
 80038b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	025b      	lsls	r3, r3, #9
 80038be:	429a      	cmp	r2, r3
 80038c0:	d21c      	bcs.n	80038fc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	200e      	movs	r0, #14
 80038c8:	2420      	movs	r4, #32
 80038ca:	1903      	adds	r3, r0, r4
 80038cc:	19db      	adds	r3, r3, r7
 80038ce:	210f      	movs	r1, #15
 80038d0:	438a      	bics	r2, r1
 80038d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	b299      	uxth	r1, r3
 80038e0:	1903      	adds	r3, r0, r4
 80038e2:	19db      	adds	r3, r3, r7
 80038e4:	1902      	adds	r2, r0, r4
 80038e6:	19d2      	adds	r2, r2, r7
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1902      	adds	r2, r0, r4
 80038f4:	19d2      	adds	r2, r2, r7
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e05e      	b.n	80039ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80038fc:	231a      	movs	r3, #26
 80038fe:	2220      	movs	r2, #32
 8003900:	189b      	adds	r3, r3, r2
 8003902:	19db      	adds	r3, r3, r7
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e057      	b.n	80039ba <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390a:	231b      	movs	r3, #27
 800390c:	2220      	movs	r2, #32
 800390e:	189b      	adds	r3, r3, r2
 8003910:	19db      	adds	r3, r3, r7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d015      	beq.n	8003944 <UART_SetConfig+0x4d0>
 8003918:	dc18      	bgt.n	800394c <UART_SetConfig+0x4d8>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00d      	beq.n	800393a <UART_SetConfig+0x4c6>
 800391e:	dc15      	bgt.n	800394c <UART_SetConfig+0x4d8>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <UART_SetConfig+0x4b6>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d005      	beq.n	8003934 <UART_SetConfig+0x4c0>
 8003928:	e010      	b.n	800394c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392a:	f7ff f841 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 800392e:	0003      	movs	r3, r0
 8003930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003932:	e014      	b.n	800395e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003934:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <UART_SetConfig+0x578>)
 8003936:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003938:	e011      	b.n	800395e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393a:	f7fe ffad 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 800393e:	0003      	movs	r3, r0
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003942:	e00c      	b.n	800395e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800394a:	e008      	b.n	800395e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003950:	231a      	movs	r3, #26
 8003952:	2220      	movs	r2, #32
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
        break;
 800395c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	2b00      	cmp	r3, #0
 8003962:	d02a      	beq.n	80039ba <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <UART_SetConfig+0x574>)
 800396a:	0052      	lsls	r2, r2, #1
 800396c:	5ad3      	ldrh	r3, [r2, r3]
 800396e:	0019      	movs	r1, r3
 8003970:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003972:	f7fc fbd1 	bl	8000118 <__udivsi3>
 8003976:	0003      	movs	r3, r0
 8003978:	001a      	movs	r2, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	18d2      	adds	r2, r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0019      	movs	r1, r3
 8003988:	0010      	movs	r0, r2
 800398a:	f7fc fbc5 	bl	8000118 <__udivsi3>
 800398e:	0003      	movs	r3, r0
 8003990:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d90a      	bls.n	80039ae <UART_SetConfig+0x53a>
 8003998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	429a      	cmp	r2, r3
 80039a0:	d205      	bcs.n	80039ae <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e005      	b.n	80039ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80039ae:	231a      	movs	r3, #26
 80039b0:	2220      	movs	r2, #32
 80039b2:	189b      	adds	r3, r3, r2
 80039b4:	19db      	adds	r3, r3, r7
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	226a      	movs	r2, #106	@ 0x6a
 80039be:	2101      	movs	r1, #1
 80039c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	2268      	movs	r2, #104	@ 0x68
 80039c6:	2101      	movs	r1, #1
 80039c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	2200      	movs	r2, #0
 80039ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	2200      	movs	r2, #0
 80039d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039d6:	231a      	movs	r3, #26
 80039d8:	2220      	movs	r2, #32
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	19db      	adds	r3, r3, r7
 80039de:	781b      	ldrb	r3, [r3, #0]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b010      	add	sp, #64	@ 0x40
 80039e6:	bdb0      	pop	{r4, r5, r7, pc}
 80039e8:	080057e4 	.word	0x080057e4
 80039ec:	00f42400 	.word	0x00f42400

080039f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	2208      	movs	r2, #8
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <UART_AdvFeatureConfig+0x144>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a43      	ldr	r2, [pc, #268]	@ (8003b38 <UART_AdvFeatureConfig+0x148>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b3c <UART_AdvFeatureConfig+0x14c>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	2204      	movs	r2, #4
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4a34      	ldr	r2, [pc, #208]	@ (8003b40 <UART_AdvFeatureConfig+0x150>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	2210      	movs	r2, #16
 8003a86:	4013      	ands	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <UART_AdvFeatureConfig+0x154>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <UART_AdvFeatureConfig+0x158>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	2240      	movs	r2, #64	@ 0x40
 8003aca:	4013      	ands	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <UART_AdvFeatureConfig+0x15c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	035b      	lsls	r3, r3, #13
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d10b      	bne.n	8003b0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <UART_AdvFeatureConfig+0x160>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	2280      	movs	r2, #128	@ 0x80
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b54 <UART_AdvFeatureConfig+0x164>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	ffff7fff 	.word	0xffff7fff
 8003b38:	fffdffff 	.word	0xfffdffff
 8003b3c:	fffeffff 	.word	0xfffeffff
 8003b40:	fffbffff 	.word	0xfffbffff
 8003b44:	ffffefff 	.word	0xffffefff
 8003b48:	ffffdfff 	.word	0xffffdfff
 8003b4c:	ffefffff 	.word	0xffefffff
 8003b50:	ff9fffff 	.word	0xff9fffff
 8003b54:	fff7ffff 	.word	0xfff7ffff

08003b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b092      	sub	sp, #72	@ 0x48
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2290      	movs	r2, #144	@ 0x90
 8003b64:	2100      	movs	r1, #0
 8003b66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b68:	f7fd fca0 	bl	80014ac <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2208      	movs	r2, #8
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d12d      	bne.n	8003bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b80:	2280      	movs	r2, #128	@ 0x80
 8003b82:	0391      	lsls	r1, r2, #14
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4a47      	ldr	r2, [pc, #284]	@ (8003ca4 <UART_CheckIdleState+0x14c>)
 8003b88:	9200      	str	r2, [sp, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f000 f88e 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d022      	beq.n	8003bda <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2180      	movs	r1, #128	@ 0x80
 8003bb6:	438a      	bics	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2288      	movs	r2, #136	@ 0x88
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2284      	movs	r2, #132	@ 0x84
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e060      	b.n	8003c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d146      	bne.n	8003c76 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bea:	2280      	movs	r2, #128	@ 0x80
 8003bec:	03d1      	lsls	r1, r2, #15
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <UART_CheckIdleState+0x14c>)
 8003bf2:	9200      	str	r2, [sp, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f000 f859 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d03b      	beq.n	8003c76 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4922      	ldr	r1, [pc, #136]	@ (8003ca8 <UART_CheckIdleState+0x150>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c36:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	438a      	bics	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	228c      	movs	r2, #140	@ 0x8c
 8003c66:	2120      	movs	r1, #32
 8003c68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2284      	movs	r2, #132	@ 0x84
 8003c6e:	2100      	movs	r1, #0
 8003c70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e012      	b.n	8003c9c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2288      	movs	r2, #136	@ 0x88
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	228c      	movs	r2, #140	@ 0x8c
 8003c82:	2120      	movs	r1, #32
 8003c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	@ 0x84
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b010      	add	sp, #64	@ 0x40
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	01ffffff 	.word	0x01ffffff
 8003ca8:	fffffedf 	.word	0xfffffedf

08003cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	e051      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	d04e      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fd fbf2 	bl	80014ac <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e051      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d03b      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b80      	cmp	r3, #128	@ 0x80
 8003cee:	d038      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d035      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d111      	bne.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 f922 	bl	8003f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2290      	movs	r2, #144	@ 0x90
 8003d18:	2108      	movs	r1, #8
 8003d1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2284      	movs	r2, #132	@ 0x84
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e02c      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	401a      	ands	r2, r3
 8003d34:	2380      	movs	r3, #128	@ 0x80
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d112      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	@ 0x80
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f905 	bl	8003f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2290      	movs	r2, #144	@ 0x90
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2284      	movs	r2, #132	@ 0x84
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	425a      	negs	r2, r3
 8003d72:	4153      	adcs	r3, r2
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d09e      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b004      	add	sp, #16
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	@ 0x40
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	1dbb      	adds	r3, r7, #6
 8003d98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1dba      	adds	r2, r7, #6
 8003da4:	215c      	movs	r1, #92	@ 0x5c
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2290      	movs	r2, #144	@ 0x90
 8003dae:	2100      	movs	r1, #0
 8003db0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	228c      	movs	r2, #140	@ 0x8c
 8003db6:	2122      	movs	r1, #34	@ 0x22
 8003db8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	589b      	ldr	r3, [r3, r2]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02d      	beq.n	8003e20 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	589b      	ldr	r3, [r3, r2]
 8003dca:	4a40      	ldr	r2, [pc, #256]	@ (8003ecc <UART_Start_Receive_DMA+0x140>)
 8003dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2280      	movs	r2, #128	@ 0x80
 8003dd2:	589b      	ldr	r3, [r3, r2]
 8003dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ed0 <UART_Start_Receive_DMA+0x144>)
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	589b      	ldr	r3, [r3, r2]
 8003dde:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed4 <UART_Start_Receive_DMA+0x148>)
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2280      	movs	r2, #128	@ 0x80
 8003de6:	589b      	ldr	r3, [r3, r2]
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	5898      	ldr	r0, [r3, r2]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3324      	adds	r3, #36	@ 0x24
 8003df8:	0019      	movs	r1, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	001a      	movs	r2, r3
 8003e00:	1dbb      	adds	r3, r7, #6
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f7fd fcc4 	bl	8001790 <HAL_DMA_Start_IT>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d009      	beq.n	8003e20 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2290      	movs	r2, #144	@ 0x90
 8003e10:	2110      	movs	r1, #16
 8003e12:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	228c      	movs	r2, #140	@ 0x8c
 8003e18:	2120      	movs	r1, #32
 8003e1a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e050      	b.n	8003ec2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d019      	beq.n	8003e5c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e32:	2301      	movs	r3, #1
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	0049      	lsls	r1, r1, #1
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e52:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	613b      	str	r3, [r7, #16]
  return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			@ (mov r8, r8)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e94:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e98:	2301      	movs	r3, #1
 8003e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2140      	movs	r1, #64	@ 0x40
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b010      	add	sp, #64	@ 0x40
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	08004025 	.word	0x08004025
 8003ed0:	08004155 	.word	0x08004155
 8003ed4:	08004197 	.word	0x08004197

08003ed8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eea:	2301      	movs	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	21c0      	movs	r1, #192	@ 0xc0
 8003f02:	438a      	bics	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	617b      	str	r3, [r7, #20]
  return(result);
 8003f18:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4908      	ldr	r1, [pc, #32]	@ (8003f54 <UART_EndTxTransfer+0x7c>)
 8003f34:	400a      	ands	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2288      	movs	r2, #136	@ 0x88
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5099      	str	r1, [r3, r2]
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b00a      	add	sp, #40	@ 0x28
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	ff7fffff 	.word	0xff7fffff

08003f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08e      	sub	sp, #56	@ 0x38
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	617b      	str	r3, [r7, #20]
  return(result);
 8003f66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4926      	ldr	r1, [pc, #152]	@ (800401c <UART_EndRxTransfer+0xc4>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	623b      	str	r3, [r7, #32]
  return(result);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	491b      	ldr	r1, [pc, #108]	@ (8004020 <UART_EndRxTransfer+0xc8>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d118      	bne.n	8003ffe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	228c      	movs	r2, #140	@ 0x8c
 8004002:	2120      	movs	r1, #32
 8004004:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b00e      	add	sp, #56	@ 0x38
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	fffffedf 	.word	0xfffffedf
 8004020:	effffffe 	.word	0xeffffffe

08004024 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b094      	sub	sp, #80	@ 0x50
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	d16f      	bne.n	800411e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800403e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004040:	225e      	movs	r2, #94	@ 0x5e
 8004042:	2100      	movs	r1, #0
 8004044:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004046:	f3ef 8310 	mrs	r3, PRIMASK
 800404a:	61bb      	str	r3, [r7, #24]
  return(result);
 800404c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	493a      	ldr	r1, [pc, #232]	@ (8004150 <UART_DMAReceiveCplt+0x12c>)
 8004068:	400a      	ands	r2, r1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	2301      	movs	r3, #1
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040aa:	f3ef 8310 	mrs	r3, PRIMASK
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b4:	2301      	movs	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2140      	movs	r1, #64	@ 0x40
 80040cc:	438a      	bics	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040de:	228c      	movs	r2, #140	@ 0x8c
 80040e0:	2120      	movs	r1, #32
 80040e2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d118      	bne.n	800411e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ec:	f3ef 8310 	mrs	r3, PRIMASK
 80040f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040f2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f6:	2301      	movs	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f383 8810 	msr	PRIMASK, r3
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2110      	movs	r1, #16
 800410e:	438a      	bics	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f383 8810 	msr	PRIMASK, r3
}
 800411c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004120:	2200      	movs	r2, #0
 8004122:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800412e:	225c      	movs	r2, #92	@ 0x5c
 8004130:	5a9a      	ldrh	r2, [r3, r2]
 8004132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f7fc ff4e 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800413c:	e003      	b.n	8004146 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800413e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004140:	0018      	movs	r0, r3
 8004142:	f7fc ff75 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b014      	add	sp, #80	@ 0x50
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	fffffeff 	.word	0xfffffeff

08004154 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10a      	bne.n	8004186 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	225c      	movs	r2, #92	@ 0x5c
 8004174:	5a9b      	ldrh	r3, [r3, r2]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f7fc ff2a 	bl	8000fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004184:	e003      	b.n	800418e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff f963 	bl	8003454 <HAL_UART_RxHalfCpltCallback>
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b004      	add	sp, #16
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2288      	movs	r2, #136	@ 0x88
 80041a8:	589b      	ldr	r3, [r3, r2]
 80041aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	228c      	movs	r2, #140	@ 0x8c
 80041b0:	589b      	ldr	r3, [r3, r2]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	4013      	ands	r3, r2
 80041be:	2b80      	cmp	r3, #128	@ 0x80
 80041c0:	d10a      	bne.n	80041d8 <UART_DMAError+0x42>
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b21      	cmp	r3, #33	@ 0x21
 80041c6:	d107      	bne.n	80041d8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2256      	movs	r2, #86	@ 0x56
 80041cc:	2100      	movs	r1, #0
 80041ce:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7ff fe80 	bl	8003ed8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	d10a      	bne.n	80041fc <UART_DMAError+0x66>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b22      	cmp	r3, #34	@ 0x22
 80041ea:	d107      	bne.n	80041fc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	225e      	movs	r2, #94	@ 0x5e
 80041f0:	2100      	movs	r1, #0
 80041f2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7ff feae 	bl	8003f58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2290      	movs	r2, #144	@ 0x90
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	2210      	movs	r2, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2190      	movs	r1, #144	@ 0x90
 800420a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff f928 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b006      	add	sp, #24
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	225e      	movs	r2, #94	@ 0x5e
 800422e:	2100      	movs	r1, #0
 8004230:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2256      	movs	r2, #86	@ 0x56
 8004236:	2100      	movs	r1, #0
 8004238:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff f911 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004252:	f3ef 8310 	mrs	r3, PRIMASK
 8004256:	60bb      	str	r3, [r7, #8]
  return(result);
 8004258:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	2301      	movs	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2140      	movs	r1, #64	@ 0x40
 8004274:	438a      	bics	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2288      	movs	r2, #136	@ 0x88
 8004288:	2120      	movs	r1, #32
 800428a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff f8d5 	bl	8003444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2284      	movs	r2, #132	@ 0x84
 80042e0:	5c9b      	ldrb	r3, [r3, r2]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_UARTEx_DisableFifoMode+0x16>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e027      	b.n	800433a <HAL_UARTEx_DisableFifoMode+0x66>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2284      	movs	r2, #132	@ 0x84
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2288      	movs	r2, #136	@ 0x88
 80042f6:	2124      	movs	r1, #36	@ 0x24
 80042f8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	438a      	bics	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a0b      	ldr	r2, [pc, #44]	@ (8004344 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004316:	4013      	ands	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2288      	movs	r2, #136	@ 0x88
 800432c:	2120      	movs	r1, #32
 800432e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2284      	movs	r2, #132	@ 0x84
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	dfffffff 	.word	0xdfffffff

08004348 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2284      	movs	r2, #132	@ 0x84
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e02e      	b.n	80043be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2284      	movs	r2, #132	@ 0x84
 8004364:	2101      	movs	r1, #1
 8004366:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2288      	movs	r2, #136	@ 0x88
 800436c:	2124      	movs	r1, #36	@ 0x24
 800436e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2101      	movs	r1, #1
 8004384:	438a      	bics	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	08d9      	lsrs	r1, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f8bc 	bl	800451c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2288      	movs	r2, #136	@ 0x88
 80043b0:	2120      	movs	r1, #32
 80043b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2284      	movs	r2, #132	@ 0x84
 80043b8:	2100      	movs	r1, #0
 80043ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b004      	add	sp, #16
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2284      	movs	r2, #132	@ 0x84
 80043d6:	5c9b      	ldrb	r3, [r3, r2]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043dc:	2302      	movs	r3, #2
 80043de:	e02f      	b.n	8004440 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2284      	movs	r2, #132	@ 0x84
 80043e4:	2101      	movs	r1, #1
 80043e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2288      	movs	r2, #136	@ 0x88
 80043ec:	2124      	movs	r1, #36	@ 0x24
 80043ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	438a      	bics	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4a0e      	ldr	r2, [pc, #56]	@ (8004448 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004410:	4013      	ands	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	0018      	movs	r0, r3
 8004422:	f000 f87b 	bl	800451c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2288      	movs	r2, #136	@ 0x88
 8004432:	2120      	movs	r1, #32
 8004434:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2284      	movs	r2, #132	@ 0x84
 800443a:	2100      	movs	r1, #0
 800443c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b004      	add	sp, #16
 8004446:	bd80      	pop	{r7, pc}
 8004448:	f1ffffff 	.word	0xf1ffffff

0800444c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444c:	b5b0      	push	{r4, r5, r7, lr}
 800444e:	b08a      	sub	sp, #40	@ 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	228c      	movs	r2, #140	@ 0x8c
 800445e:	589b      	ldr	r3, [r3, r2]
 8004460:	2b20      	cmp	r3, #32
 8004462:	d156      	bne.n	8004512 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800446a:	1dbb      	adds	r3, r7, #6
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e04e      	b.n	8004514 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	015b      	lsls	r3, r3, #5
 800447e:	429a      	cmp	r2, r3
 8004480:	d109      	bne.n	8004496 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2201      	movs	r2, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d001      	beq.n	8004496 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e03e      	b.n	8004514 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80044a2:	2527      	movs	r5, #39	@ 0x27
 80044a4:	197c      	adds	r4, r7, r5
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7ff fc6c 	bl	8003d8c <UART_Start_Receive_DMA>
 80044b4:	0003      	movs	r3, r0
 80044b6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80044b8:	197b      	adds	r3, r7, r5
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d124      	bne.n	800450a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d11c      	bne.n	8004502 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2210      	movs	r2, #16
 80044ce:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d0:	f3ef 8310 	mrs	r3, PRIMASK
 80044d4:	617b      	str	r3, [r7, #20]
  return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	2301      	movs	r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2110      	movs	r1, #16
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f383 8810 	msr	PRIMASK, r3
}
 8004500:	e003      	b.n	800450a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004502:	2327      	movs	r3, #39	@ 0x27
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800450a:	2327      	movs	r3, #39	@ 0x27
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	e000      	b.n	8004514 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	0018      	movs	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	b00a      	add	sp, #40	@ 0x28
 800451a:	bdb0      	pop	{r4, r5, r7, pc}

0800451c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	226a      	movs	r2, #106	@ 0x6a
 8004530:	2101      	movs	r1, #1
 8004532:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2268      	movs	r2, #104	@ 0x68
 8004538:	2101      	movs	r1, #1
 800453a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800453c:	e043      	b.n	80045c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800453e:	260f      	movs	r6, #15
 8004540:	19bb      	adds	r3, r7, r6
 8004542:	2208      	movs	r2, #8
 8004544:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004546:	200e      	movs	r0, #14
 8004548:	183b      	adds	r3, r7, r0
 800454a:	2208      	movs	r2, #8
 800454c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	0e5b      	lsrs	r3, r3, #25
 8004556:	b2da      	uxtb	r2, r3
 8004558:	240d      	movs	r4, #13
 800455a:	193b      	adds	r3, r7, r4
 800455c:	2107      	movs	r1, #7
 800455e:	400a      	ands	r2, r1
 8004560:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	0f5b      	lsrs	r3, r3, #29
 800456a:	b2da      	uxtb	r2, r3
 800456c:	250c      	movs	r5, #12
 800456e:	197b      	adds	r3, r7, r5
 8004570:	2107      	movs	r1, #7
 8004572:	400a      	ands	r2, r1
 8004574:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004576:	183b      	adds	r3, r7, r0
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	197a      	adds	r2, r7, r5
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	4914      	ldr	r1, [pc, #80]	@ (80045d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004580:	5c8a      	ldrb	r2, [r1, r2]
 8004582:	435a      	muls	r2, r3
 8004584:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004586:	197b      	adds	r3, r7, r5
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800458e:	0019      	movs	r1, r3
 8004590:	f7fb fe4c 	bl	800022c <__divsi3>
 8004594:	0003      	movs	r3, r0
 8004596:	b299      	uxth	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	226a      	movs	r2, #106	@ 0x6a
 800459c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800459e:	19bb      	adds	r3, r7, r6
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	193a      	adds	r2, r7, r4
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	490a      	ldr	r1, [pc, #40]	@ (80045d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80045a8:	5c8a      	ldrb	r2, [r1, r2]
 80045aa:	435a      	muls	r2, r3
 80045ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80045b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045b6:	0019      	movs	r1, r3
 80045b8:	f7fb fe38 	bl	800022c <__divsi3>
 80045bc:	0003      	movs	r3, r0
 80045be:	b299      	uxth	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2268      	movs	r2, #104	@ 0x68
 80045c4:	5299      	strh	r1, [r3, r2]
}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b005      	add	sp, #20
 80045cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	080057fc 	.word	0x080057fc
 80045d4:	08005804 	.word	0x08005804

080045d8 <std>:
 80045d8:	2300      	movs	r3, #0
 80045da:	b510      	push	{r4, lr}
 80045dc:	0004      	movs	r4, r0
 80045de:	6003      	str	r3, [r0, #0]
 80045e0:	6043      	str	r3, [r0, #4]
 80045e2:	6083      	str	r3, [r0, #8]
 80045e4:	8181      	strh	r1, [r0, #12]
 80045e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80045e8:	81c2      	strh	r2, [r0, #14]
 80045ea:	6103      	str	r3, [r0, #16]
 80045ec:	6143      	str	r3, [r0, #20]
 80045ee:	6183      	str	r3, [r0, #24]
 80045f0:	0019      	movs	r1, r3
 80045f2:	2208      	movs	r2, #8
 80045f4:	305c      	adds	r0, #92	@ 0x5c
 80045f6:	f000 fac5 	bl	8004b84 <memset>
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <std+0x50>)
 80045fc:	6224      	str	r4, [r4, #32]
 80045fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <std+0x54>)
 8004602:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <std+0x58>)
 8004606:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004608:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <std+0x5c>)
 800460a:	6323      	str	r3, [r4, #48]	@ 0x30
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <std+0x60>)
 800460e:	429c      	cmp	r4, r3
 8004610:	d005      	beq.n	800461e <std+0x46>
 8004612:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <std+0x64>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d002      	beq.n	800461e <std+0x46>
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <std+0x68>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d103      	bne.n	8004626 <std+0x4e>
 800461e:	0020      	movs	r0, r4
 8004620:	3058      	adds	r0, #88	@ 0x58
 8004622:	f000 fb53 	bl	8004ccc <__retarget_lock_init_recursive>
 8004626:	bd10      	pop	{r4, pc}
 8004628:	080049ad 	.word	0x080049ad
 800462c:	080049d5 	.word	0x080049d5
 8004630:	08004a0d 	.word	0x08004a0d
 8004634:	08004a39 	.word	0x08004a39
 8004638:	20000e7c 	.word	0x20000e7c
 800463c:	20000ee4 	.word	0x20000ee4
 8004640:	20000f4c 	.word	0x20000f4c

08004644 <stdio_exit_handler>:
 8004644:	b510      	push	{r4, lr}
 8004646:	4a03      	ldr	r2, [pc, #12]	@ (8004654 <stdio_exit_handler+0x10>)
 8004648:	4903      	ldr	r1, [pc, #12]	@ (8004658 <stdio_exit_handler+0x14>)
 800464a:	4804      	ldr	r0, [pc, #16]	@ (800465c <stdio_exit_handler+0x18>)
 800464c:	f000 f86c 	bl	8004728 <_fwalk_sglue>
 8004650:	bd10      	pop	{r4, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	2000001c 	.word	0x2000001c
 8004658:	08005581 	.word	0x08005581
 800465c:	2000002c 	.word	0x2000002c

08004660 <cleanup_stdio>:
 8004660:	6841      	ldr	r1, [r0, #4]
 8004662:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <cleanup_stdio+0x30>)
 8004664:	b510      	push	{r4, lr}
 8004666:	0004      	movs	r4, r0
 8004668:	4299      	cmp	r1, r3
 800466a:	d001      	beq.n	8004670 <cleanup_stdio+0x10>
 800466c:	f000 ff88 	bl	8005580 <_fflush_r>
 8004670:	68a1      	ldr	r1, [r4, #8]
 8004672:	4b08      	ldr	r3, [pc, #32]	@ (8004694 <cleanup_stdio+0x34>)
 8004674:	4299      	cmp	r1, r3
 8004676:	d002      	beq.n	800467e <cleanup_stdio+0x1e>
 8004678:	0020      	movs	r0, r4
 800467a:	f000 ff81 	bl	8005580 <_fflush_r>
 800467e:	68e1      	ldr	r1, [r4, #12]
 8004680:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <cleanup_stdio+0x38>)
 8004682:	4299      	cmp	r1, r3
 8004684:	d002      	beq.n	800468c <cleanup_stdio+0x2c>
 8004686:	0020      	movs	r0, r4
 8004688:	f000 ff7a 	bl	8005580 <_fflush_r>
 800468c:	bd10      	pop	{r4, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	20000e7c 	.word	0x20000e7c
 8004694:	20000ee4 	.word	0x20000ee4
 8004698:	20000f4c 	.word	0x20000f4c

0800469c <global_stdio_init.part.0>:
 800469c:	b510      	push	{r4, lr}
 800469e:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <global_stdio_init.part.0+0x28>)
 80046a0:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <global_stdio_init.part.0+0x2c>)
 80046a2:	2104      	movs	r1, #4
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	4809      	ldr	r0, [pc, #36]	@ (80046cc <global_stdio_init.part.0+0x30>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	f7ff ff95 	bl	80045d8 <std>
 80046ae:	2201      	movs	r2, #1
 80046b0:	2109      	movs	r1, #9
 80046b2:	4807      	ldr	r0, [pc, #28]	@ (80046d0 <global_stdio_init.part.0+0x34>)
 80046b4:	f7ff ff90 	bl	80045d8 <std>
 80046b8:	2202      	movs	r2, #2
 80046ba:	2112      	movs	r1, #18
 80046bc:	4805      	ldr	r0, [pc, #20]	@ (80046d4 <global_stdio_init.part.0+0x38>)
 80046be:	f7ff ff8b 	bl	80045d8 <std>
 80046c2:	bd10      	pop	{r4, pc}
 80046c4:	20000fb4 	.word	0x20000fb4
 80046c8:	08004645 	.word	0x08004645
 80046cc:	20000e7c 	.word	0x20000e7c
 80046d0:	20000ee4 	.word	0x20000ee4
 80046d4:	20000f4c 	.word	0x20000f4c

080046d8 <__sfp_lock_acquire>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	4802      	ldr	r0, [pc, #8]	@ (80046e4 <__sfp_lock_acquire+0xc>)
 80046dc:	f000 faf7 	bl	8004cce <__retarget_lock_acquire_recursive>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	20000fbd 	.word	0x20000fbd

080046e8 <__sfp_lock_release>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4802      	ldr	r0, [pc, #8]	@ (80046f4 <__sfp_lock_release+0xc>)
 80046ec:	f000 faf0 	bl	8004cd0 <__retarget_lock_release_recursive>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	20000fbd 	.word	0x20000fbd

080046f8 <__sinit>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	0004      	movs	r4, r0
 80046fc:	f7ff ffec 	bl	80046d8 <__sfp_lock_acquire>
 8004700:	6a23      	ldr	r3, [r4, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <__sinit+0x14>
 8004706:	f7ff ffef 	bl	80046e8 <__sfp_lock_release>
 800470a:	bd10      	pop	{r4, pc}
 800470c:	4b04      	ldr	r3, [pc, #16]	@ (8004720 <__sinit+0x28>)
 800470e:	6223      	str	r3, [r4, #32]
 8004710:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <__sinit+0x2c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f6      	bne.n	8004706 <__sinit+0xe>
 8004718:	f7ff ffc0 	bl	800469c <global_stdio_init.part.0>
 800471c:	e7f3      	b.n	8004706 <__sinit+0xe>
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	08004661 	.word	0x08004661
 8004724:	20000fb4 	.word	0x20000fb4

08004728 <_fwalk_sglue>:
 8004728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800472a:	0014      	movs	r4, r2
 800472c:	2600      	movs	r6, #0
 800472e:	9000      	str	r0, [sp, #0]
 8004730:	9101      	str	r1, [sp, #4]
 8004732:	68a5      	ldr	r5, [r4, #8]
 8004734:	6867      	ldr	r7, [r4, #4]
 8004736:	3f01      	subs	r7, #1
 8004738:	d504      	bpl.n	8004744 <_fwalk_sglue+0x1c>
 800473a:	6824      	ldr	r4, [r4, #0]
 800473c:	2c00      	cmp	r4, #0
 800473e:	d1f8      	bne.n	8004732 <_fwalk_sglue+0xa>
 8004740:	0030      	movs	r0, r6
 8004742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004744:	89ab      	ldrh	r3, [r5, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d908      	bls.n	800475c <_fwalk_sglue+0x34>
 800474a:	220e      	movs	r2, #14
 800474c:	5eab      	ldrsh	r3, [r5, r2]
 800474e:	3301      	adds	r3, #1
 8004750:	d004      	beq.n	800475c <_fwalk_sglue+0x34>
 8004752:	0029      	movs	r1, r5
 8004754:	9800      	ldr	r0, [sp, #0]
 8004756:	9b01      	ldr	r3, [sp, #4]
 8004758:	4798      	blx	r3
 800475a:	4306      	orrs	r6, r0
 800475c:	3568      	adds	r5, #104	@ 0x68
 800475e:	e7ea      	b.n	8004736 <_fwalk_sglue+0xe>

08004760 <iprintf>:
 8004760:	b40f      	push	{r0, r1, r2, r3}
 8004762:	b507      	push	{r0, r1, r2, lr}
 8004764:	4905      	ldr	r1, [pc, #20]	@ (800477c <iprintf+0x1c>)
 8004766:	ab04      	add	r3, sp, #16
 8004768:	6808      	ldr	r0, [r1, #0]
 800476a:	cb04      	ldmia	r3!, {r2}
 800476c:	6881      	ldr	r1, [r0, #8]
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	f000 fbe6 	bl	8004f40 <_vfiprintf_r>
 8004774:	b003      	add	sp, #12
 8004776:	bc08      	pop	{r3}
 8004778:	b004      	add	sp, #16
 800477a:	4718      	bx	r3
 800477c:	20000028 	.word	0x20000028

08004780 <_puts_r>:
 8004780:	6a03      	ldr	r3, [r0, #32]
 8004782:	b570      	push	{r4, r5, r6, lr}
 8004784:	0005      	movs	r5, r0
 8004786:	000e      	movs	r6, r1
 8004788:	6884      	ldr	r4, [r0, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <_puts_r+0x12>
 800478e:	f7ff ffb3 	bl	80046f8 <__sinit>
 8004792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004794:	07db      	lsls	r3, r3, #31
 8004796:	d405      	bmi.n	80047a4 <_puts_r+0x24>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	059b      	lsls	r3, r3, #22
 800479c:	d402      	bmi.n	80047a4 <_puts_r+0x24>
 800479e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047a0:	f000 fa95 	bl	8004cce <__retarget_lock_acquire_recursive>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	071b      	lsls	r3, r3, #28
 80047a8:	d502      	bpl.n	80047b0 <_puts_r+0x30>
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11f      	bne.n	80047f0 <_puts_r+0x70>
 80047b0:	0021      	movs	r1, r4
 80047b2:	0028      	movs	r0, r5
 80047b4:	f000 f988 	bl	8004ac8 <__swsetup_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d019      	beq.n	80047f0 <_puts_r+0x70>
 80047bc:	2501      	movs	r5, #1
 80047be:	426d      	negs	r5, r5
 80047c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x52>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	059b      	lsls	r3, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x52>
 80047cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ce:	f000 fa7f 	bl	8004cd0 <__retarget_lock_release_recursive>
 80047d2:	0028      	movs	r0, r5
 80047d4:	bd70      	pop	{r4, r5, r6, pc}
 80047d6:	3601      	adds	r6, #1
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da04      	bge.n	80047e8 <_puts_r+0x68>
 80047de:	69a2      	ldr	r2, [r4, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	dc16      	bgt.n	8004812 <_puts_r+0x92>
 80047e4:	290a      	cmp	r1, #10
 80047e6:	d014      	beq.n	8004812 <_puts_r+0x92>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	6022      	str	r2, [r4, #0]
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	7831      	ldrb	r1, [r6, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	2900      	cmp	r1, #0
 80047f8:	d1ed      	bne.n	80047d6 <_puts_r+0x56>
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da0f      	bge.n	8004820 <_puts_r+0xa0>
 8004800:	0022      	movs	r2, r4
 8004802:	0028      	movs	r0, r5
 8004804:	310a      	adds	r1, #10
 8004806:	f000 f91d 	bl	8004a44 <__swbuf_r>
 800480a:	3001      	adds	r0, #1
 800480c:	d0d6      	beq.n	80047bc <_puts_r+0x3c>
 800480e:	250a      	movs	r5, #10
 8004810:	e7d6      	b.n	80047c0 <_puts_r+0x40>
 8004812:	0022      	movs	r2, r4
 8004814:	0028      	movs	r0, r5
 8004816:	f000 f915 	bl	8004a44 <__swbuf_r>
 800481a:	3001      	adds	r0, #1
 800481c:	d1e8      	bne.n	80047f0 <_puts_r+0x70>
 800481e:	e7cd      	b.n	80047bc <_puts_r+0x3c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	6022      	str	r2, [r4, #0]
 8004826:	220a      	movs	r2, #10
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e7f0      	b.n	800480e <_puts_r+0x8e>

0800482c <puts>:
 800482c:	b510      	push	{r4, lr}
 800482e:	4b03      	ldr	r3, [pc, #12]	@ (800483c <puts+0x10>)
 8004830:	0001      	movs	r1, r0
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f7ff ffa4 	bl	8004780 <_puts_r>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	20000028 	.word	0x20000028

08004840 <setvbuf>:
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	001d      	movs	r5, r3
 8004844:	4b57      	ldr	r3, [pc, #348]	@ (80049a4 <setvbuf+0x164>)
 8004846:	b085      	sub	sp, #20
 8004848:	681e      	ldr	r6, [r3, #0]
 800484a:	0004      	movs	r4, r0
 800484c:	000f      	movs	r7, r1
 800484e:	9200      	str	r2, [sp, #0]
 8004850:	2e00      	cmp	r6, #0
 8004852:	d005      	beq.n	8004860 <setvbuf+0x20>
 8004854:	6a33      	ldr	r3, [r6, #32]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <setvbuf+0x20>
 800485a:	0030      	movs	r0, r6
 800485c:	f7ff ff4c 	bl	80046f8 <__sinit>
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d005      	beq.n	8004872 <setvbuf+0x32>
 8004866:	2b01      	cmp	r3, #1
 8004868:	d900      	bls.n	800486c <setvbuf+0x2c>
 800486a:	e097      	b.n	800499c <setvbuf+0x15c>
 800486c:	2d00      	cmp	r5, #0
 800486e:	da00      	bge.n	8004872 <setvbuf+0x32>
 8004870:	e094      	b.n	800499c <setvbuf+0x15c>
 8004872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004874:	07db      	lsls	r3, r3, #31
 8004876:	d405      	bmi.n	8004884 <setvbuf+0x44>
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	059b      	lsls	r3, r3, #22
 800487c:	d402      	bmi.n	8004884 <setvbuf+0x44>
 800487e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004880:	f000 fa25 	bl	8004cce <__retarget_lock_acquire_recursive>
 8004884:	0021      	movs	r1, r4
 8004886:	0030      	movs	r0, r6
 8004888:	f000 fe7a 	bl	8005580 <_fflush_r>
 800488c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800488e:	2900      	cmp	r1, #0
 8004890:	d008      	beq.n	80048a4 <setvbuf+0x64>
 8004892:	0023      	movs	r3, r4
 8004894:	3344      	adds	r3, #68	@ 0x44
 8004896:	4299      	cmp	r1, r3
 8004898:	d002      	beq.n	80048a0 <setvbuf+0x60>
 800489a:	0030      	movs	r0, r6
 800489c:	f000 fa22 	bl	8004ce4 <_free_r>
 80048a0:	2300      	movs	r3, #0
 80048a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80048a4:	2300      	movs	r3, #0
 80048a6:	61a3      	str	r3, [r4, #24]
 80048a8:	6063      	str	r3, [r4, #4]
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	061b      	lsls	r3, r3, #24
 80048ae:	d503      	bpl.n	80048b8 <setvbuf+0x78>
 80048b0:	0030      	movs	r0, r6
 80048b2:	6921      	ldr	r1, [r4, #16]
 80048b4:	f000 fa16 	bl	8004ce4 <_free_r>
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	4a3b      	ldr	r2, [pc, #236]	@ (80049a8 <setvbuf+0x168>)
 80048bc:	4013      	ands	r3, r2
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	9b00      	ldr	r3, [sp, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d060      	beq.n	8004988 <setvbuf+0x148>
 80048c6:	ab03      	add	r3, sp, #12
 80048c8:	0021      	movs	r1, r4
 80048ca:	0030      	movs	r0, r6
 80048cc:	aa02      	add	r2, sp, #8
 80048ce:	f000 fe83 	bl	80055d8 <__swhatbuf_r>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	4303      	orrs	r3, r0
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	2d00      	cmp	r5, #0
 80048da:	d124      	bne.n	8004926 <setvbuf+0xe6>
 80048dc:	9d02      	ldr	r5, [sp, #8]
 80048de:	0028      	movs	r0, r5
 80048e0:	f000 fa4a 	bl	8004d78 <malloc>
 80048e4:	9501      	str	r5, [sp, #4]
 80048e6:	1e07      	subs	r7, r0, #0
 80048e8:	d148      	bne.n	800497c <setvbuf+0x13c>
 80048ea:	9b02      	ldr	r3, [sp, #8]
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	42ab      	cmp	r3, r5
 80048f0:	d13f      	bne.n	8004972 <setvbuf+0x132>
 80048f2:	2501      	movs	r5, #1
 80048f4:	426d      	negs	r5, r5
 80048f6:	220c      	movs	r2, #12
 80048f8:	5ea3      	ldrsh	r3, [r4, r2]
 80048fa:	2202      	movs	r2, #2
 80048fc:	431a      	orrs	r2, r3
 80048fe:	81a2      	strh	r2, [r4, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	60a2      	str	r2, [r4, #8]
 8004904:	0022      	movs	r2, r4
 8004906:	3247      	adds	r2, #71	@ 0x47
 8004908:	6022      	str	r2, [r4, #0]
 800490a:	6122      	str	r2, [r4, #16]
 800490c:	2201      	movs	r2, #1
 800490e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004910:	6162      	str	r2, [r4, #20]
 8004912:	4211      	tst	r1, r2
 8004914:	d104      	bne.n	8004920 <setvbuf+0xe0>
 8004916:	059b      	lsls	r3, r3, #22
 8004918:	d402      	bmi.n	8004920 <setvbuf+0xe0>
 800491a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800491c:	f000 f9d8 	bl	8004cd0 <__retarget_lock_release_recursive>
 8004920:	0028      	movs	r0, r5
 8004922:	b005      	add	sp, #20
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004926:	2f00      	cmp	r7, #0
 8004928:	d0d9      	beq.n	80048de <setvbuf+0x9e>
 800492a:	6a33      	ldr	r3, [r6, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <setvbuf+0xf6>
 8004930:	0030      	movs	r0, r6
 8004932:	f7ff fee1 	bl	80046f8 <__sinit>
 8004936:	9b00      	ldr	r3, [sp, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d103      	bne.n	8004944 <setvbuf+0x104>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	9a00      	ldr	r2, [sp, #0]
 8004940:	431a      	orrs	r2, r3
 8004942:	81a2      	strh	r2, [r4, #12]
 8004944:	220c      	movs	r2, #12
 8004946:	5ea3      	ldrsh	r3, [r4, r2]
 8004948:	2208      	movs	r2, #8
 800494a:	0019      	movs	r1, r3
 800494c:	6027      	str	r7, [r4, #0]
 800494e:	6127      	str	r7, [r4, #16]
 8004950:	6165      	str	r5, [r4, #20]
 8004952:	4011      	ands	r1, r2
 8004954:	4213      	tst	r3, r2
 8004956:	d01b      	beq.n	8004990 <setvbuf+0x150>
 8004958:	07da      	lsls	r2, r3, #31
 800495a:	d517      	bpl.n	800498c <setvbuf+0x14c>
 800495c:	2200      	movs	r2, #0
 800495e:	426d      	negs	r5, r5
 8004960:	60a2      	str	r2, [r4, #8]
 8004962:	61a5      	str	r5, [r4, #24]
 8004964:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004966:	07d2      	lsls	r2, r2, #31
 8004968:	d401      	bmi.n	800496e <setvbuf+0x12e>
 800496a:	059b      	lsls	r3, r3, #22
 800496c:	d512      	bpl.n	8004994 <setvbuf+0x154>
 800496e:	2500      	movs	r5, #0
 8004970:	e7d6      	b.n	8004920 <setvbuf+0xe0>
 8004972:	9801      	ldr	r0, [sp, #4]
 8004974:	f000 fa00 	bl	8004d78 <malloc>
 8004978:	1e07      	subs	r7, r0, #0
 800497a:	d0ba      	beq.n	80048f2 <setvbuf+0xb2>
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	89a2      	ldrh	r2, [r4, #12]
 8004980:	9d01      	ldr	r5, [sp, #4]
 8004982:	4313      	orrs	r3, r2
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	e7d0      	b.n	800492a <setvbuf+0xea>
 8004988:	2500      	movs	r5, #0
 800498a:	e7b4      	b.n	80048f6 <setvbuf+0xb6>
 800498c:	60a5      	str	r5, [r4, #8]
 800498e:	e7e9      	b.n	8004964 <setvbuf+0x124>
 8004990:	60a1      	str	r1, [r4, #8]
 8004992:	e7e7      	b.n	8004964 <setvbuf+0x124>
 8004994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004996:	f000 f99b 	bl	8004cd0 <__retarget_lock_release_recursive>
 800499a:	e7e8      	b.n	800496e <setvbuf+0x12e>
 800499c:	2501      	movs	r5, #1
 800499e:	426d      	negs	r5, r5
 80049a0:	e7be      	b.n	8004920 <setvbuf+0xe0>
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	20000028 	.word	0x20000028
 80049a8:	fffff35c 	.word	0xfffff35c

080049ac <__sread>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	000c      	movs	r4, r1
 80049b0:	250e      	movs	r5, #14
 80049b2:	5f49      	ldrsh	r1, [r1, r5]
 80049b4:	f000 f94c 	bl	8004c50 <_read_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	db03      	blt.n	80049c4 <__sread+0x18>
 80049bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80049be:	181b      	adds	r3, r3, r0
 80049c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80049c2:	bd70      	pop	{r4, r5, r6, pc}
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	4a02      	ldr	r2, [pc, #8]	@ (80049d0 <__sread+0x24>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	e7f9      	b.n	80049c2 <__sread+0x16>
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	ffffefff 	.word	0xffffefff

080049d4 <__swrite>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	001f      	movs	r7, r3
 80049d8:	898b      	ldrh	r3, [r1, #12]
 80049da:	0005      	movs	r5, r0
 80049dc:	000c      	movs	r4, r1
 80049de:	0016      	movs	r6, r2
 80049e0:	05db      	lsls	r3, r3, #23
 80049e2:	d505      	bpl.n	80049f0 <__swrite+0x1c>
 80049e4:	230e      	movs	r3, #14
 80049e6:	5ec9      	ldrsh	r1, [r1, r3]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2302      	movs	r3, #2
 80049ec:	f000 f91c 	bl	8004c28 <_lseek_r>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	4a05      	ldr	r2, [pc, #20]	@ (8004a08 <__swrite+0x34>)
 80049f4:	0028      	movs	r0, r5
 80049f6:	4013      	ands	r3, r2
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	0032      	movs	r2, r6
 80049fc:	230e      	movs	r3, #14
 80049fe:	5ee1      	ldrsh	r1, [r4, r3]
 8004a00:	003b      	movs	r3, r7
 8004a02:	f7fb fffc 	bl	80009fe <_write_r>
 8004a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a08:	ffffefff 	.word	0xffffefff

08004a0c <__sseek>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	000c      	movs	r4, r1
 8004a10:	250e      	movs	r5, #14
 8004a12:	5f49      	ldrsh	r1, [r1, r5]
 8004a14:	f000 f908 	bl	8004c28 <_lseek_r>
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	1c42      	adds	r2, r0, #1
 8004a1c:	d103      	bne.n	8004a26 <__sseek+0x1a>
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <__sseek+0x28>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	2280      	movs	r2, #128	@ 0x80
 8004a28:	0152      	lsls	r2, r2, #5
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a30:	e7f8      	b.n	8004a24 <__sseek+0x18>
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	ffffefff 	.word	0xffffefff

08004a38 <__sclose>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	230e      	movs	r3, #14
 8004a3c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a3e:	f000 f8e1 	bl	8004c04 <_close_r>
 8004a42:	bd10      	pop	{r4, pc}

08004a44 <__swbuf_r>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	0006      	movs	r6, r0
 8004a48:	000d      	movs	r5, r1
 8004a4a:	0014      	movs	r4, r2
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d004      	beq.n	8004a5a <__swbuf_r+0x16>
 8004a50:	6a03      	ldr	r3, [r0, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <__swbuf_r+0x16>
 8004a56:	f7ff fe4f 	bl	80046f8 <__sinit>
 8004a5a:	69a3      	ldr	r3, [r4, #24]
 8004a5c:	60a3      	str	r3, [r4, #8]
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	071b      	lsls	r3, r3, #28
 8004a62:	d502      	bpl.n	8004a6a <__swbuf_r+0x26>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <__swbuf_r+0x3a>
 8004a6a:	0021      	movs	r1, r4
 8004a6c:	0030      	movs	r0, r6
 8004a6e:	f000 f82b 	bl	8004ac8 <__swsetup_r>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d003      	beq.n	8004a7e <__swbuf_r+0x3a>
 8004a76:	2501      	movs	r5, #1
 8004a78:	426d      	negs	r5, r5
 8004a7a:	0028      	movs	r0, r5
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	b2ef      	uxtb	r7, r5
 8004a84:	1ac0      	subs	r0, r0, r3
 8004a86:	6963      	ldr	r3, [r4, #20]
 8004a88:	b2ed      	uxtb	r5, r5
 8004a8a:	4283      	cmp	r3, r0
 8004a8c:	dc05      	bgt.n	8004a9a <__swbuf_r+0x56>
 8004a8e:	0021      	movs	r1, r4
 8004a90:	0030      	movs	r0, r6
 8004a92:	f000 fd75 	bl	8005580 <_fflush_r>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d1ed      	bne.n	8004a76 <__swbuf_r+0x32>
 8004a9a:	68a3      	ldr	r3, [r4, #8]
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	701f      	strb	r7, [r3, #0]
 8004aaa:	6963      	ldr	r3, [r4, #20]
 8004aac:	4283      	cmp	r3, r0
 8004aae:	d004      	beq.n	8004aba <__swbuf_r+0x76>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d5e1      	bpl.n	8004a7a <__swbuf_r+0x36>
 8004ab6:	2d0a      	cmp	r5, #10
 8004ab8:	d1df      	bne.n	8004a7a <__swbuf_r+0x36>
 8004aba:	0021      	movs	r1, r4
 8004abc:	0030      	movs	r0, r6
 8004abe:	f000 fd5f 	bl	8005580 <_fflush_r>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0d9      	beq.n	8004a7a <__swbuf_r+0x36>
 8004ac6:	e7d6      	b.n	8004a76 <__swbuf_r+0x32>

08004ac8 <__swsetup_r>:
 8004ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b80 <__swsetup_r+0xb8>)
 8004aca:	b570      	push	{r4, r5, r6, lr}
 8004acc:	0005      	movs	r5, r0
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	000c      	movs	r4, r1
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d004      	beq.n	8004ae0 <__swsetup_r+0x18>
 8004ad6:	6a03      	ldr	r3, [r0, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <__swsetup_r+0x18>
 8004adc:	f7ff fe0c 	bl	80046f8 <__sinit>
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	5ee2      	ldrsh	r2, [r4, r3]
 8004ae4:	0713      	lsls	r3, r2, #28
 8004ae6:	d423      	bmi.n	8004b30 <__swsetup_r+0x68>
 8004ae8:	06d3      	lsls	r3, r2, #27
 8004aea:	d407      	bmi.n	8004afc <__swsetup_r+0x34>
 8004aec:	2309      	movs	r3, #9
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	2340      	movs	r3, #64	@ 0x40
 8004af2:	2001      	movs	r0, #1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	4240      	negs	r0, r0
 8004afa:	e03a      	b.n	8004b72 <__swsetup_r+0xaa>
 8004afc:	0752      	lsls	r2, r2, #29
 8004afe:	d513      	bpl.n	8004b28 <__swsetup_r+0x60>
 8004b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b02:	2900      	cmp	r1, #0
 8004b04:	d008      	beq.n	8004b18 <__swsetup_r+0x50>
 8004b06:	0023      	movs	r3, r4
 8004b08:	3344      	adds	r3, #68	@ 0x44
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d002      	beq.n	8004b14 <__swsetup_r+0x4c>
 8004b0e:	0028      	movs	r0, r5
 8004b10:	f000 f8e8 	bl	8004ce4 <_free_r>
 8004b14:	2300      	movs	r3, #0
 8004b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b18:	2224      	movs	r2, #36	@ 0x24
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	4393      	bics	r3, r2
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	2300      	movs	r3, #0
 8004b22:	6063      	str	r3, [r4, #4]
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	2308      	movs	r3, #8
 8004b2a:	89a2      	ldrh	r2, [r4, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <__swsetup_r+0x86>
 8004b36:	21a0      	movs	r1, #160	@ 0xa0
 8004b38:	2280      	movs	r2, #128	@ 0x80
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	0089      	lsls	r1, r1, #2
 8004b3e:	0092      	lsls	r2, r2, #2
 8004b40:	400b      	ands	r3, r1
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <__swsetup_r+0x86>
 8004b46:	0021      	movs	r1, r4
 8004b48:	0028      	movs	r0, r5
 8004b4a:	f000 fd6f 	bl	800562c <__smakebuf_r>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	5ee2      	ldrsh	r2, [r4, r3]
 8004b52:	2101      	movs	r1, #1
 8004b54:	0013      	movs	r3, r2
 8004b56:	400b      	ands	r3, r1
 8004b58:	420a      	tst	r2, r1
 8004b5a:	d00b      	beq.n	8004b74 <__swsetup_r+0xac>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	6963      	ldr	r3, [r4, #20]
 8004b62:	425b      	negs	r3, r3
 8004b64:	61a3      	str	r3, [r4, #24]
 8004b66:	2000      	movs	r0, #0
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	4283      	cmp	r3, r0
 8004b6c:	d101      	bne.n	8004b72 <__swsetup_r+0xaa>
 8004b6e:	0613      	lsls	r3, r2, #24
 8004b70:	d4be      	bmi.n	8004af0 <__swsetup_r+0x28>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	0791      	lsls	r1, r2, #30
 8004b76:	d400      	bmi.n	8004b7a <__swsetup_r+0xb2>
 8004b78:	6963      	ldr	r3, [r4, #20]
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	e7f3      	b.n	8004b66 <__swsetup_r+0x9e>
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	20000028 	.word	0x20000028

08004b84 <memset>:
 8004b84:	0003      	movs	r3, r0
 8004b86:	1882      	adds	r2, r0, r2
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	7019      	strb	r1, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <strchr>:
 8004b94:	b2c9      	uxtb	r1, r1
 8004b96:	7803      	ldrb	r3, [r0, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <strchr+0x12>
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	d100      	bne.n	8004ba2 <strchr+0xe>
 8004ba0:	4770      	bx	lr
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	e7f7      	b.n	8004b96 <strchr+0x2>
 8004ba6:	424b      	negs	r3, r1
 8004ba8:	4159      	adcs	r1, r3
 8004baa:	4249      	negs	r1, r1
 8004bac:	4008      	ands	r0, r1
 8004bae:	e7f7      	b.n	8004ba0 <strchr+0xc>

08004bb0 <strncpy>:
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	b530      	push	{r4, r5, lr}
 8004bb4:	001d      	movs	r5, r3
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d006      	beq.n	8004bc8 <strncpy+0x18>
 8004bba:	780c      	ldrb	r4, [r1, #0]
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	702c      	strb	r4, [r5, #0]
 8004bc2:	3101      	adds	r1, #1
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	d1f5      	bne.n	8004bb4 <strncpy+0x4>
 8004bc8:	2100      	movs	r1, #0
 8004bca:	189a      	adds	r2, r3, r2
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <strncpy+0x22>
 8004bd0:	bd30      	pop	{r4, r5, pc}
 8004bd2:	7019      	strb	r1, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	e7f9      	b.n	8004bcc <strncpy+0x1c>

08004bd8 <strstr>:
 8004bd8:	780a      	ldrb	r2, [r1, #0]
 8004bda:	b530      	push	{r4, r5, lr}
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d10c      	bne.n	8004bfa <strstr+0x22>
 8004be0:	bd30      	pop	{r4, r5, pc}
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d108      	bne.n	8004bf8 <strstr+0x20>
 8004be6:	2301      	movs	r3, #1
 8004be8:	5ccc      	ldrb	r4, [r1, r3]
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d0f8      	beq.n	8004be0 <strstr+0x8>
 8004bee:	5cc5      	ldrb	r5, [r0, r3]
 8004bf0:	42a5      	cmp	r5, r4
 8004bf2:	d101      	bne.n	8004bf8 <strstr+0x20>
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	e7f7      	b.n	8004be8 <strstr+0x10>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	7803      	ldrb	r3, [r0, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <strstr+0xa>
 8004c00:	0018      	movs	r0, r3
 8004c02:	e7ed      	b.n	8004be0 <strstr+0x8>

08004c04 <_close_r>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	4d06      	ldr	r5, [pc, #24]	@ (8004c24 <_close_r+0x20>)
 8004c0a:	0004      	movs	r4, r0
 8004c0c:	0008      	movs	r0, r1
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	f7fc f979 	bl	8000f06 <_close>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d103      	bne.n	8004c20 <_close_r+0x1c>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d000      	beq.n	8004c20 <_close_r+0x1c>
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	20000fb8 	.word	0x20000fb8

08004c28 <_lseek_r>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	0004      	movs	r4, r0
 8004c2c:	0008      	movs	r0, r1
 8004c2e:	0011      	movs	r1, r2
 8004c30:	001a      	movs	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	4d05      	ldr	r5, [pc, #20]	@ (8004c4c <_lseek_r+0x24>)
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fc f986 	bl	8000f48 <_lseek>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d103      	bne.n	8004c48 <_lseek_r+0x20>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d000      	beq.n	8004c48 <_lseek_r+0x20>
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	20000fb8 	.word	0x20000fb8

08004c50 <_read_r>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	0004      	movs	r4, r0
 8004c54:	0008      	movs	r0, r1
 8004c56:	0011      	movs	r1, r2
 8004c58:	001a      	movs	r2, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	4d05      	ldr	r5, [pc, #20]	@ (8004c74 <_read_r+0x24>)
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc f934 	bl	8000ecc <_read>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d103      	bne.n	8004c70 <_read_r+0x20>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d000      	beq.n	8004c70 <_read_r+0x20>
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
 8004c72:	46c0      	nop			@ (mov r8, r8)
 8004c74:	20000fb8 	.word	0x20000fb8

08004c78 <__errno>:
 8004c78:	4b01      	ldr	r3, [pc, #4]	@ (8004c80 <__errno+0x8>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	4770      	bx	lr
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	20000028 	.word	0x20000028

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	2600      	movs	r6, #0
 8004c88:	4c0c      	ldr	r4, [pc, #48]	@ (8004cbc <__libc_init_array+0x38>)
 8004c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004cc0 <__libc_init_array+0x3c>)
 8004c8c:	1b64      	subs	r4, r4, r5
 8004c8e:	10a4      	asrs	r4, r4, #2
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	2600      	movs	r6, #0
 8004c96:	f000 fd4d 	bl	8005734 <_init>
 8004c9a:	4c0a      	ldr	r4, [pc, #40]	@ (8004cc4 <__libc_init_array+0x40>)
 8004c9c:	4d0a      	ldr	r5, [pc, #40]	@ (8004cc8 <__libc_init_array+0x44>)
 8004c9e:	1b64      	subs	r4, r4, r5
 8004ca0:	10a4      	asrs	r4, r4, #2
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	00b3      	lsls	r3, r6, #2
 8004caa:	58eb      	ldr	r3, [r5, r3]
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	00b3      	lsls	r3, r6, #2
 8004cb4:	58eb      	ldr	r3, [r5, r3]
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08005848 	.word	0x08005848
 8004cc0:	08005848 	.word	0x08005848
 8004cc4:	0800584c 	.word	0x0800584c
 8004cc8:	08005848 	.word	0x08005848

08004ccc <__retarget_lock_init_recursive>:
 8004ccc:	4770      	bx	lr

08004cce <__retarget_lock_acquire_recursive>:
 8004cce:	4770      	bx	lr

08004cd0 <__retarget_lock_release_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <memcpy>:
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d100      	bne.n	8004cdc <memcpy+0xa>
 8004cda:	bd10      	pop	{r4, pc}
 8004cdc:	5ccc      	ldrb	r4, [r1, r3]
 8004cde:	54c4      	strb	r4, [r0, r3]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	e7f8      	b.n	8004cd6 <memcpy+0x4>

08004ce4 <_free_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	0005      	movs	r5, r0
 8004ce8:	1e0c      	subs	r4, r1, #0
 8004cea:	d010      	beq.n	8004d0e <_free_r+0x2a>
 8004cec:	3c04      	subs	r4, #4
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da00      	bge.n	8004cf6 <_free_r+0x12>
 8004cf4:	18e4      	adds	r4, r4, r3
 8004cf6:	0028      	movs	r0, r5
 8004cf8:	f000 f8ea 	bl	8004ed0 <__malloc_lock>
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <_free_r+0x90>)
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <_free_r+0x2c>
 8004d04:	6063      	str	r3, [r4, #4]
 8004d06:	6014      	str	r4, [r2, #0]
 8004d08:	0028      	movs	r0, r5
 8004d0a:	f000 f8e9 	bl	8004ee0 <__malloc_unlock>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d908      	bls.n	8004d26 <_free_r+0x42>
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	1821      	adds	r1, r4, r0
 8004d18:	428b      	cmp	r3, r1
 8004d1a:	d1f3      	bne.n	8004d04 <_free_r+0x20>
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	1809      	adds	r1, r1, r0
 8004d22:	6021      	str	r1, [r4, #0]
 8004d24:	e7ee      	b.n	8004d04 <_free_r+0x20>
 8004d26:	001a      	movs	r2, r3
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <_free_r+0x4e>
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	d9f9      	bls.n	8004d26 <_free_r+0x42>
 8004d32:	6811      	ldr	r1, [r2, #0]
 8004d34:	1850      	adds	r0, r2, r1
 8004d36:	42a0      	cmp	r0, r4
 8004d38:	d10b      	bne.n	8004d52 <_free_r+0x6e>
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	1809      	adds	r1, r1, r0
 8004d3e:	1850      	adds	r0, r2, r1
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	4283      	cmp	r3, r0
 8004d44:	d1e0      	bne.n	8004d08 <_free_r+0x24>
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	1841      	adds	r1, r0, r1
 8004d4c:	6011      	str	r1, [r2, #0]
 8004d4e:	6053      	str	r3, [r2, #4]
 8004d50:	e7da      	b.n	8004d08 <_free_r+0x24>
 8004d52:	42a0      	cmp	r0, r4
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x78>
 8004d56:	230c      	movs	r3, #12
 8004d58:	602b      	str	r3, [r5, #0]
 8004d5a:	e7d5      	b.n	8004d08 <_free_r+0x24>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d103      	bne.n	8004d6c <_free_r+0x88>
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	1809      	adds	r1, r1, r0
 8004d6a:	6021      	str	r1, [r4, #0]
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	6054      	str	r4, [r2, #4]
 8004d70:	e7ca      	b.n	8004d08 <_free_r+0x24>
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	20000fc4 	.word	0x20000fc4

08004d78 <malloc>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4b03      	ldr	r3, [pc, #12]	@ (8004d88 <malloc+0x10>)
 8004d7c:	0001      	movs	r1, r0
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	f000 f826 	bl	8004dd0 <_malloc_r>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	20000028 	.word	0x20000028

08004d8c <sbrk_aligned>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004dcc <sbrk_aligned+0x40>)
 8004d90:	000d      	movs	r5, r1
 8004d92:	6831      	ldr	r1, [r6, #0]
 8004d94:	0004      	movs	r4, r0
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d102      	bne.n	8004da0 <sbrk_aligned+0x14>
 8004d9a:	f000 fcad 	bl	80056f8 <_sbrk_r>
 8004d9e:	6030      	str	r0, [r6, #0]
 8004da0:	0029      	movs	r1, r5
 8004da2:	0020      	movs	r0, r4
 8004da4:	f000 fca8 	bl	80056f8 <_sbrk_r>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d103      	bne.n	8004db4 <sbrk_aligned+0x28>
 8004dac:	2501      	movs	r5, #1
 8004dae:	426d      	negs	r5, r5
 8004db0:	0028      	movs	r0, r5
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	2303      	movs	r3, #3
 8004db6:	1cc5      	adds	r5, r0, #3
 8004db8:	439d      	bics	r5, r3
 8004dba:	42a8      	cmp	r0, r5
 8004dbc:	d0f8      	beq.n	8004db0 <sbrk_aligned+0x24>
 8004dbe:	1a29      	subs	r1, r5, r0
 8004dc0:	0020      	movs	r0, r4
 8004dc2:	f000 fc99 	bl	80056f8 <_sbrk_r>
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d1f2      	bne.n	8004db0 <sbrk_aligned+0x24>
 8004dca:	e7ef      	b.n	8004dac <sbrk_aligned+0x20>
 8004dcc:	20000fc0 	.word	0x20000fc0

08004dd0 <_malloc_r>:
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	1ccb      	adds	r3, r1, #3
 8004dd6:	4393      	bics	r3, r2
 8004dd8:	3308      	adds	r3, #8
 8004dda:	0005      	movs	r5, r0
 8004ddc:	001f      	movs	r7, r3
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d234      	bcs.n	8004e4c <_malloc_r+0x7c>
 8004de2:	270c      	movs	r7, #12
 8004de4:	42b9      	cmp	r1, r7
 8004de6:	d833      	bhi.n	8004e50 <_malloc_r+0x80>
 8004de8:	0028      	movs	r0, r5
 8004dea:	f000 f871 	bl	8004ed0 <__malloc_lock>
 8004dee:	4e37      	ldr	r6, [pc, #220]	@ (8004ecc <_malloc_r+0xfc>)
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	001c      	movs	r4, r3
 8004df4:	2c00      	cmp	r4, #0
 8004df6:	d12f      	bne.n	8004e58 <_malloc_r+0x88>
 8004df8:	0039      	movs	r1, r7
 8004dfa:	0028      	movs	r0, r5
 8004dfc:	f7ff ffc6 	bl	8004d8c <sbrk_aligned>
 8004e00:	0004      	movs	r4, r0
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d15f      	bne.n	8004ec6 <_malloc_r+0xf6>
 8004e06:	6834      	ldr	r4, [r6, #0]
 8004e08:	9400      	str	r4, [sp, #0]
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d14a      	bne.n	8004ea6 <_malloc_r+0xd6>
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	d052      	beq.n	8004eba <_malloc_r+0xea>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	0028      	movs	r0, r5
 8004e18:	18e3      	adds	r3, r4, r3
 8004e1a:	9900      	ldr	r1, [sp, #0]
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	f000 fc6b 	bl	80056f8 <_sbrk_r>
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	4283      	cmp	r3, r0
 8004e26:	d148      	bne.n	8004eba <_malloc_r+0xea>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	1aff      	subs	r7, r7, r3
 8004e2e:	0039      	movs	r1, r7
 8004e30:	f7ff ffac 	bl	8004d8c <sbrk_aligned>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d040      	beq.n	8004eba <_malloc_r+0xea>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	19db      	adds	r3, r3, r7
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	6833      	ldr	r3, [r6, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	d133      	bne.n	8004eae <_malloc_r+0xde>
 8004e46:	9b00      	ldr	r3, [sp, #0]
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	e019      	b.n	8004e80 <_malloc_r+0xb0>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dac9      	bge.n	8004de4 <_malloc_r+0x14>
 8004e50:	230c      	movs	r3, #12
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	2000      	movs	r0, #0
 8004e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e58:	6821      	ldr	r1, [r4, #0]
 8004e5a:	1bc9      	subs	r1, r1, r7
 8004e5c:	d420      	bmi.n	8004ea0 <_malloc_r+0xd0>
 8004e5e:	290b      	cmp	r1, #11
 8004e60:	d90a      	bls.n	8004e78 <_malloc_r+0xa8>
 8004e62:	19e2      	adds	r2, r4, r7
 8004e64:	6027      	str	r7, [r4, #0]
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	d104      	bne.n	8004e74 <_malloc_r+0xa4>
 8004e6a:	6032      	str	r2, [r6, #0]
 8004e6c:	6863      	ldr	r3, [r4, #4]
 8004e6e:	6011      	str	r1, [r2, #0]
 8004e70:	6053      	str	r3, [r2, #4]
 8004e72:	e005      	b.n	8004e80 <_malloc_r+0xb0>
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	e7f9      	b.n	8004e6c <_malloc_r+0x9c>
 8004e78:	6862      	ldr	r2, [r4, #4]
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	d10e      	bne.n	8004e9c <_malloc_r+0xcc>
 8004e7e:	6032      	str	r2, [r6, #0]
 8004e80:	0028      	movs	r0, r5
 8004e82:	f000 f82d 	bl	8004ee0 <__malloc_unlock>
 8004e86:	0020      	movs	r0, r4
 8004e88:	2207      	movs	r2, #7
 8004e8a:	300b      	adds	r0, #11
 8004e8c:	1d23      	adds	r3, r4, #4
 8004e8e:	4390      	bics	r0, r2
 8004e90:	1ac2      	subs	r2, r0, r3
 8004e92:	4298      	cmp	r0, r3
 8004e94:	d0df      	beq.n	8004e56 <_malloc_r+0x86>
 8004e96:	1a1b      	subs	r3, r3, r0
 8004e98:	50a3      	str	r3, [r4, r2]
 8004e9a:	e7dc      	b.n	8004e56 <_malloc_r+0x86>
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e7ef      	b.n	8004e80 <_malloc_r+0xb0>
 8004ea0:	0023      	movs	r3, r4
 8004ea2:	6864      	ldr	r4, [r4, #4]
 8004ea4:	e7a6      	b.n	8004df4 <_malloc_r+0x24>
 8004ea6:	9c00      	ldr	r4, [sp, #0]
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	e7ad      	b.n	8004e0a <_malloc_r+0x3a>
 8004eae:	001a      	movs	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	d1fb      	bne.n	8004eae <_malloc_r+0xde>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e7da      	b.n	8004e70 <_malloc_r+0xa0>
 8004eba:	230c      	movs	r3, #12
 8004ebc:	0028      	movs	r0, r5
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f000 f80e 	bl	8004ee0 <__malloc_unlock>
 8004ec4:	e7c6      	b.n	8004e54 <_malloc_r+0x84>
 8004ec6:	6007      	str	r7, [r0, #0]
 8004ec8:	e7da      	b.n	8004e80 <_malloc_r+0xb0>
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	20000fc4 	.word	0x20000fc4

08004ed0 <__malloc_lock>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4802      	ldr	r0, [pc, #8]	@ (8004edc <__malloc_lock+0xc>)
 8004ed4:	f7ff fefb 	bl	8004cce <__retarget_lock_acquire_recursive>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	20000fbc 	.word	0x20000fbc

08004ee0 <__malloc_unlock>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4802      	ldr	r0, [pc, #8]	@ (8004eec <__malloc_unlock+0xc>)
 8004ee4:	f7ff fef4 	bl	8004cd0 <__retarget_lock_release_recursive>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	46c0      	nop			@ (mov r8, r8)
 8004eec:	20000fbc 	.word	0x20000fbc

08004ef0 <__sfputc_r>:
 8004ef0:	6893      	ldr	r3, [r2, #8]
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da04      	bge.n	8004f06 <__sfputc_r+0x16>
 8004efc:	6994      	ldr	r4, [r2, #24]
 8004efe:	42a3      	cmp	r3, r4
 8004f00:	db07      	blt.n	8004f12 <__sfputc_r+0x22>
 8004f02:	290a      	cmp	r1, #10
 8004f04:	d005      	beq.n	8004f12 <__sfputc_r+0x22>
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	1c58      	adds	r0, r3, #1
 8004f0a:	6010      	str	r0, [r2, #0]
 8004f0c:	7019      	strb	r1, [r3, #0]
 8004f0e:	0008      	movs	r0, r1
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	f7ff fd97 	bl	8004a44 <__swbuf_r>
 8004f16:	0001      	movs	r1, r0
 8004f18:	e7f9      	b.n	8004f0e <__sfputc_r+0x1e>

08004f1a <__sfputs_r>:
 8004f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1c:	0006      	movs	r6, r0
 8004f1e:	000f      	movs	r7, r1
 8004f20:	0014      	movs	r4, r2
 8004f22:	18d5      	adds	r5, r2, r3
 8004f24:	42ac      	cmp	r4, r5
 8004f26:	d101      	bne.n	8004f2c <__sfputs_r+0x12>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e007      	b.n	8004f3c <__sfputs_r+0x22>
 8004f2c:	7821      	ldrb	r1, [r4, #0]
 8004f2e:	003a      	movs	r2, r7
 8004f30:	0030      	movs	r0, r6
 8004f32:	f7ff ffdd 	bl	8004ef0 <__sfputc_r>
 8004f36:	3401      	adds	r4, #1
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d1f3      	bne.n	8004f24 <__sfputs_r+0xa>
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f40 <_vfiprintf_r>:
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b0a1      	sub	sp, #132	@ 0x84
 8004f44:	000f      	movs	r7, r1
 8004f46:	0015      	movs	r5, r2
 8004f48:	001e      	movs	r6, r3
 8004f4a:	9003      	str	r0, [sp, #12]
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d004      	beq.n	8004f5a <_vfiprintf_r+0x1a>
 8004f50:	6a03      	ldr	r3, [r0, #32]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <_vfiprintf_r+0x1a>
 8004f56:	f7ff fbcf 	bl	80046f8 <__sinit>
 8004f5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f5c:	07db      	lsls	r3, r3, #31
 8004f5e:	d405      	bmi.n	8004f6c <_vfiprintf_r+0x2c>
 8004f60:	89bb      	ldrh	r3, [r7, #12]
 8004f62:	059b      	lsls	r3, r3, #22
 8004f64:	d402      	bmi.n	8004f6c <_vfiprintf_r+0x2c>
 8004f66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004f68:	f7ff feb1 	bl	8004cce <__retarget_lock_acquire_recursive>
 8004f6c:	89bb      	ldrh	r3, [r7, #12]
 8004f6e:	071b      	lsls	r3, r3, #28
 8004f70:	d502      	bpl.n	8004f78 <_vfiprintf_r+0x38>
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <_vfiprintf_r+0x60>
 8004f78:	0039      	movs	r1, r7
 8004f7a:	9803      	ldr	r0, [sp, #12]
 8004f7c:	f7ff fda4 	bl	8004ac8 <__swsetup_r>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d00d      	beq.n	8004fa0 <_vfiprintf_r+0x60>
 8004f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f86:	07db      	lsls	r3, r3, #31
 8004f88:	d503      	bpl.n	8004f92 <_vfiprintf_r+0x52>
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	4240      	negs	r0, r0
 8004f8e:	b021      	add	sp, #132	@ 0x84
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f92:	89bb      	ldrh	r3, [r7, #12]
 8004f94:	059b      	lsls	r3, r3, #22
 8004f96:	d4f8      	bmi.n	8004f8a <_vfiprintf_r+0x4a>
 8004f98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004f9a:	f7ff fe99 	bl	8004cd0 <__retarget_lock_release_recursive>
 8004f9e:	e7f4      	b.n	8004f8a <_vfiprintf_r+0x4a>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	ac08      	add	r4, sp, #32
 8004fa4:	6163      	str	r3, [r4, #20]
 8004fa6:	3320      	adds	r3, #32
 8004fa8:	7663      	strb	r3, [r4, #25]
 8004faa:	3310      	adds	r3, #16
 8004fac:	76a3      	strb	r3, [r4, #26]
 8004fae:	9607      	str	r6, [sp, #28]
 8004fb0:	002e      	movs	r6, r5
 8004fb2:	7833      	ldrb	r3, [r6, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <_vfiprintf_r+0x7c>
 8004fb8:	2b25      	cmp	r3, #37	@ 0x25
 8004fba:	d148      	bne.n	800504e <_vfiprintf_r+0x10e>
 8004fbc:	1b73      	subs	r3, r6, r5
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	42ae      	cmp	r6, r5
 8004fc2:	d00b      	beq.n	8004fdc <_vfiprintf_r+0x9c>
 8004fc4:	002a      	movs	r2, r5
 8004fc6:	0039      	movs	r1, r7
 8004fc8:	9803      	ldr	r0, [sp, #12]
 8004fca:	f7ff ffa6 	bl	8004f1a <__sfputs_r>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d100      	bne.n	8004fd4 <_vfiprintf_r+0x94>
 8004fd2:	e0ae      	b.n	8005132 <_vfiprintf_r+0x1f2>
 8004fd4:	6963      	ldr	r3, [r4, #20]
 8004fd6:	9a05      	ldr	r2, [sp, #20]
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	6163      	str	r3, [r4, #20]
 8004fdc:	7833      	ldrb	r3, [r6, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d100      	bne.n	8004fe4 <_vfiprintf_r+0xa4>
 8004fe2:	e0a6      	b.n	8005132 <_vfiprintf_r+0x1f2>
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4252      	negs	r2, r2
 8004fea:	6062      	str	r2, [r4, #4]
 8004fec:	a904      	add	r1, sp, #16
 8004fee:	3254      	adds	r2, #84	@ 0x54
 8004ff0:	1852      	adds	r2, r2, r1
 8004ff2:	1c75      	adds	r5, r6, #1
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	60e3      	str	r3, [r4, #12]
 8004ff8:	60a3      	str	r3, [r4, #8]
 8004ffa:	7013      	strb	r3, [r2, #0]
 8004ffc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ffe:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <_vfiprintf_r+0x224>)
 8005000:	2205      	movs	r2, #5
 8005002:	0018      	movs	r0, r3
 8005004:	7829      	ldrb	r1, [r5, #0]
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	f000 fb88 	bl	800571c <memchr>
 800500c:	1c6e      	adds	r6, r5, #1
 800500e:	2800      	cmp	r0, #0
 8005010:	d11f      	bne.n	8005052 <_vfiprintf_r+0x112>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	06d3      	lsls	r3, r2, #27
 8005016:	d504      	bpl.n	8005022 <_vfiprintf_r+0xe2>
 8005018:	2353      	movs	r3, #83	@ 0x53
 800501a:	a904      	add	r1, sp, #16
 800501c:	185b      	adds	r3, r3, r1
 800501e:	2120      	movs	r1, #32
 8005020:	7019      	strb	r1, [r3, #0]
 8005022:	0713      	lsls	r3, r2, #28
 8005024:	d504      	bpl.n	8005030 <_vfiprintf_r+0xf0>
 8005026:	2353      	movs	r3, #83	@ 0x53
 8005028:	a904      	add	r1, sp, #16
 800502a:	185b      	adds	r3, r3, r1
 800502c:	212b      	movs	r1, #43	@ 0x2b
 800502e:	7019      	strb	r1, [r3, #0]
 8005030:	782b      	ldrb	r3, [r5, #0]
 8005032:	2b2a      	cmp	r3, #42	@ 0x2a
 8005034:	d016      	beq.n	8005064 <_vfiprintf_r+0x124>
 8005036:	002e      	movs	r6, r5
 8005038:	2100      	movs	r1, #0
 800503a:	200a      	movs	r0, #10
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	7832      	ldrb	r2, [r6, #0]
 8005040:	1c75      	adds	r5, r6, #1
 8005042:	3a30      	subs	r2, #48	@ 0x30
 8005044:	2a09      	cmp	r2, #9
 8005046:	d950      	bls.n	80050ea <_vfiprintf_r+0x1aa>
 8005048:	2900      	cmp	r1, #0
 800504a:	d111      	bne.n	8005070 <_vfiprintf_r+0x130>
 800504c:	e017      	b.n	800507e <_vfiprintf_r+0x13e>
 800504e:	3601      	adds	r6, #1
 8005050:	e7af      	b.n	8004fb2 <_vfiprintf_r+0x72>
 8005052:	9b05      	ldr	r3, [sp, #20]
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	1ac0      	subs	r0, r0, r3
 8005058:	2301      	movs	r3, #1
 800505a:	4083      	lsls	r3, r0
 800505c:	4313      	orrs	r3, r2
 800505e:	0035      	movs	r5, r6
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	e7cc      	b.n	8004ffe <_vfiprintf_r+0xbe>
 8005064:	9b07      	ldr	r3, [sp, #28]
 8005066:	1d19      	adds	r1, r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	9107      	str	r1, [sp, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db01      	blt.n	8005074 <_vfiprintf_r+0x134>
 8005070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005072:	e004      	b.n	800507e <_vfiprintf_r+0x13e>
 8005074:	425b      	negs	r3, r3
 8005076:	60e3      	str	r3, [r4, #12]
 8005078:	2302      	movs	r3, #2
 800507a:	4313      	orrs	r3, r2
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	7833      	ldrb	r3, [r6, #0]
 8005080:	2b2e      	cmp	r3, #46	@ 0x2e
 8005082:	d10c      	bne.n	800509e <_vfiprintf_r+0x15e>
 8005084:	7873      	ldrb	r3, [r6, #1]
 8005086:	2b2a      	cmp	r3, #42	@ 0x2a
 8005088:	d134      	bne.n	80050f4 <_vfiprintf_r+0x1b4>
 800508a:	9b07      	ldr	r3, [sp, #28]
 800508c:	3602      	adds	r6, #2
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	9207      	str	r2, [sp, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	da01      	bge.n	800509c <_vfiprintf_r+0x15c>
 8005098:	2301      	movs	r3, #1
 800509a:	425b      	negs	r3, r3
 800509c:	9309      	str	r3, [sp, #36]	@ 0x24
 800509e:	4d32      	ldr	r5, [pc, #200]	@ (8005168 <_vfiprintf_r+0x228>)
 80050a0:	2203      	movs	r2, #3
 80050a2:	0028      	movs	r0, r5
 80050a4:	7831      	ldrb	r1, [r6, #0]
 80050a6:	f000 fb39 	bl	800571c <memchr>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d006      	beq.n	80050bc <_vfiprintf_r+0x17c>
 80050ae:	2340      	movs	r3, #64	@ 0x40
 80050b0:	1b40      	subs	r0, r0, r5
 80050b2:	4083      	lsls	r3, r0
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	3601      	adds	r6, #1
 80050b8:	4313      	orrs	r3, r2
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	7831      	ldrb	r1, [r6, #0]
 80050be:	2206      	movs	r2, #6
 80050c0:	482a      	ldr	r0, [pc, #168]	@ (800516c <_vfiprintf_r+0x22c>)
 80050c2:	1c75      	adds	r5, r6, #1
 80050c4:	7621      	strb	r1, [r4, #24]
 80050c6:	f000 fb29 	bl	800571c <memchr>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d040      	beq.n	8005150 <_vfiprintf_r+0x210>
 80050ce:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <_vfiprintf_r+0x230>)
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d122      	bne.n	800511a <_vfiprintf_r+0x1da>
 80050d4:	2207      	movs	r2, #7
 80050d6:	9b07      	ldr	r3, [sp, #28]
 80050d8:	3307      	adds	r3, #7
 80050da:	4393      	bics	r3, r2
 80050dc:	3308      	adds	r3, #8
 80050de:	9307      	str	r3, [sp, #28]
 80050e0:	6963      	ldr	r3, [r4, #20]
 80050e2:	9a04      	ldr	r2, [sp, #16]
 80050e4:	189b      	adds	r3, r3, r2
 80050e6:	6163      	str	r3, [r4, #20]
 80050e8:	e762      	b.n	8004fb0 <_vfiprintf_r+0x70>
 80050ea:	4343      	muls	r3, r0
 80050ec:	002e      	movs	r6, r5
 80050ee:	2101      	movs	r1, #1
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	e7a4      	b.n	800503e <_vfiprintf_r+0xfe>
 80050f4:	2300      	movs	r3, #0
 80050f6:	200a      	movs	r0, #10
 80050f8:	0019      	movs	r1, r3
 80050fa:	3601      	adds	r6, #1
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	7832      	ldrb	r2, [r6, #0]
 8005100:	1c75      	adds	r5, r6, #1
 8005102:	3a30      	subs	r2, #48	@ 0x30
 8005104:	2a09      	cmp	r2, #9
 8005106:	d903      	bls.n	8005110 <_vfiprintf_r+0x1d0>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0c8      	beq.n	800509e <_vfiprintf_r+0x15e>
 800510c:	9109      	str	r1, [sp, #36]	@ 0x24
 800510e:	e7c6      	b.n	800509e <_vfiprintf_r+0x15e>
 8005110:	4341      	muls	r1, r0
 8005112:	002e      	movs	r6, r5
 8005114:	2301      	movs	r3, #1
 8005116:	1889      	adds	r1, r1, r2
 8005118:	e7f1      	b.n	80050fe <_vfiprintf_r+0x1be>
 800511a:	aa07      	add	r2, sp, #28
 800511c:	9200      	str	r2, [sp, #0]
 800511e:	0021      	movs	r1, r4
 8005120:	003a      	movs	r2, r7
 8005122:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <_vfiprintf_r+0x234>)
 8005124:	9803      	ldr	r0, [sp, #12]
 8005126:	e000      	b.n	800512a <_vfiprintf_r+0x1ea>
 8005128:	bf00      	nop
 800512a:	9004      	str	r0, [sp, #16]
 800512c:	9b04      	ldr	r3, [sp, #16]
 800512e:	3301      	adds	r3, #1
 8005130:	d1d6      	bne.n	80050e0 <_vfiprintf_r+0x1a0>
 8005132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005134:	07db      	lsls	r3, r3, #31
 8005136:	d405      	bmi.n	8005144 <_vfiprintf_r+0x204>
 8005138:	89bb      	ldrh	r3, [r7, #12]
 800513a:	059b      	lsls	r3, r3, #22
 800513c:	d402      	bmi.n	8005144 <_vfiprintf_r+0x204>
 800513e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005140:	f7ff fdc6 	bl	8004cd0 <__retarget_lock_release_recursive>
 8005144:	89bb      	ldrh	r3, [r7, #12]
 8005146:	065b      	lsls	r3, r3, #25
 8005148:	d500      	bpl.n	800514c <_vfiprintf_r+0x20c>
 800514a:	e71e      	b.n	8004f8a <_vfiprintf_r+0x4a>
 800514c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800514e:	e71e      	b.n	8004f8e <_vfiprintf_r+0x4e>
 8005150:	aa07      	add	r2, sp, #28
 8005152:	9200      	str	r2, [sp, #0]
 8005154:	0021      	movs	r1, r4
 8005156:	003a      	movs	r2, r7
 8005158:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <_vfiprintf_r+0x234>)
 800515a:	9803      	ldr	r0, [sp, #12]
 800515c:	f000 f87c 	bl	8005258 <_printf_i>
 8005160:	e7e3      	b.n	800512a <_vfiprintf_r+0x1ea>
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	0800580c 	.word	0x0800580c
 8005168:	08005812 	.word	0x08005812
 800516c:	08005816 	.word	0x08005816
 8005170:	00000000 	.word	0x00000000
 8005174:	08004f1b 	.word	0x08004f1b

08005178 <_printf_common>:
 8005178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517a:	0016      	movs	r6, r2
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	688a      	ldr	r2, [r1, #8]
 8005180:	690b      	ldr	r3, [r1, #16]
 8005182:	000c      	movs	r4, r1
 8005184:	9000      	str	r0, [sp, #0]
 8005186:	4293      	cmp	r3, r2
 8005188:	da00      	bge.n	800518c <_printf_common+0x14>
 800518a:	0013      	movs	r3, r2
 800518c:	0022      	movs	r2, r4
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	3243      	adds	r2, #67	@ 0x43
 8005192:	7812      	ldrb	r2, [r2, #0]
 8005194:	2a00      	cmp	r2, #0
 8005196:	d001      	beq.n	800519c <_printf_common+0x24>
 8005198:	3301      	adds	r3, #1
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	069b      	lsls	r3, r3, #26
 80051a0:	d502      	bpl.n	80051a8 <_printf_common+0x30>
 80051a2:	6833      	ldr	r3, [r6, #0]
 80051a4:	3302      	adds	r3, #2
 80051a6:	6033      	str	r3, [r6, #0]
 80051a8:	6822      	ldr	r2, [r4, #0]
 80051aa:	2306      	movs	r3, #6
 80051ac:	0015      	movs	r5, r2
 80051ae:	401d      	ands	r5, r3
 80051b0:	421a      	tst	r2, r3
 80051b2:	d027      	beq.n	8005204 <_printf_common+0x8c>
 80051b4:	0023      	movs	r3, r4
 80051b6:	3343      	adds	r3, #67	@ 0x43
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	4193      	sbcs	r3, r2
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	0692      	lsls	r2, r2, #26
 80051c2:	d430      	bmi.n	8005226 <_printf_common+0xae>
 80051c4:	0022      	movs	r2, r4
 80051c6:	9901      	ldr	r1, [sp, #4]
 80051c8:	9800      	ldr	r0, [sp, #0]
 80051ca:	9d08      	ldr	r5, [sp, #32]
 80051cc:	3243      	adds	r2, #67	@ 0x43
 80051ce:	47a8      	blx	r5
 80051d0:	3001      	adds	r0, #1
 80051d2:	d025      	beq.n	8005220 <_printf_common+0xa8>
 80051d4:	2206      	movs	r2, #6
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	2500      	movs	r5, #0
 80051da:	4013      	ands	r3, r2
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d105      	bne.n	80051ec <_printf_common+0x74>
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	68e5      	ldr	r5, [r4, #12]
 80051e4:	1aed      	subs	r5, r5, r3
 80051e6:	43eb      	mvns	r3, r5
 80051e8:	17db      	asrs	r3, r3, #31
 80051ea:	401d      	ands	r5, r3
 80051ec:	68a3      	ldr	r3, [r4, #8]
 80051ee:	6922      	ldr	r2, [r4, #16]
 80051f0:	4293      	cmp	r3, r2
 80051f2:	dd01      	ble.n	80051f8 <_printf_common+0x80>
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	18ed      	adds	r5, r5, r3
 80051f8:	2600      	movs	r6, #0
 80051fa:	42b5      	cmp	r5, r6
 80051fc:	d120      	bne.n	8005240 <_printf_common+0xc8>
 80051fe:	2000      	movs	r0, #0
 8005200:	e010      	b.n	8005224 <_printf_common+0xac>
 8005202:	3501      	adds	r5, #1
 8005204:	68e3      	ldr	r3, [r4, #12]
 8005206:	6832      	ldr	r2, [r6, #0]
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	42ab      	cmp	r3, r5
 800520c:	ddd2      	ble.n	80051b4 <_printf_common+0x3c>
 800520e:	0022      	movs	r2, r4
 8005210:	2301      	movs	r3, #1
 8005212:	9901      	ldr	r1, [sp, #4]
 8005214:	9800      	ldr	r0, [sp, #0]
 8005216:	9f08      	ldr	r7, [sp, #32]
 8005218:	3219      	adds	r2, #25
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	d1f0      	bne.n	8005202 <_printf_common+0x8a>
 8005220:	2001      	movs	r0, #1
 8005222:	4240      	negs	r0, r0
 8005224:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005226:	2030      	movs	r0, #48	@ 0x30
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	3143      	adds	r1, #67	@ 0x43
 800522c:	7008      	strb	r0, [r1, #0]
 800522e:	0021      	movs	r1, r4
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	3145      	adds	r1, #69	@ 0x45
 8005234:	7809      	ldrb	r1, [r1, #0]
 8005236:	18a2      	adds	r2, r4, r2
 8005238:	3243      	adds	r2, #67	@ 0x43
 800523a:	3302      	adds	r3, #2
 800523c:	7011      	strb	r1, [r2, #0]
 800523e:	e7c1      	b.n	80051c4 <_printf_common+0x4c>
 8005240:	0022      	movs	r2, r4
 8005242:	2301      	movs	r3, #1
 8005244:	9901      	ldr	r1, [sp, #4]
 8005246:	9800      	ldr	r0, [sp, #0]
 8005248:	9f08      	ldr	r7, [sp, #32]
 800524a:	321a      	adds	r2, #26
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	d0e6      	beq.n	8005220 <_printf_common+0xa8>
 8005252:	3601      	adds	r6, #1
 8005254:	e7d1      	b.n	80051fa <_printf_common+0x82>
	...

08005258 <_printf_i>:
 8005258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525a:	b08b      	sub	sp, #44	@ 0x2c
 800525c:	9206      	str	r2, [sp, #24]
 800525e:	000a      	movs	r2, r1
 8005260:	3243      	adds	r2, #67	@ 0x43
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	9005      	str	r0, [sp, #20]
 8005266:	9203      	str	r2, [sp, #12]
 8005268:	7e0a      	ldrb	r2, [r1, #24]
 800526a:	000c      	movs	r4, r1
 800526c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800526e:	2a78      	cmp	r2, #120	@ 0x78
 8005270:	d809      	bhi.n	8005286 <_printf_i+0x2e>
 8005272:	2a62      	cmp	r2, #98	@ 0x62
 8005274:	d80b      	bhi.n	800528e <_printf_i+0x36>
 8005276:	2a00      	cmp	r2, #0
 8005278:	d100      	bne.n	800527c <_printf_i+0x24>
 800527a:	e0bc      	b.n	80053f6 <_printf_i+0x19e>
 800527c:	497b      	ldr	r1, [pc, #492]	@ (800546c <_printf_i+0x214>)
 800527e:	9104      	str	r1, [sp, #16]
 8005280:	2a58      	cmp	r2, #88	@ 0x58
 8005282:	d100      	bne.n	8005286 <_printf_i+0x2e>
 8005284:	e090      	b.n	80053a8 <_printf_i+0x150>
 8005286:	0025      	movs	r5, r4
 8005288:	3542      	adds	r5, #66	@ 0x42
 800528a:	702a      	strb	r2, [r5, #0]
 800528c:	e022      	b.n	80052d4 <_printf_i+0x7c>
 800528e:	0010      	movs	r0, r2
 8005290:	3863      	subs	r0, #99	@ 0x63
 8005292:	2815      	cmp	r0, #21
 8005294:	d8f7      	bhi.n	8005286 <_printf_i+0x2e>
 8005296:	f7fa ff35 	bl	8000104 <__gnu_thumb1_case_shi>
 800529a:	0016      	.short	0x0016
 800529c:	fff6001f 	.word	0xfff6001f
 80052a0:	fff6fff6 	.word	0xfff6fff6
 80052a4:	001ffff6 	.word	0x001ffff6
 80052a8:	fff6fff6 	.word	0xfff6fff6
 80052ac:	fff6fff6 	.word	0xfff6fff6
 80052b0:	003600a1 	.word	0x003600a1
 80052b4:	fff60080 	.word	0xfff60080
 80052b8:	00b2fff6 	.word	0x00b2fff6
 80052bc:	0036fff6 	.word	0x0036fff6
 80052c0:	fff6fff6 	.word	0xfff6fff6
 80052c4:	0084      	.short	0x0084
 80052c6:	0025      	movs	r5, r4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	3542      	adds	r5, #66	@ 0x42
 80052cc:	1d11      	adds	r1, r2, #4
 80052ce:	6019      	str	r1, [r3, #0]
 80052d0:	6813      	ldr	r3, [r2, #0]
 80052d2:	702b      	strb	r3, [r5, #0]
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0a0      	b.n	800541a <_printf_i+0x1c2>
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	6809      	ldr	r1, [r1, #0]
 80052dc:	1d02      	adds	r2, r0, #4
 80052de:	060d      	lsls	r5, r1, #24
 80052e0:	d50b      	bpl.n	80052fa <_printf_i+0xa2>
 80052e2:	6806      	ldr	r6, [r0, #0]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	da03      	bge.n	80052f2 <_printf_i+0x9a>
 80052ea:	232d      	movs	r3, #45	@ 0x2d
 80052ec:	9a03      	ldr	r2, [sp, #12]
 80052ee:	4276      	negs	r6, r6
 80052f0:	7013      	strb	r3, [r2, #0]
 80052f2:	4b5e      	ldr	r3, [pc, #376]	@ (800546c <_printf_i+0x214>)
 80052f4:	270a      	movs	r7, #10
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	e018      	b.n	800532c <_printf_i+0xd4>
 80052fa:	6806      	ldr	r6, [r0, #0]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	0649      	lsls	r1, r1, #25
 8005300:	d5f1      	bpl.n	80052e6 <_printf_i+0x8e>
 8005302:	b236      	sxth	r6, r6
 8005304:	e7ef      	b.n	80052e6 <_printf_i+0x8e>
 8005306:	6808      	ldr	r0, [r1, #0]
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	c940      	ldmia	r1!, {r6}
 800530c:	0605      	lsls	r5, r0, #24
 800530e:	d402      	bmi.n	8005316 <_printf_i+0xbe>
 8005310:	0640      	lsls	r0, r0, #25
 8005312:	d500      	bpl.n	8005316 <_printf_i+0xbe>
 8005314:	b2b6      	uxth	r6, r6
 8005316:	6019      	str	r1, [r3, #0]
 8005318:	4b54      	ldr	r3, [pc, #336]	@ (800546c <_printf_i+0x214>)
 800531a:	270a      	movs	r7, #10
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005320:	d100      	bne.n	8005324 <_printf_i+0xcc>
 8005322:	3f02      	subs	r7, #2
 8005324:	0023      	movs	r3, r4
 8005326:	2200      	movs	r2, #0
 8005328:	3343      	adds	r3, #67	@ 0x43
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	60a3      	str	r3, [r4, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db03      	blt.n	800533c <_printf_i+0xe4>
 8005334:	2104      	movs	r1, #4
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	438a      	bics	r2, r1
 800533a:	6022      	str	r2, [r4, #0]
 800533c:	2e00      	cmp	r6, #0
 800533e:	d102      	bne.n	8005346 <_printf_i+0xee>
 8005340:	9d03      	ldr	r5, [sp, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <_printf_i+0x108>
 8005346:	9d03      	ldr	r5, [sp, #12]
 8005348:	0030      	movs	r0, r6
 800534a:	0039      	movs	r1, r7
 800534c:	f7fa ff6a 	bl	8000224 <__aeabi_uidivmod>
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	3d01      	subs	r5, #1
 8005354:	5c5b      	ldrb	r3, [r3, r1]
 8005356:	702b      	strb	r3, [r5, #0]
 8005358:	0033      	movs	r3, r6
 800535a:	0006      	movs	r6, r0
 800535c:	429f      	cmp	r7, r3
 800535e:	d9f3      	bls.n	8005348 <_printf_i+0xf0>
 8005360:	2f08      	cmp	r7, #8
 8005362:	d109      	bne.n	8005378 <_printf_i+0x120>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07db      	lsls	r3, r3, #31
 8005368:	d506      	bpl.n	8005378 <_printf_i+0x120>
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	dc02      	bgt.n	8005378 <_printf_i+0x120>
 8005372:	2330      	movs	r3, #48	@ 0x30
 8005374:	3d01      	subs	r5, #1
 8005376:	702b      	strb	r3, [r5, #0]
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1b5b      	subs	r3, r3, r5
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	0021      	movs	r1, r4
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	9805      	ldr	r0, [sp, #20]
 8005386:	9b06      	ldr	r3, [sp, #24]
 8005388:	aa09      	add	r2, sp, #36	@ 0x24
 800538a:	f7ff fef5 	bl	8005178 <_printf_common>
 800538e:	3001      	adds	r0, #1
 8005390:	d148      	bne.n	8005424 <_printf_i+0x1cc>
 8005392:	2001      	movs	r0, #1
 8005394:	4240      	negs	r0, r0
 8005396:	b00b      	add	sp, #44	@ 0x2c
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	2220      	movs	r2, #32
 800539c:	6809      	ldr	r1, [r1, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	6022      	str	r2, [r4, #0]
 80053a2:	2278      	movs	r2, #120	@ 0x78
 80053a4:	4932      	ldr	r1, [pc, #200]	@ (8005470 <_printf_i+0x218>)
 80053a6:	9104      	str	r1, [sp, #16]
 80053a8:	0021      	movs	r1, r4
 80053aa:	3145      	adds	r1, #69	@ 0x45
 80053ac:	700a      	strb	r2, [r1, #0]
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	c940      	ldmia	r1!, {r6}
 80053b4:	0610      	lsls	r0, r2, #24
 80053b6:	d402      	bmi.n	80053be <_printf_i+0x166>
 80053b8:	0650      	lsls	r0, r2, #25
 80053ba:	d500      	bpl.n	80053be <_printf_i+0x166>
 80053bc:	b2b6      	uxth	r6, r6
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	07d3      	lsls	r3, r2, #31
 80053c2:	d502      	bpl.n	80053ca <_printf_i+0x172>
 80053c4:	2320      	movs	r3, #32
 80053c6:	4313      	orrs	r3, r2
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	d001      	beq.n	80053d2 <_printf_i+0x17a>
 80053ce:	2710      	movs	r7, #16
 80053d0:	e7a8      	b.n	8005324 <_printf_i+0xcc>
 80053d2:	2220      	movs	r2, #32
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	4393      	bics	r3, r2
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	e7f8      	b.n	80053ce <_printf_i+0x176>
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	680d      	ldr	r5, [r1, #0]
 80053e0:	1d10      	adds	r0, r2, #4
 80053e2:	6949      	ldr	r1, [r1, #20]
 80053e4:	6018      	str	r0, [r3, #0]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	062e      	lsls	r6, r5, #24
 80053ea:	d501      	bpl.n	80053f0 <_printf_i+0x198>
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <_printf_i+0x19e>
 80053f0:	066d      	lsls	r5, r5, #25
 80053f2:	d5fb      	bpl.n	80053ec <_printf_i+0x194>
 80053f4:	8019      	strh	r1, [r3, #0]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9d03      	ldr	r5, [sp, #12]
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	e7bf      	b.n	800537e <_printf_i+0x126>
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	1d11      	adds	r1, r2, #4
 8005402:	6019      	str	r1, [r3, #0]
 8005404:	6815      	ldr	r5, [r2, #0]
 8005406:	2100      	movs	r1, #0
 8005408:	0028      	movs	r0, r5
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	f000 f986 	bl	800571c <memchr>
 8005410:	2800      	cmp	r0, #0
 8005412:	d001      	beq.n	8005418 <_printf_i+0x1c0>
 8005414:	1b40      	subs	r0, r0, r5
 8005416:	6060      	str	r0, [r4, #4]
 8005418:	6863      	ldr	r3, [r4, #4]
 800541a:	6123      	str	r3, [r4, #16]
 800541c:	2300      	movs	r3, #0
 800541e:	9a03      	ldr	r2, [sp, #12]
 8005420:	7013      	strb	r3, [r2, #0]
 8005422:	e7ac      	b.n	800537e <_printf_i+0x126>
 8005424:	002a      	movs	r2, r5
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	9906      	ldr	r1, [sp, #24]
 800542a:	9805      	ldr	r0, [sp, #20]
 800542c:	9d07      	ldr	r5, [sp, #28]
 800542e:	47a8      	blx	r5
 8005430:	3001      	adds	r0, #1
 8005432:	d0ae      	beq.n	8005392 <_printf_i+0x13a>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d415      	bmi.n	8005466 <_printf_i+0x20e>
 800543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800543c:	68e0      	ldr	r0, [r4, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	daa9      	bge.n	8005396 <_printf_i+0x13e>
 8005442:	0018      	movs	r0, r3
 8005444:	e7a7      	b.n	8005396 <_printf_i+0x13e>
 8005446:	0022      	movs	r2, r4
 8005448:	2301      	movs	r3, #1
 800544a:	9906      	ldr	r1, [sp, #24]
 800544c:	9805      	ldr	r0, [sp, #20]
 800544e:	9e07      	ldr	r6, [sp, #28]
 8005450:	3219      	adds	r2, #25
 8005452:	47b0      	blx	r6
 8005454:	3001      	adds	r0, #1
 8005456:	d09c      	beq.n	8005392 <_printf_i+0x13a>
 8005458:	3501      	adds	r5, #1
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	42ab      	cmp	r3, r5
 8005462:	dcf0      	bgt.n	8005446 <_printf_i+0x1ee>
 8005464:	e7e9      	b.n	800543a <_printf_i+0x1e2>
 8005466:	2500      	movs	r5, #0
 8005468:	e7f7      	b.n	800545a <_printf_i+0x202>
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	0800581d 	.word	0x0800581d
 8005470:	0800582e 	.word	0x0800582e

08005474 <__sflush_r>:
 8005474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005476:	220c      	movs	r2, #12
 8005478:	5e8b      	ldrsh	r3, [r1, r2]
 800547a:	0005      	movs	r5, r0
 800547c:	000c      	movs	r4, r1
 800547e:	071a      	lsls	r2, r3, #28
 8005480:	d456      	bmi.n	8005530 <__sflush_r+0xbc>
 8005482:	684a      	ldr	r2, [r1, #4]
 8005484:	2a00      	cmp	r2, #0
 8005486:	dc02      	bgt.n	800548e <__sflush_r+0x1a>
 8005488:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800548a:	2a00      	cmp	r2, #0
 800548c:	dd4e      	ble.n	800552c <__sflush_r+0xb8>
 800548e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005490:	2f00      	cmp	r7, #0
 8005492:	d04b      	beq.n	800552c <__sflush_r+0xb8>
 8005494:	2200      	movs	r2, #0
 8005496:	2080      	movs	r0, #128	@ 0x80
 8005498:	682e      	ldr	r6, [r5, #0]
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	001a      	movs	r2, r3
 800549e:	0140      	lsls	r0, r0, #5
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	4002      	ands	r2, r0
 80054a4:	4203      	tst	r3, r0
 80054a6:	d033      	beq.n	8005510 <__sflush_r+0x9c>
 80054a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	075b      	lsls	r3, r3, #29
 80054ae:	d506      	bpl.n	80054be <__sflush_r+0x4a>
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <__sflush_r+0x4a>
 80054ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054bc:	1ad2      	subs	r2, r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	0028      	movs	r0, r5
 80054c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80054c4:	6a21      	ldr	r1, [r4, #32]
 80054c6:	47b8      	blx	r7
 80054c8:	89a2      	ldrh	r2, [r4, #12]
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d106      	bne.n	80054dc <__sflush_r+0x68>
 80054ce:	6829      	ldr	r1, [r5, #0]
 80054d0:	291d      	cmp	r1, #29
 80054d2:	d846      	bhi.n	8005562 <__sflush_r+0xee>
 80054d4:	4b29      	ldr	r3, [pc, #164]	@ (800557c <__sflush_r+0x108>)
 80054d6:	410b      	asrs	r3, r1
 80054d8:	07db      	lsls	r3, r3, #31
 80054da:	d442      	bmi.n	8005562 <__sflush_r+0xee>
 80054dc:	2300      	movs	r3, #0
 80054de:	6063      	str	r3, [r4, #4]
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	04d2      	lsls	r2, r2, #19
 80054e6:	d505      	bpl.n	80054f4 <__sflush_r+0x80>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <__sflush_r+0x7e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d100      	bne.n	80054f4 <__sflush_r+0x80>
 80054f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80054f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054f6:	602e      	str	r6, [r5, #0]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d017      	beq.n	800552c <__sflush_r+0xb8>
 80054fc:	0023      	movs	r3, r4
 80054fe:	3344      	adds	r3, #68	@ 0x44
 8005500:	4299      	cmp	r1, r3
 8005502:	d002      	beq.n	800550a <__sflush_r+0x96>
 8005504:	0028      	movs	r0, r5
 8005506:	f7ff fbed 	bl	8004ce4 <_free_r>
 800550a:	2300      	movs	r3, #0
 800550c:	6363      	str	r3, [r4, #52]	@ 0x34
 800550e:	e00d      	b.n	800552c <__sflush_r+0xb8>
 8005510:	2301      	movs	r3, #1
 8005512:	0028      	movs	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	0002      	movs	r2, r0
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d1c6      	bne.n	80054aa <__sflush_r+0x36>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0c3      	beq.n	80054aa <__sflush_r+0x36>
 8005522:	2b1d      	cmp	r3, #29
 8005524:	d001      	beq.n	800552a <__sflush_r+0xb6>
 8005526:	2b16      	cmp	r3, #22
 8005528:	d11a      	bne.n	8005560 <__sflush_r+0xec>
 800552a:	602e      	str	r6, [r5, #0]
 800552c:	2000      	movs	r0, #0
 800552e:	e01e      	b.n	800556e <__sflush_r+0xfa>
 8005530:	690e      	ldr	r6, [r1, #16]
 8005532:	2e00      	cmp	r6, #0
 8005534:	d0fa      	beq.n	800552c <__sflush_r+0xb8>
 8005536:	680f      	ldr	r7, [r1, #0]
 8005538:	600e      	str	r6, [r1, #0]
 800553a:	1bba      	subs	r2, r7, r6
 800553c:	9201      	str	r2, [sp, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	079b      	lsls	r3, r3, #30
 8005542:	d100      	bne.n	8005546 <__sflush_r+0xd2>
 8005544:	694a      	ldr	r2, [r1, #20]
 8005546:	60a2      	str	r2, [r4, #8]
 8005548:	9b01      	ldr	r3, [sp, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	ddee      	ble.n	800552c <__sflush_r+0xb8>
 800554e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005550:	0032      	movs	r2, r6
 8005552:	001f      	movs	r7, r3
 8005554:	0028      	movs	r0, r5
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	47b8      	blx	r7
 800555c:	2800      	cmp	r0, #0
 800555e:	dc07      	bgt.n	8005570 <__sflush_r+0xfc>
 8005560:	89a2      	ldrh	r2, [r4, #12]
 8005562:	2340      	movs	r3, #64	@ 0x40
 8005564:	2001      	movs	r0, #1
 8005566:	4313      	orrs	r3, r2
 8005568:	b21b      	sxth	r3, r3
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	4240      	negs	r0, r0
 800556e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	1836      	adds	r6, r6, r0
 8005574:	1a1b      	subs	r3, r3, r0
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	e7e6      	b.n	8005548 <__sflush_r+0xd4>
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	dfbffffe 	.word	0xdfbffffe

08005580 <_fflush_r>:
 8005580:	690b      	ldr	r3, [r1, #16]
 8005582:	b570      	push	{r4, r5, r6, lr}
 8005584:	0005      	movs	r5, r0
 8005586:	000c      	movs	r4, r1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <_fflush_r+0x12>
 800558c:	2500      	movs	r5, #0
 800558e:	0028      	movs	r0, r5
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	2800      	cmp	r0, #0
 8005594:	d004      	beq.n	80055a0 <_fflush_r+0x20>
 8005596:	6a03      	ldr	r3, [r0, #32]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <_fflush_r+0x20>
 800559c:	f7ff f8ac 	bl	80046f8 <__sinit>
 80055a0:	220c      	movs	r2, #12
 80055a2:	5ea3      	ldrsh	r3, [r4, r2]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f1      	beq.n	800558c <_fflush_r+0xc>
 80055a8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055aa:	07d2      	lsls	r2, r2, #31
 80055ac:	d404      	bmi.n	80055b8 <_fflush_r+0x38>
 80055ae:	059b      	lsls	r3, r3, #22
 80055b0:	d402      	bmi.n	80055b8 <_fflush_r+0x38>
 80055b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055b4:	f7ff fb8b 	bl	8004cce <__retarget_lock_acquire_recursive>
 80055b8:	0028      	movs	r0, r5
 80055ba:	0021      	movs	r1, r4
 80055bc:	f7ff ff5a 	bl	8005474 <__sflush_r>
 80055c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055c2:	0005      	movs	r5, r0
 80055c4:	07db      	lsls	r3, r3, #31
 80055c6:	d4e2      	bmi.n	800558e <_fflush_r+0xe>
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	059b      	lsls	r3, r3, #22
 80055cc:	d4df      	bmi.n	800558e <_fflush_r+0xe>
 80055ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055d0:	f7ff fb7e 	bl	8004cd0 <__retarget_lock_release_recursive>
 80055d4:	e7db      	b.n	800558e <_fflush_r+0xe>
	...

080055d8 <__swhatbuf_r>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	000e      	movs	r6, r1
 80055dc:	001d      	movs	r5, r3
 80055de:	230e      	movs	r3, #14
 80055e0:	5ec9      	ldrsh	r1, [r1, r3]
 80055e2:	0014      	movs	r4, r2
 80055e4:	b096      	sub	sp, #88	@ 0x58
 80055e6:	2900      	cmp	r1, #0
 80055e8:	da0c      	bge.n	8005604 <__swhatbuf_r+0x2c>
 80055ea:	89b2      	ldrh	r2, [r6, #12]
 80055ec:	2380      	movs	r3, #128	@ 0x80
 80055ee:	0011      	movs	r1, r2
 80055f0:	4019      	ands	r1, r3
 80055f2:	421a      	tst	r2, r3
 80055f4:	d114      	bne.n	8005620 <__swhatbuf_r+0x48>
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	2000      	movs	r0, #0
 80055fc:	6029      	str	r1, [r5, #0]
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	b016      	add	sp, #88	@ 0x58
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	466a      	mov	r2, sp
 8005606:	f000 f853 	bl	80056b0 <_fstat_r>
 800560a:	2800      	cmp	r0, #0
 800560c:	dbed      	blt.n	80055ea <__swhatbuf_r+0x12>
 800560e:	23f0      	movs	r3, #240	@ 0xf0
 8005610:	9901      	ldr	r1, [sp, #4]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	4019      	ands	r1, r3
 8005616:	4b04      	ldr	r3, [pc, #16]	@ (8005628 <__swhatbuf_r+0x50>)
 8005618:	18c9      	adds	r1, r1, r3
 800561a:	424b      	negs	r3, r1
 800561c:	4159      	adcs	r1, r3
 800561e:	e7ea      	b.n	80055f6 <__swhatbuf_r+0x1e>
 8005620:	2100      	movs	r1, #0
 8005622:	2340      	movs	r3, #64	@ 0x40
 8005624:	e7e9      	b.n	80055fa <__swhatbuf_r+0x22>
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	ffffe000 	.word	0xffffe000

0800562c <__smakebuf_r>:
 800562c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562e:	2602      	movs	r6, #2
 8005630:	898b      	ldrh	r3, [r1, #12]
 8005632:	0005      	movs	r5, r0
 8005634:	000c      	movs	r4, r1
 8005636:	b085      	sub	sp, #20
 8005638:	4233      	tst	r3, r6
 800563a:	d007      	beq.n	800564c <__smakebuf_r+0x20>
 800563c:	0023      	movs	r3, r4
 800563e:	3347      	adds	r3, #71	@ 0x47
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	2301      	movs	r3, #1
 8005646:	6163      	str	r3, [r4, #20]
 8005648:	b005      	add	sp, #20
 800564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564c:	ab03      	add	r3, sp, #12
 800564e:	aa02      	add	r2, sp, #8
 8005650:	f7ff ffc2 	bl	80055d8 <__swhatbuf_r>
 8005654:	9f02      	ldr	r7, [sp, #8]
 8005656:	9001      	str	r0, [sp, #4]
 8005658:	0039      	movs	r1, r7
 800565a:	0028      	movs	r0, r5
 800565c:	f7ff fbb8 	bl	8004dd0 <_malloc_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	d108      	bne.n	8005676 <__smakebuf_r+0x4a>
 8005664:	220c      	movs	r2, #12
 8005666:	5ea3      	ldrsh	r3, [r4, r2]
 8005668:	059a      	lsls	r2, r3, #22
 800566a:	d4ed      	bmi.n	8005648 <__smakebuf_r+0x1c>
 800566c:	2203      	movs	r2, #3
 800566e:	4393      	bics	r3, r2
 8005670:	431e      	orrs	r6, r3
 8005672:	81a6      	strh	r6, [r4, #12]
 8005674:	e7e2      	b.n	800563c <__smakebuf_r+0x10>
 8005676:	2380      	movs	r3, #128	@ 0x80
 8005678:	89a2      	ldrh	r2, [r4, #12]
 800567a:	6020      	str	r0, [r4, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	6120      	str	r0, [r4, #16]
 8005684:	6167      	str	r7, [r4, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00c      	beq.n	80056a4 <__smakebuf_r+0x78>
 800568a:	0028      	movs	r0, r5
 800568c:	230e      	movs	r3, #14
 800568e:	5ee1      	ldrsh	r1, [r4, r3]
 8005690:	f000 f820 	bl	80056d4 <_isatty_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	d005      	beq.n	80056a4 <__smakebuf_r+0x78>
 8005698:	2303      	movs	r3, #3
 800569a:	89a2      	ldrh	r2, [r4, #12]
 800569c:	439a      	bics	r2, r3
 800569e:	3b02      	subs	r3, #2
 80056a0:	4313      	orrs	r3, r2
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	9a01      	ldr	r2, [sp, #4]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	e7cc      	b.n	8005648 <__smakebuf_r+0x1c>
	...

080056b0 <_fstat_r>:
 80056b0:	2300      	movs	r3, #0
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	4d06      	ldr	r5, [pc, #24]	@ (80056d0 <_fstat_r+0x20>)
 80056b6:	0004      	movs	r4, r0
 80056b8:	0008      	movs	r0, r1
 80056ba:	0011      	movs	r1, r2
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	f7fb fc2c 	bl	8000f1a <_fstat>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d103      	bne.n	80056ce <_fstat_r+0x1e>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d000      	beq.n	80056ce <_fstat_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	20000fb8 	.word	0x20000fb8

080056d4 <_isatty_r>:
 80056d4:	2300      	movs	r3, #0
 80056d6:	b570      	push	{r4, r5, r6, lr}
 80056d8:	4d06      	ldr	r5, [pc, #24]	@ (80056f4 <_isatty_r+0x20>)
 80056da:	0004      	movs	r4, r0
 80056dc:	0008      	movs	r0, r1
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	f7fb fc29 	bl	8000f36 <_isatty>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d103      	bne.n	80056f0 <_isatty_r+0x1c>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d000      	beq.n	80056f0 <_isatty_r+0x1c>
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	20000fb8 	.word	0x20000fb8

080056f8 <_sbrk_r>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	4d06      	ldr	r5, [pc, #24]	@ (8005718 <_sbrk_r+0x20>)
 80056fe:	0004      	movs	r4, r0
 8005700:	0008      	movs	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fb fc2c 	bl	8000f60 <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d103      	bne.n	8005714 <_sbrk_r+0x1c>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d000      	beq.n	8005714 <_sbrk_r+0x1c>
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	20000fb8 	.word	0x20000fb8

0800571c <memchr>:
 800571c:	b2c9      	uxtb	r1, r1
 800571e:	1882      	adds	r2, r0, r2
 8005720:	4290      	cmp	r0, r2
 8005722:	d101      	bne.n	8005728 <memchr+0xc>
 8005724:	2000      	movs	r0, #0
 8005726:	4770      	bx	lr
 8005728:	7803      	ldrb	r3, [r0, #0]
 800572a:	428b      	cmp	r3, r1
 800572c:	d0fb      	beq.n	8005726 <memchr+0xa>
 800572e:	3001      	adds	r0, #1
 8005730:	e7f6      	b.n	8005720 <memchr+0x4>
	...

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
