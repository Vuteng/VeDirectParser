
VEDirect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00007268  2**0
                  CONTENTS
  4 .ARM          00000008  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005324  08005324  00007268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  0800532c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  20000268  08005594  00007268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015f4  08005594  000075f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f4a  00000000  00000000  00007290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  0001c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0001f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0b  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2bc  00000000  00000000  00021033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cab  00000000  00000000  0003b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6a72  00000000  00000000  00050f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dfc  00000000  00000000  000f7a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fb84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000268 	.word	0x20000268
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005098 	.word	0x08005098

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000026c 	.word	0x2000026c
 8000100:	08005098 	.word	0x08005098

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000636:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <_DoInit+0x90>)
 8000638:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	2203      	movs	r2, #3
 800063e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2203      	movs	r2, #3
 8000644:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <_DoInit+0x94>)
 800064a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4a1e      	ldr	r2, [pc, #120]	@ (80006c8 <_DoInit+0x98>)
 8000650:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	00d2      	lsls	r2, r2, #3
 8000658:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <_DoInit+0x94>)
 8000670:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <_DoInit+0x9c>)
 8000676:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2210      	movs	r2, #16
 800067c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e00c      	b.n	80006b0 <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	220f      	movs	r2, #15
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <_DoInit+0xa0>)
 800069e:	5cd1      	ldrb	r1, [r2, r3]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	18d3      	adds	r3, r2, r3
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d9ef      	bls.n	8000696 <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000284 	.word	0x20000284
 80006c4:	080050b0 	.word	0x080050b0
 80006c8:	2000032c 	.word	0x2000032c
 80006cc:	2000072c 	.word	0x2000072c
 80006d0:	0800517c 	.word	0x0800517c

080006d4 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80006e4:	623b      	str	r3, [r7, #32]
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <SEGGER_RTT_ConfigUpBuffer+0x20>
 80006f0:	f7ff ff9e 	bl	8000630 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80006f6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d829      	bhi.n	8000752 <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 80006fe:	f3ef 8310 	mrs	r3, PRIMASK
 8000702:	2101      	movs	r1, #1
 8000704:	f381 8810 	msr	PRIMASK, r1
 8000708:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	0013      	movs	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	189b      	adds	r3, r3, r2
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	18d3      	adds	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00e      	beq.n	8000740 <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000744:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000750:	e002      	b.n	8000758 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 8000752:	2301      	movs	r3, #1
 8000754:	425b      	negs	r3, r3
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b00a      	add	sp, #40	@ 0x28
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	20000284 	.word	0x20000284

08000768 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  _DoInit();
 800076c:	f7ff ff60 	bl	8000630 <_DoInit>
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_DMA_Init+0x38>)
 8000780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_DMA_Init+0x38>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	639a      	str	r2, [r3, #56]	@ 0x38
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_DMA_Init+0x38>)
 800078c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2102      	movs	r1, #2
 800079a:	2009      	movs	r0, #9
 800079c:	f001 f87c 	bl	8001898 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a0:	2009      	movs	r0, #9
 80007a2:	f001 f88e 	bl	80018c2 <HAL_NVIC_EnableIRQ>

}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b089      	sub	sp, #36	@ 0x24
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	240c      	movs	r4, #12
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f004 fbfd 	bl	8004fc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007d0:	2104      	movs	r1, #4
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007da:	2204      	movs	r2, #4
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007e8:	2120      	movs	r1, #32
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2220      	movs	r2, #32
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_GPIO_Init+0x9c>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_GPIO_Init+0x9c>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_GPIO_Init+0x9c>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000812:	23a0      	movs	r3, #160	@ 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fcf0 	bl	8002200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000820:	0021      	movs	r1, r4
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2220      	movs	r2, #32
 8000826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2201      	movs	r2, #1
 800082c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2202      	movs	r2, #2
 8000838:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800083a:	187a      	adds	r2, r7, r1
 800083c:	23a0      	movs	r3, #160	@ 0xa0
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f001 fb78 	bl	8001f38 <HAL_GPIO_Init>

}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b009      	add	sp, #36	@ 0x24
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	checksum = 0;
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <main+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 fee8 	bl	8001634 <HAL_Init>

 
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f860 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff ffa4 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800086c:	f7ff ff84 	bl	8000778 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000870:	f000 fa44 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f9f4 	bl	8000c60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000878:	f000 f900 	bl	8000a7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_IDLE);
 800087c:	4b23      	ldr	r3, [pc, #140]	@ (800090c <main+0xb8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2210      	movs	r2, #16
 8000882:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(&huart3, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <main+0xbc>)
 8000886:	6859      	ldr	r1, [r3, #4]
 8000888:	2317      	movs	r3, #23
 800088a:	18fc      	adds	r4, r7, r3
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	009a      	lsls	r2, r3, #2
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <main+0xb8>)
 8000892:	0018      	movs	r0, r3
 8000894:	f004 fa34 	bl	8004d00 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000898:	0003      	movs	r3, r0
 800089a:	7023      	strb	r3, [r4, #0]
 // __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
  SEGGER_RTT_ConfigUpBuffer  (0,  NULL  ,  NULL  , 0,  SEGGER_RTT_MODE_NO_BLOCK_SKIP  );
 800089c:	2300      	movs	r3, #0
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2300      	movs	r3, #0
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff14 	bl	80006d4 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_Init();
 80008ac:	f7ff ff5c 	bl	8000768 <SEGGER_RTT_Init>
  HAL_TIM_Base_Start(&htim1);
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <main+0xc0>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fbe2 	bl	800307c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  start_time = __HAL_TIM_GET_COUNTER(&htim1);
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <main+0xc0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008be:	613b      	str	r3, [r7, #16]
    parse_frame(test_buffer);
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <main+0xc4>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe0c 	bl	80014e0 <parse_frame>
    parse_vedirect_data(&ve_data, &g_ve_direct_channels);
 80008c8:	4a14      	ldr	r2, [pc, #80]	@ (800091c <main+0xc8>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <main+0xcc>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fb3a 	bl	8000f48 <parse_vedirect_data>
    end_time = __HAL_TIM_GET_COUNTER(&htim1);
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <main+0xc0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008da:	60fb      	str	r3, [r7, #12]

    int a = 0
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
    ;if (end_time >= start_time)
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d304      	bcc.n	80008f2 <main+0x9e>
    {
        elapsed_time = end_time - start_time;
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	e006      	b.n	8000900 <main+0xac>
    }
    else
    {
        // Handle timer overflow if it occurs
        elapsed_time = (0xFFFF - start_time) + end_time;
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <main+0xd0>)
 80008fa:	4694      	mov	ip, r2
 80008fc:	4463      	add	r3, ip
 80008fe:	607b      	str	r3, [r7, #4]
    }

    a++;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
  {
 8000906:	e7d7      	b.n	80008b8 <main+0x64>
 8000908:	20000b3c 	.word	0x20000b3c
 800090c:	20000c20 	.word	0x20000c20
 8000910:	20000200 	.word	0x20000200
 8000914:	20000b40 	.word	0x20000b40
 8000918:	20000000 	.word	0x20000000
 800091c:	20000d10 	.word	0x20000d10
 8000920:	20001118 	.word	0x20001118
 8000924:	0000ffff 	.word	0x0000ffff

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b093      	sub	sp, #76	@ 0x4c
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	2410      	movs	r4, #16
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	2338      	movs	r3, #56	@ 0x38
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f004 fb43 	bl	8004fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2310      	movs	r3, #16
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f004 fb3c 	bl	8004fc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fc73 	bl	800223c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2240      	movs	r2, #64	@ 0x40
 800096e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fcab 	bl	80022d4 <HAL_RCC_OscConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000982:	f000 f819 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	003b      	movs	r3, r7
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	003b      	movs	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099e:	003b      	movs	r3, r7
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 ffb0 	bl	8002908 <HAL_RCC_ClockConfig>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009ac:	f000 f804 	bl	80009b8 <Error_Handler>
  }
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b013      	add	sp, #76	@ 0x4c
 80009b6:	bd90      	pop	{r4, r7, pc}

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_MspInit+0x44>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	2201      	movs	r2, #1
 80009dc:	4013      	ands	r3, r2
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <HAL_MspInit+0x44>)
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	0549      	lsls	r1, r1, #21
 80009ec:	430a      	orrs	r2, r1
 80009ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_MspInit+0x44>)
 80009f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	055b      	lsls	r3, r3, #21
 80009f8:	4013      	ands	r3, r2
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 fe68 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <DMA1_Channel1_IRQHandler+0x14>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 f934 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	20000cb4 	.word	0x20000cb4

08000a58 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <USART3_4_LPUART1_IRQHandler+0x14>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fe24 	bl	80036ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	20000c20 	.word	0x20000c20

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	2310      	movs	r3, #16
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	0018      	movs	r0, r3
 8000a88:	2310      	movs	r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f004 fa99 	bl	8004fc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	0018      	movs	r0, r3
 8000a96:	230c      	movs	r3, #12
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f004 fa92 	bl	8004fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000aa2:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <MX_TIM1_Init+0xb0>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b30 <MX_TIM1_Init+0xb4>)
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fa7d 	bl	8002fcc <HAL_TIM_Base_Init>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000ad6:	f7ff ff6f 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	2110      	movs	r1, #16
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	0152      	lsls	r2, r2, #5
 8000ae2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fb1a 	bl	8003124 <HAL_TIM_ConfigClockSource>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000af4:	f7ff ff60 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3a      	adds	r2, r7, #4
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_TIM1_Init+0xac>)
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 fd07 	bl	8003524 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000b1a:	f7ff ff4d 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b008      	add	sp, #32
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	20000b40 	.word	0x20000b40
 8000b2c:	40012c00 	.word	0x40012c00
 8000b30:	0000ffff 	.word	0x0000ffff

08000b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b091      	sub	sp, #68	@ 0x44
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3c:	240c      	movs	r4, #12
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	0018      	movs	r0, r3
 8000b42:	2334      	movs	r3, #52	@ 0x34
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f004 fa3c 	bl	8004fc4 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <HAL_TIM_Base_MspInit+0x64>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d11c      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	0392      	lsls	r2, r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 f878 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000b70:	f7ff ff22 	bl	80009b8 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_TIM_Base_MspInit+0x68>)
 8000b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_TIM_Base_MspInit+0x68>)
 8000b7a:	2180      	movs	r1, #128	@ 0x80
 8000b7c:	0109      	lsls	r1, r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_TIM_Base_MspInit+0x68>)
 8000b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b011      	add	sp, #68	@ 0x44
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	40012c00 	.word	0x40012c00
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_UARTEx_RxEventCallback>:
#define BUFFER_SIZE 512  // Large enough to accommodate more frames

extern UART_HandleTypeDef huart3;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	000a      	movs	r2, r1
 8000baa:	1cbb      	adds	r3, r7, #2
 8000bac:	801a      	strh	r2, [r3, #0]
    if (huart == &huart3)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <HAL_UARTEx_RxEventCallback+0x44>)
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d112      	bne.n	8000bdc <HAL_UARTEx_RxEventCallback+0x3c>
    {
    	 // Swap the buffers so the main loop can access the received data
        volatile uint8_t *p_tmp = protocol_rx_buff.p_rx_buff_user;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]
        protocol_rx_buff.p_rx_buff_user = protocol_rx_buff.p_rx_buff_reception;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bc2:	601a      	str	r2, [r3, #0]
        protocol_rx_buff.p_rx_buff_reception = p_tmp;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	605a      	str	r2, [r3, #4]

        protocol_rx_buff.new_data_sz = Size;
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <HAL_UARTEx_RxEventCallback+0x48>)
 8000bcc:	1cba      	adds	r2, r7, #2
 8000bce:	8812      	ldrh	r2, [r2, #0]
 8000bd0:	811a      	strh	r2, [r3, #8]
        
        vedirect_rx_upd_rx_timestamp();
 8000bd2:	f000 f83f 	bl	8000c54 <vedirect_rx_upd_rx_timestamp>
        vedirect_rx_set_state(VEDIRECT_RX_State_DATA_READY);
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f000 f82c 	bl	8000c34 <vedirect_rx_set_state>
    }
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b004      	add	sp, #16
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000c20 	.word	0x20000c20
 8000be8:	20000200 	.word	0x20000200

08000bec <HAL_UART_RxCpltCallback>:

// DMA Transfer Complete callback
void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_UART_RxCpltCallback+0x40>)
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d113      	bne.n	8000c24 <HAL_UART_RxCpltCallback+0x38>
    {
        // This can be used to handle data if full buffer is filled
        // For example, reset DMA here if necessary

        // Reset the DMA for next reception
        __HAL_DMA_DISABLE(huart->hdmarx); // Disable the DMA stream
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	589b      	ldr	r3, [r3, r2]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	585b      	ldr	r3, [r3, r1]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2101      	movs	r1, #1
 8000c10:	438a      	bics	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
        //memset(&protocol_rx_buff.p_rx_buff_user, 0, BUFFER_SIZE);
        //memset(&protocol_rx_buff.p_rx_buff_reception, 0, BUFFER_SIZE);
        HAL_UARTEx_ReceiveToIdle_DMA(huart, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_UART_RxCpltCallback+0x44>)
 8000c16:	6859      	ldr	r1, [r3, #4]
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	009a      	lsls	r2, r3, #2
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f004 f86e 	bl	8004d00 <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000c20 	.word	0x20000c20
 8000c30:	20000200 	.word	0x20000200

08000c34 <vedirect_rx_set_state>:
    }
}

// Function to set the state
void vedirect_rx_set_state(VEDIRECT_RX_State new_state)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	701a      	strb	r2, [r3, #0]
    rx_state = new_state;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <vedirect_rx_set_state+0x1c>)
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000b3d 	.word	0x20000b3d

08000c54 <vedirect_rx_upd_rx_timestamp>:
    return rx_state;
}

// Function to update the timestamp (dummy function for example)
void vedirect_rx_upd_rx_timestamp(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    // Implement timestamp update logic if needed
    // For now, it's just a placeholder function
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c66:	4a24      	ldr	r2, [pc, #144]	@ (8000cf8 <MX_USART2_UART_Init+0x98>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c6c:	22e1      	movs	r2, #225	@ 0xe1
 8000c6e:	0252      	lsls	r2, r2, #9
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 fca8 	bl	8003600 <HAL_UART_Init>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cb4:	f7ff fe80 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000cba:	2100      	movs	r1, #0
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f003 ff9d 	bl	8004bfc <HAL_UARTEx_SetTxFifoThreshold>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cc6:	f7ff fe77 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 ffd4 	bl	8004c7c <HAL_UARTEx_SetRxFifoThreshold>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd8:	f7ff fe6e 	bl	80009b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <MX_USART2_UART_Init+0x94>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f003 ff52 	bl	8004b88 <HAL_UARTEx_DisableFifoMode>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f7ff fe66 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	20000b8c 	.word	0x20000b8c
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d02:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <MX_USART3_UART_Init+0x64>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d08:	2296      	movs	r2, #150	@ 0x96
 8000d0a:	01d2      	lsls	r2, r2, #7
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <MX_USART3_UART_Init+0x60>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f002 fc5a 	bl	8003600 <HAL_UART_Init>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f7ff fe32 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000c20 	.word	0x20000c20
 8000d60:	40004800 	.word	0x40004800

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b099      	sub	sp, #100	@ 0x64
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	234c      	movs	r3, #76	@ 0x4c
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f004 f924 	bl	8004fc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	2418      	movs	r4, #24
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2334      	movs	r3, #52	@ 0x34
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 f91c 	bl	8004fc4 <memset>
  if(uartHandle->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a57      	ldr	r2, [pc, #348]	@ (8000ef0 <HAL_UART_MspInit+0x18c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d13f      	bne.n	8000e16 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2202      	movs	r2, #2
 8000d9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 ff59 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff fe03 	bl	80009b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db2:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000db6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000db8:	2180      	movs	r1, #128	@ 0x80
 8000dba:	0289      	lsls	r1, r1, #10
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	029b      	lsls	r3, r3, #10
 8000dc8:	4013      	ands	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b49      	ldr	r3, [pc, #292]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd2:	4b48      	ldr	r3, [pc, #288]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dda:	4b46      	ldr	r3, [pc, #280]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de6:	214c      	movs	r1, #76	@ 0x4c
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2202      	movs	r2, #2
 8000df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2201      	movs	r2, #1
 8000e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	187a      	adds	r2, r7, r1
 8000e08:	23a0      	movs	r3, #160	@ 0xa0
 8000e0a:	05db      	lsls	r3, r3, #23
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 f892 	bl	8001f38 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e14:	e067      	b.n	8000ee6 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a37      	ldr	r2, [pc, #220]	@ (8000ef8 <HAL_UART_MspInit+0x194>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d162      	bne.n	8000ee6 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e20:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e24:	4b33      	ldr	r3, [pc, #204]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e26:	2180      	movs	r1, #128	@ 0x80
 8000e28:	02c9      	lsls	r1, r1, #11
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	02db      	lsls	r3, r3, #11
 8000e36:	4013      	ands	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e42:	2104      	movs	r1, #4
 8000e44:	430a      	orrs	r2, r1
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <HAL_UART_MspInit+0x190>)
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e54:	214c      	movs	r1, #76	@ 0x4c
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2230      	movs	r2, #48	@ 0x30
 8000e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2202      	movs	r2, #2
 8000e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <HAL_UART_MspInit+0x198>)
 8000e78:	0019      	movs	r1, r3
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	f001 f85c 	bl	8001f38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e82:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <HAL_UART_MspInit+0x1a0>)
 8000e84:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e88:	2236      	movs	r2, #54	@ 0x36
 8000e8a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000e9a:	2280      	movs	r2, #128	@ 0x80
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	0152      	lsls	r2, r2, #5
 8000eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fd1e 	bl	80018fc <HAL_DMA_Init>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8000ec4:	f7ff fd78 	bl	80009b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ece:	505a      	str	r2, [r3, r1]
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_UART_MspInit+0x19c>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	201d      	movs	r0, #29
 8000edc:	f000 fcdc 	bl	8001898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000ee0:	201d      	movs	r0, #29
 8000ee2:	f000 fcee 	bl	80018c2 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b019      	add	sp, #100	@ 0x64
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40004800 	.word	0x40004800
 8000efc:	50000800 	.word	0x50000800
 8000f00:	20000cb4 	.word	0x20000cb4
 8000f04:	40020008 	.word	0x40020008

08000f08 <convertToInt>:
        MAP_FIELD(DC_IN_I, struct_ptr, value)          \
        MAP_FIELD(DC_IN_P, struct_ptr, value)          \
        /* Add other fields as needed */               \
    } while (0)

int32_t convertToInt(char* value){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    return atoi(value);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 ffba 	bl	8004e8c <atoi>
 8000f18:	0003      	movs	r3, r0
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <compareLabel>:

bool compareLabel(const char *fieldLabel, const char *targetLabel) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
    return (strcmp(fieldLabel, targetLabel) == 0);
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff f8e6 	bl	8000104 <strcmp>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	425a      	negs	r2, r3
 8000f3c:	4153      	adcs	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <parse_vedirect_data>:

void parse_vedirect_data(data_t *src, ve_direct_data_t *dest) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < src->field_count; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e29f      	b.n	8001498 <parse_vedirect_data+0x550>
        field_t *field = &src->fields[i];
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	222a      	movs	r2, #42	@ 0x2a
 8000f5c:	4353      	muls	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	60bb      	str	r3, [r7, #8]
        
        if (compareLabel(field->label, "V")) {
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4acc      	ldr	r2, [pc, #816]	@ (8001298 <parse_vedirect_data+0x350>)
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ffd9 	bl	8000f22 <compareLabel>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d008      	beq.n	8000f86 <parse_vedirect_data+0x3e>
            dest->label.V = convertToInt(field->value);  // mV Main or channel 1 (battery) voltage
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3309      	adds	r3, #9
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ffc5 	bl	8000f08 <convertToInt>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	e285      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "V2")) {
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4ac4      	ldr	r2, [pc, #784]	@ (800129c <parse_vedirect_data+0x354>)
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ffc8 	bl	8000f22 <compareLabel>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d008      	beq.n	8000fa8 <parse_vedirect_data+0x60>
            dest->label.V2 = convertToInt(field->value); // mV Channel 2 (battery) voltage
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3309      	adds	r3, #9
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff ffb4 	bl	8000f08 <convertToInt>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	e274      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "V3")) {
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4abd      	ldr	r2, [pc, #756]	@ (80012a0 <parse_vedirect_data+0x358>)
 8000fac:	0011      	movs	r1, r2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff ffb7 	bl	8000f22 <compareLabel>
 8000fb4:	1e03      	subs	r3, r0, #0
 8000fb6:	d008      	beq.n	8000fca <parse_vedirect_data+0x82>
            dest->label.V3 = convertToInt(field->value); // mV Channel 3 (battery) voltage
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3309      	adds	r3, #9
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ffa3 	bl	8000f08 <convertToInt>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	e263      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "VS")) {
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4ab5      	ldr	r2, [pc, #724]	@ (80012a4 <parse_vedirect_data+0x35c>)
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff ffa6 	bl	8000f22 <compareLabel>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d008      	beq.n	8000fec <parse_vedirect_data+0xa4>
            dest->label.VS = convertToInt(field->value); // mV Auxiliary (starter) voltage
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3309      	adds	r3, #9
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff ff92 	bl	8000f08 <convertToInt>
 8000fe4:	0002      	movs	r2, r0
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	e252      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "VM")) {
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4aae      	ldr	r2, [pc, #696]	@ (80012a8 <parse_vedirect_data+0x360>)
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f7ff ff95 	bl	8000f22 <compareLabel>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d008      	beq.n	800100e <parse_vedirect_data+0xc6>
            dest->label.VM = convertToInt(field->value); // mV Mid-point voltage of the battery bank
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3309      	adds	r3, #9
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff81 	bl	8000f08 <convertToInt>
 8001006:	0002      	movs	r2, r0
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	e241      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "VPV")) {
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4aa6      	ldr	r2, [pc, #664]	@ (80012ac <parse_vedirect_data+0x364>)
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff84 	bl	8000f22 <compareLabel>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d008      	beq.n	8001030 <parse_vedirect_data+0xe8>
            dest->label.VPV = convertToInt(field->value); // mV Panel voltage
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	3309      	adds	r3, #9
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff ff70 	bl	8000f08 <convertToInt>
 8001028:	0002      	movs	r2, r0
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	61da      	str	r2, [r3, #28]
 800102e:	e230      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "AC_OUT_V")) {
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4a9f      	ldr	r2, [pc, #636]	@ (80012b0 <parse_vedirect_data+0x368>)
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff ff73 	bl	8000f22 <compareLabel>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d00a      	beq.n	8001056 <parse_vedirect_data+0x10e>
            dest->label.AC_OUT_V = convertToInt(field->value); // 0.01 V AC output voltage
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3309      	adds	r3, #9
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <convertToInt>
 800104a:	0001      	movs	r1, r0
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	238a      	movs	r3, #138	@ 0x8a
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	50d1      	str	r1, [r2, r3]
 8001054:	e21d      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "I")) {
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	4a96      	ldr	r2, [pc, #600]	@ (80012b4 <parse_vedirect_data+0x36c>)
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff60 	bl	8000f22 <compareLabel>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d008      	beq.n	8001078 <parse_vedirect_data+0x130>
            dest->label.I = convertToInt(field->value);  // mA Main or channel 1 battery current
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3309      	adds	r3, #9
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff ff4c 	bl	8000f08 <convertToInt>
 8001070:	0002      	movs	r2, r0
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
 8001076:	e20c      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "I2")) {
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4a8f      	ldr	r2, [pc, #572]	@ (80012b8 <parse_vedirect_data+0x370>)
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff ff4f 	bl	8000f22 <compareLabel>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d008      	beq.n	800109a <parse_vedirect_data+0x152>
            dest->label.I2 = convertToInt(field->value); // mA Channel 2 battery current
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3309      	adds	r3, #9
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff3b 	bl	8000f08 <convertToInt>
 8001092:	0002      	movs	r2, r0
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
 8001098:	e1fb      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "I3")) {
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4a87      	ldr	r2, [pc, #540]	@ (80012bc <parse_vedirect_data+0x374>)
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ff3e 	bl	8000f22 <compareLabel>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d008      	beq.n	80010bc <parse_vedirect_data+0x174>
            dest->label.I3 = convertToInt(field->value); // mA Channel 3 battery current
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3309      	adds	r3, #9
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff ff2a 	bl	8000f08 <convertToInt>
 80010b4:	0002      	movs	r2, r0
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ba:	e1ea      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "IL")) {
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4a80      	ldr	r2, [pc, #512]	@ (80012c0 <parse_vedirect_data+0x378>)
 80010c0:	0011      	movs	r1, r2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff ff2d 	bl	8000f22 <compareLabel>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d008      	beq.n	80010de <parse_vedirect_data+0x196>
            dest->label.IL = convertToInt(field->value); // mA Load current
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3309      	adds	r3, #9
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff19 	bl	8000f08 <convertToInt>
 80010d6:	0002      	movs	r2, r0
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
 80010dc:	e1d9      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "DC_IN_I")) {
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	4a78      	ldr	r2, [pc, #480]	@ (80012c4 <parse_vedirect_data+0x37c>)
 80010e2:	0011      	movs	r1, r2
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff1c 	bl	8000f22 <compareLabel>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d00a      	beq.n	8001104 <parse_vedirect_data+0x1bc>
            dest->label.DC_IN_I = convertToInt(field->value);  // 0.1 A DC input current
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3309      	adds	r3, #9
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff ff08 	bl	8000f08 <convertToInt>
 80010f8:	0001      	movs	r1, r0
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	23a8      	movs	r3, #168	@ 0xa8
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	50d1      	str	r1, [r2, r3]
 8001102:	e1c6      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "P")) {
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4a70      	ldr	r2, [pc, #448]	@ (80012c8 <parse_vedirect_data+0x380>)
 8001108:	0011      	movs	r1, r2
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff ff09 	bl	8000f22 <compareLabel>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d008      	beq.n	8001126 <parse_vedirect_data+0x1de>
            dest->label.P = convertToInt(field->value);  // W Instantaneous power
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3309      	adds	r3, #9
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff fef5 	bl	8000f08 <convertToInt>
 800111e:	0002      	movs	r2, r0
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001124:	e1b5      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "SOC")) {
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4a68      	ldr	r2, [pc, #416]	@ (80012cc <parse_vedirect_data+0x384>)
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fef8 	bl	8000f22 <compareLabel>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d008      	beq.n	8001148 <parse_vedirect_data+0x200>
            dest->label.SOC = convertToInt(field->value); // ‰ State-of-charge
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3309      	adds	r3, #9
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fee4 	bl	8000f08 <convertToInt>
 8001140:	0002      	movs	r2, r0
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	645a      	str	r2, [r3, #68]	@ 0x44
 8001146:	e1a4      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "TTG")) {
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4a61      	ldr	r2, [pc, #388]	@ (80012d0 <parse_vedirect_data+0x388>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fee7 	bl	8000f22 <compareLabel>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d008      	beq.n	800116a <parse_vedirect_data+0x222>
            dest->label.TTG = convertToInt(field->value); // Minutes Time-to-go
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3309      	adds	r3, #9
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fed3 	bl	8000f08 <convertToInt>
 8001162:	0002      	movs	r2, r0
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	649a      	str	r2, [r3, #72]	@ 0x48
 8001168:	e193      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "H1")) {
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	4a59      	ldr	r2, [pc, #356]	@ (80012d4 <parse_vedirect_data+0x38c>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff fed6 	bl	8000f22 <compareLabel>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d009      	beq.n	800118e <parse_vedirect_data+0x246>
            dest->label.H1 = convertToInt(field->value);  // mAh Depth of the deepest discharge
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3309      	adds	r3, #9
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff fec2 	bl	8000f08 <convertToInt>
 8001184:	0002      	movs	r2, r0
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2198      	movs	r1, #152	@ 0x98
 800118a:	505a      	str	r2, [r3, r1]
 800118c:	e181      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "H2")) {
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4a51      	ldr	r2, [pc, #324]	@ (80012d8 <parse_vedirect_data+0x390>)
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fec4 	bl	8000f22 <compareLabel>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d009      	beq.n	80011b2 <parse_vedirect_data+0x26a>
            dest->label.H2 = convertToInt(field->value);  // mAh Depth of the last discharge
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	3309      	adds	r3, #9
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff feb0 	bl	8000f08 <convertToInt>
 80011a8:	0002      	movs	r2, r0
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	219c      	movs	r1, #156	@ 0x9c
 80011ae:	505a      	str	r2, [r3, r1]
 80011b0:	e16f      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "H7")) {
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	4a49      	ldr	r2, [pc, #292]	@ (80012dc <parse_vedirect_data+0x394>)
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff feb2 	bl	8000f22 <compareLabel>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d009      	beq.n	80011d6 <parse_vedirect_data+0x28e>
            dest->label.H7 = convertToInt(field->value);  // mV Minimum main (battery) voltage
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3309      	adds	r3, #9
 80011c6:	0018      	movs	r0, r3
 80011c8:	f7ff fe9e 	bl	8000f08 <convertToInt>
 80011cc:	0002      	movs	r2, r0
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	21b0      	movs	r1, #176	@ 0xb0
 80011d2:	505a      	str	r2, [r3, r1]
 80011d4:	e15d      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "H8")) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	4a41      	ldr	r2, [pc, #260]	@ (80012e0 <parse_vedirect_data+0x398>)
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fea0 	bl	8000f22 <compareLabel>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d009      	beq.n	80011fa <parse_vedirect_data+0x2b2>
            dest->label.H8 = convertToInt(field->value);  // mV Maximum main (battery) voltage
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3309      	adds	r3, #9
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fe8c 	bl	8000f08 <convertToInt>
 80011f0:	0002      	movs	r2, r0
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	21b4      	movs	r1, #180	@ 0xb4
 80011f6:	505a      	str	r2, [r3, r1]
 80011f8:	e14b      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "ERR")) {
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4a39      	ldr	r2, [pc, #228]	@ (80012e4 <parse_vedirect_data+0x39c>)
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff fe8e 	bl	8000f22 <compareLabel>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d00a      	beq.n	8001220 <parse_vedirect_data+0x2d8>
            dest->label.ERR = convertToInt(field->value);  // Error code
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3309      	adds	r3, #9
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff fe7a 	bl	8000f08 <convertToInt>
 8001214:	0003      	movs	r3, r0
 8001216:	b2d9      	uxtb	r1, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	22f4      	movs	r2, #244	@ 0xf4
 800121c:	5499      	strb	r1, [r3, r2]
 800121e:	e138      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "CS")) {
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <parse_vedirect_data+0x3a0>)
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff fe7b 	bl	8000f22 <compareLabel>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d00a      	beq.n	8001246 <parse_vedirect_data+0x2fe>
            dest->label.CS = convertToInt(field->value);   // State of operation
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3309      	adds	r3, #9
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fe67 	bl	8000f08 <convertToInt>
 800123a:	0003      	movs	r3, r0
 800123c:	b2d9      	uxtb	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	22f5      	movs	r2, #245	@ 0xf5
 8001242:	5499      	strb	r1, [r3, r2]
 8001244:	e125      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "PID")) {
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <parse_vedirect_data+0x3a4>)
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff fe68 	bl	8000f22 <compareLabel>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d00d      	beq.n	8001272 <parse_vedirect_data+0x32a>
            dest->label.PID = (ve_direct_pid_t)strtol(field->value, NULL, 0);  // Product ID
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3309      	adds	r3, #9
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f003 fea4 	bl	8004fac <strtol>
 8001264:	0003      	movs	r3, r0
 8001266:	b299      	uxth	r1, r3
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2382      	movs	r3, #130	@ 0x82
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	52d1      	strh	r1, [r2, r3]
 8001270:	e10f      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "SER")) {
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <parse_vedirect_data+0x3a8>)
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fe52 	bl	8000f22 <compareLabel>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d038      	beq.n	80012f4 <parse_vedirect_data+0x3ac>
            dest->label.SER = convertToInt(field->value);  // Serial number
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3309      	adds	r3, #9
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fe3e 	bl	8000f08 <convertToInt>
 800128c:	0001      	movs	r1, r0
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	2384      	movs	r3, #132	@ 0x84
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	50d1      	str	r1, [r2, r3]
 8001296:	e0fc      	b.n	8001492 <parse_vedirect_data+0x54a>
 8001298:	080050bc 	.word	0x080050bc
 800129c:	080050c0 	.word	0x080050c0
 80012a0:	080050c4 	.word	0x080050c4
 80012a4:	080050c8 	.word	0x080050c8
 80012a8:	080050cc 	.word	0x080050cc
 80012ac:	080050d0 	.word	0x080050d0
 80012b0:	080050d4 	.word	0x080050d4
 80012b4:	080050e0 	.word	0x080050e0
 80012b8:	080050e4 	.word	0x080050e4
 80012bc:	080050e8 	.word	0x080050e8
 80012c0:	080050ec 	.word	0x080050ec
 80012c4:	080050f0 	.word	0x080050f0
 80012c8:	080050f8 	.word	0x080050f8
 80012cc:	080050fc 	.word	0x080050fc
 80012d0:	08005100 	.word	0x08005100
 80012d4:	08005104 	.word	0x08005104
 80012d8:	08005108 	.word	0x08005108
 80012dc:	0800510c 	.word	0x0800510c
 80012e0:	08005110 	.word	0x08005110
 80012e4:	08005114 	.word	0x08005114
 80012e8:	08005118 	.word	0x08005118
 80012ec:	0800511c 	.word	0x0800511c
 80012f0:	08005120 	.word	0x08005120
        } else if (compareLabel(field->label, "HSDS")) {
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4a6f      	ldr	r2, [pc, #444]	@ (80014b4 <parse_vedirect_data+0x56c>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fe11 	bl	8000f22 <compareLabel>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d00a      	beq.n	800131a <parse_vedirect_data+0x3d2>
            dest->label.HSDS = convertToInt(field->value); // Day sequence number (0..364)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3309      	adds	r3, #9
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fdfd 	bl	8000f08 <convertToInt>
 800130e:	0001      	movs	r1, r0
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	2386      	movs	r3, #134	@ 0x86
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	50d1      	str	r1, [r2, r3]
 8001318:	e0bb      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "MODE")) {
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a66      	ldr	r2, [pc, #408]	@ (80014b8 <parse_vedirect_data+0x570>)
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fdfe 	bl	8000f22 <compareLabel>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d00b      	beq.n	8001342 <parse_vedirect_data+0x3fa>
            dest->label.MODE = convertToInt(field->value); // Device mode
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3309      	adds	r3, #9
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fdea 	bl	8000f08 <convertToInt>
 8001334:	0003      	movs	r3, r0
 8001336:	b259      	sxtb	r1, r3
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	2388      	movs	r3, #136	@ 0x88
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	54d1      	strb	r1, [r2, r3]
 8001340:	e0a7      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "AC_OUT_I")) {
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	4a5d      	ldr	r2, [pc, #372]	@ (80014bc <parse_vedirect_data+0x574>)
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fdea 	bl	8000f22 <compareLabel>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d00a      	beq.n	8001368 <parse_vedirect_data+0x420>
            dest->label.AC_OUT_I = convertToInt(field->value); // 0.1 A AC output current
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3309      	adds	r3, #9
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff fdd6 	bl	8000f08 <convertToInt>
 800135c:	0001      	movs	r1, r0
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	238c      	movs	r3, #140	@ 0x8c
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	50d1      	str	r1, [r2, r3]
 8001366:	e094      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "AC_OUT_S")) {
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4a55      	ldr	r2, [pc, #340]	@ (80014c0 <parse_vedirect_data+0x578>)
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff fdd7 	bl	8000f22 <compareLabel>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d00a      	beq.n	800138e <parse_vedirect_data+0x446>
            dest->label.AC_OUT_S = convertToInt(field->value); // VA AC output apparent power
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3309      	adds	r3, #9
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff fdc3 	bl	8000f08 <convertToInt>
 8001382:	0001      	movs	r1, r0
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	238e      	movs	r3, #142	@ 0x8e
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	50d1      	str	r1, [r2, r3]
 800138c:	e081      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "MPPT")) {
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	4a4c      	ldr	r2, [pc, #304]	@ (80014c4 <parse_vedirect_data+0x57c>)
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fdc4 	bl	8000f22 <compareLabel>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d00a      	beq.n	80013b4 <parse_vedirect_data+0x46c>
            dest->label.MPPT = convertToInt(field->value); // Tracker operation mode
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3309      	adds	r3, #9
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff fdb0 	bl	8000f08 <convertToInt>
 80013a8:	0001      	movs	r1, r0
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	23a2      	movs	r3, #162	@ 0xa2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	50d1      	str	r1, [r2, r3]
 80013b2:	e06e      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "MON")) {
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4a44      	ldr	r2, [pc, #272]	@ (80014c8 <parse_vedirect_data+0x580>)
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff fdb1 	bl	8000f22 <compareLabel>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d00a      	beq.n	80013da <parse_vedirect_data+0x492>
            dest->label.MON = convertToInt(field->value);  // DC monitor mode
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3309      	adds	r3, #9
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fd9d 	bl	8000f08 <convertToInt>
 80013ce:	0001      	movs	r1, r0
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	23a4      	movs	r3, #164	@ 0xa4
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	50d1      	str	r1, [r2, r3]
 80013d8:	e05b      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "DC_IN_V")) {
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	4a3b      	ldr	r2, [pc, #236]	@ (80014cc <parse_vedirect_data+0x584>)
 80013de:	0011      	movs	r1, r2
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff fd9e 	bl	8000f22 <compareLabel>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d00a      	beq.n	8001400 <parse_vedirect_data+0x4b8>
            dest->label.DC_IN_V = convertToInt(field->value);  // 0.01 V DC input voltage
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3309      	adds	r3, #9
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fd8a 	bl	8000f08 <convertToInt>
 80013f4:	0001      	movs	r1, r0
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	23a6      	movs	r3, #166	@ 0xa6
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	50d1      	str	r1, [r2, r3]
 80013fe:	e048      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "DC_IN_P")) {
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4a33      	ldr	r2, [pc, #204]	@ (80014d0 <parse_vedirect_data+0x588>)
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fd8b 	bl	8000f22 <compareLabel>
 800140c:	1e03      	subs	r3, r0, #0
 800140e:	d00a      	beq.n	8001426 <parse_vedirect_data+0x4de>
            dest->label.DC_IN_P = convertToInt(field->value);  // 1 W DC input power
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3309      	adds	r3, #9
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fd77 	bl	8000f08 <convertToInt>
 800141a:	0001      	movs	r1, r0
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	23aa      	movs	r3, #170	@ 0xaa
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	50d1      	str	r1, [r2, r3]
 8001424:	e035      	b.n	8001492 <parse_vedirect_data+0x54a>
        } else if (compareLabel(field->label, "WARN")) {
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	4a2a      	ldr	r2, [pc, #168]	@ (80014d4 <parse_vedirect_data+0x58c>)
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fd78 	bl	8000f22 <compareLabel>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d00a      	beq.n	800144c <parse_vedirect_data+0x504>
            strncpy(dest->label.WARN, field->value, sizeof(dest->label.WARN)); // Warning reason (string)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3321      	adds	r3, #33	@ 0x21
 800143a:	33ff      	adds	r3, #255	@ 0xff
 800143c:	0018      	movs	r0, r3
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3309      	adds	r3, #9
 8001442:	2221      	movs	r2, #33	@ 0x21
 8001444:	0019      	movs	r1, r3
 8001446:	f003 fdd3 	bl	8004ff0 <strncpy>
 800144a:	e022      	b.n	8001492 <parse_vedirect_data+0x54a>
        }else if (compareLabel(field->label, "AR")) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <parse_vedirect_data+0x590>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fd65 	bl	8000f22 <compareLabel>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d009      	beq.n	8001470 <parse_vedirect_data+0x528>
            strncpy(dest->label.AR, field->value, sizeof(dest->label.AR)); // Warning reason (string)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3354      	adds	r3, #84	@ 0x54
 8001460:	0018      	movs	r0, r3
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3309      	adds	r3, #9
 8001466:	2221      	movs	r2, #33	@ 0x21
 8001468:	0019      	movs	r1, r3
 800146a:	f003 fdc1 	bl	8004ff0 <strncpy>
 800146e:	e010      	b.n	8001492 <parse_vedirect_data+0x54a>
        }else if (compareLabel(field->label, "OR")) {
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <parse_vedirect_data+0x594>)
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff fd53 	bl	8000f22 <compareLabel>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d008      	beq.n	8001492 <parse_vedirect_data+0x54a>
            strncpy(dest->label.OR, field->value, sizeof(dest->label.OR)); // Warning reason (string)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3375      	adds	r3, #117	@ 0x75
 8001484:	0018      	movs	r0, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3309      	adds	r3, #9
 800148a:	2221      	movs	r2, #33	@ 0x21
 800148c:	0019      	movs	r1, r3
 800148e:	f003 fdaf 	bl	8004ff0 <strncpy>
    for (int i = 0; i < src->field_count; i++) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	23e7      	movs	r3, #231	@ 0xe7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	001a      	movs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	da00      	bge.n	80014aa <parse_vedirect_data+0x562>
 80014a8:	e556      	b.n	8000f58 <parse_vedirect_data+0x10>
        }
    }
}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b004      	add	sp, #16
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08005124 	.word	0x08005124
 80014b8:	0800512c 	.word	0x0800512c
 80014bc:	08005134 	.word	0x08005134
 80014c0:	08005140 	.word	0x08005140
 80014c4:	0800514c 	.word	0x0800514c
 80014c8:	08005154 	.word	0x08005154
 80014cc:	08005158 	.word	0x08005158
 80014d0:	08005160 	.word	0x08005160
 80014d4:	08005168 	.word	0x08005168
 80014d8:	08005170 	.word	0x08005170
 80014dc:	08005174 	.word	0x08005174

080014e0 <parse_frame>:
    return checksum_calculated;
}

//parses the whole string frame to array of structs
void parse_frame(char *frame)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	ve_data.field_count = 0; // Reset field count
 80014e8:	4a3b      	ldr	r2, [pc, #236]	@ (80015d8 <parse_frame+0xf8>)
 80014ea:	23e7      	movs	r3, #231	@ 0xe7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	2100      	movs	r1, #0
 80014f0:	54d1      	strb	r1, [r2, r3]
	char *line_start = frame;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	61fb      	str	r3, [r7, #28]
	char *line_end;
	//seperates string into new lines based on \r\n
	while ((line_end = strstr(line_start, "\r\n")) != NULL) {
 80014f6:	e05f      	b.n	80015b8 <parse_frame+0xd8>
		*line_end = '\0'; // to know where it ends
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
		// process data line by line
		char *tab_pos = strstr(line_start, "\t");
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	2109      	movs	r1, #9
 8001502:	0018      	movs	r0, r3
 8001504:	f003 fd66 	bl	8004fd4 <strchr>
 8001508:	0003      	movs	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
		if (tab_pos != NULL) {
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d04f      	beq.n	80015b2 <parse_frame+0xd2>
			*tab_pos = '\0'; // to know where it ends
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

		char *label = line_start;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	613b      	str	r3, [r7, #16]
		char *value = tab_pos + 1; //+1 to skip tab
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]

		if (ve_data.field_count < MAX_FIELDS) {
 8001522:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <parse_frame+0xf8>)
 8001524:	23e7      	movs	r3, #231	@ 0xe7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	2b15      	cmp	r3, #21
 800152c:	d841      	bhi.n	80015b2 <parse_frame+0xd2>
			strncpy(ve_data.fields[ve_data.field_count].label, label, LABEL_SIZE - 1);
 800152e:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <parse_frame+0xf8>)
 8001530:	23e7      	movs	r3, #231	@ 0xe7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	001a      	movs	r2, r3
 8001538:	232a      	movs	r3, #42	@ 0x2a
 800153a:	435a      	muls	r2, r3
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <parse_frame+0xf8>)
 800153e:	18d3      	adds	r3, r2, r3
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	2208      	movs	r2, #8
 8001544:	0018      	movs	r0, r3
 8001546:	f003 fd53 	bl	8004ff0 <strncpy>
			ve_data.fields[ve_data.field_count].label[LABEL_SIZE - 1] = '\0';
 800154a:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <parse_frame+0xf8>)
 800154c:	23e7      	movs	r3, #231	@ 0xe7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	0019      	movs	r1, r3
 8001554:	4a20      	ldr	r2, [pc, #128]	@ (80015d8 <parse_frame+0xf8>)
 8001556:	232a      	movs	r3, #42	@ 0x2a
 8001558:	434b      	muls	r3, r1
 800155a:	18d3      	adds	r3, r2, r3
 800155c:	3308      	adds	r3, #8
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			strncpy(ve_data.fields[ve_data.field_count].value, value, VALUE_SIZE - 1);
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <parse_frame+0xf8>)
 8001564:	23e7      	movs	r3, #231	@ 0xe7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	001a      	movs	r2, r3
 800156c:	232a      	movs	r3, #42	@ 0x2a
 800156e:	4353      	muls	r3, r2
 8001570:	3308      	adds	r3, #8
 8001572:	001a      	movs	r2, r3
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <parse_frame+0xf8>)
 8001576:	18d3      	adds	r3, r2, r3
 8001578:	3301      	adds	r3, #1
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	2220      	movs	r2, #32
 800157e:	0018      	movs	r0, r3
 8001580:	f003 fd36 	bl	8004ff0 <strncpy>
			ve_data.fields[ve_data.field_count].value[VALUE_SIZE - 1] = '\0';
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <parse_frame+0xf8>)
 8001586:	23e7      	movs	r3, #231	@ 0xe7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	0018      	movs	r0, r3
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <parse_frame+0xf8>)
 8001590:	2129      	movs	r1, #41	@ 0x29
 8001592:	232a      	movs	r3, #42	@ 0x2a
 8001594:	4343      	muls	r3, r0
 8001596:	18d3      	adds	r3, r2, r3
 8001598:	185b      	adds	r3, r3, r1
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
			ve_data.field_count++;
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <parse_frame+0xf8>)
 80015a0:	23e7      	movs	r3, #231	@ 0xe7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	3301      	adds	r3, #1
 80015a8:	b2d9      	uxtb	r1, r3
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <parse_frame+0xf8>)
 80015ac:	23e7      	movs	r3, #231	@ 0xe7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	54d1      	strb	r1, [r2, r3]
			}
		}
		line_start = line_end + 2;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	3302      	adds	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
	while ((line_end = strstr(line_start, "\r\n")) != NULL) {
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <parse_frame+0xfc>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f003 fd2a 	bl	8005018 <strstr>
 80015c4:	0003      	movs	r3, r0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d194      	bne.n	80014f8 <parse_frame+0x18>
	}
}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b008      	add	sp, #32
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20001118 	.word	0x20001118
 80015dc:	08005178 	.word	0x08005178

080015e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 80015e0:	480d      	ldr	r0, [pc, #52]	@ (8001618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f7ff fa44 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopForever+0x6>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopForever+0xe>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopForever+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800160e:	f003 fd1f 	bl	8005050 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001612:	f7ff f91f 	bl	8000854 <main>

08001616 <LoopForever>:

LoopForever:
  b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
ldr   r0, =_estack
 8001618:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8001624:	0800532c 	.word	0x0800532c
  ldr r2, =_sbss
 8001628:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 800162c:	200015f4 	.word	0x200015f4

08001630 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_COMP_IRQHandler>
	...

08001634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_Init+0x3c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Init+0x3c>)
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f810 	bl	8001674 <HAL_InitTick>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d003      	beq.n	8001660 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e001      	b.n	8001664 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff f9b0 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	781b      	ldrb	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	230f      	movs	r3, #15
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_InitTick+0x88>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d02b      	beq.n	80016e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <HAL_InitTick+0x8c>)
 800168e:	681c      	ldr	r4, [r3, #0]
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_InitTick+0x88>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	0019      	movs	r1, r3
 8001696:	23fa      	movs	r3, #250	@ 0xfa
 8001698:	0098      	lsls	r0, r3, #2
 800169a:	f7fe fd3d 	bl	8000118 <__udivsi3>
 800169e:	0003      	movs	r3, r0
 80016a0:	0019      	movs	r1, r3
 80016a2:	0020      	movs	r0, r4
 80016a4:	f7fe fd38 	bl	8000118 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f919 	bl	80018e2 <HAL_SYSTICK_Config>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d112      	bne.n	80016da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d80a      	bhi.n	80016d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	2301      	movs	r3, #1
 80016be:	425b      	negs	r3, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 f8e8 	bl	8001898 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001704 <HAL_InitTick+0x90>)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00d      	b.n	80016ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e008      	b.n	80016ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016da:	230f      	movs	r3, #15
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	e003      	b.n	80016ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	230f      	movs	r3, #15
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b005      	add	sp, #20
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	20000214 	.word	0x20000214
 8001700:	2000020c 	.word	0x2000020c
 8001704:	20000210 	.word	0x20000210

08001708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x1c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_IncTick+0x20>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	18d2      	adds	r2, r2, r3
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_IncTick+0x20>)
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	20000214 	.word	0x20000214
 8001728:	200014b8 	.word	0x200014b8

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b02      	ldr	r3, [pc, #8]	@ (800173c <HAL_GetTick+0x10>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	200014b8 	.word	0x200014b8

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	0002      	movs	r2, r0
 8001748:	1dfb      	adds	r3, r7, #7
 800174a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b7f      	cmp	r3, #127	@ 0x7f
 8001752:	d809      	bhi.n	8001768 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001754:	1dfb      	adds	r3, r7, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	001a      	movs	r2, r3
 800175a:	231f      	movs	r3, #31
 800175c:	401a      	ands	r2, r3
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <__NVIC_EnableIRQ+0x30>)
 8001760:	2101      	movs	r1, #1
 8001762:	4091      	lsls	r1, r2
 8001764:	000a      	movs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	0002      	movs	r2, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b7f      	cmp	r3, #127	@ 0x7f
 8001788:	d828      	bhi.n	80017dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800178a:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <__NVIC_SetPriority+0xd4>)
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	33c0      	adds	r3, #192	@ 0xc0
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	589b      	ldr	r3, [r3, r2]
 800179a:	1dfa      	adds	r2, r7, #7
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	0011      	movs	r1, r2
 80017a0:	2203      	movs	r2, #3
 80017a2:	400a      	ands	r2, r1
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	21ff      	movs	r1, #255	@ 0xff
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	43d2      	mvns	r2, r2
 80017ae:	401a      	ands	r2, r3
 80017b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	019b      	lsls	r3, r3, #6
 80017b6:	22ff      	movs	r2, #255	@ 0xff
 80017b8:	401a      	ands	r2, r3
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	0018      	movs	r0, r3
 80017c0:	2303      	movs	r3, #3
 80017c2:	4003      	ands	r3, r0
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c8:	481f      	ldr	r0, [pc, #124]	@ (8001848 <__NVIC_SetPriority+0xd4>)
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	430a      	orrs	r2, r1
 80017d4:	33c0      	adds	r3, #192	@ 0xc0
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017da:	e031      	b.n	8001840 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <__NVIC_SetPriority+0xd8>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	0019      	movs	r1, r3
 80017e4:	230f      	movs	r3, #15
 80017e6:	400b      	ands	r3, r1
 80017e8:	3b08      	subs	r3, #8
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3306      	adds	r3, #6
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	1dfa      	adds	r2, r7, #7
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	0011      	movs	r1, r2
 80017fc:	2203      	movs	r2, #3
 80017fe:	400a      	ands	r2, r1
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	21ff      	movs	r1, #255	@ 0xff
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	401a      	ands	r2, r3
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	0018      	movs	r0, r3
 800181c:	2303      	movs	r3, #3
 800181e:	4003      	ands	r3, r0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001824:	4809      	ldr	r0, [pc, #36]	@ (800184c <__NVIC_SetPriority+0xd8>)
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	001c      	movs	r4, r3
 800182c:	230f      	movs	r3, #15
 800182e:	4023      	ands	r3, r4
 8001830:	3b08      	subs	r3, #8
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	430a      	orrs	r2, r1
 8001836:	3306      	adds	r3, #6
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	18c3      	adds	r3, r0, r3
 800183c:	3304      	adds	r3, #4
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b003      	add	sp, #12
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	429a      	cmp	r2, r3
 8001862:	d301      	bcc.n	8001868 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001864:	2301      	movs	r3, #1
 8001866:	e010      	b.n	800188a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <SysTick_Config+0x44>)
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	3a01      	subs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001870:	2301      	movs	r3, #1
 8001872:	425b      	negs	r3, r3
 8001874:	2103      	movs	r1, #3
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff ff7c 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x44>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	210f      	movs	r1, #15
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	0002      	movs	r2, r0
 80018ca:	1dfb      	adds	r3, r7, #7
 80018cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff33 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff ffaf 	bl	8001850 <SysTick_Config>
 80018f2:	0003      	movs	r3, r0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e077      	b.n	80019fe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3d      	ldr	r2, [pc, #244]	@ (8001a08 <HAL_DMA_Init+0x10c>)
 8001914:	4694      	mov	ip, r2
 8001916:	4463      	add	r3, ip
 8001918:	2114      	movs	r1, #20
 800191a:	0018      	movs	r0, r3
 800191c:	f7fe fbfc 	bl	8000118 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	009a      	lsls	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2225      	movs	r2, #37	@ 0x25
 800192c:	2102      	movs	r1, #2
 800192e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4934      	ldr	r1, [pc, #208]	@ (8001a0c <HAL_DMA_Init+0x110>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fa8d 	bl	8001e98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	01db      	lsls	r3, r3, #7
 8001986:	429a      	cmp	r2, r3
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	213f      	movs	r1, #63	@ 0x3f
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d011      	beq.n	80019d4 <HAL_DMA_Init+0xd8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d80d      	bhi.n	80019d4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fa98 	bl	8001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	e008      	b.n	80019e6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2225      	movs	r2, #37	@ 0x25
 80019f0:	2101      	movs	r1, #1
 80019f2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	bffdfff8 	.word	0xbffdfff8
 8001a0c:	ffff800f 	.word	0xffff800f

08001a10 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2317      	movs	r3, #23
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2224      	movs	r2, #36	@ 0x24
 8001a2a:	5c9b      	ldrb	r3, [r3, r2]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Start_IT+0x24>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e06f      	b.n	8001b14 <HAL_DMA_Start_IT+0x104>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2224      	movs	r2, #36	@ 0x24
 8001a38:	2101      	movs	r1, #1
 8001a3a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2225      	movs	r2, #37	@ 0x25
 8001a40:	5c9b      	ldrb	r3, [r3, r2]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d157      	bne.n	8001af8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2225      	movs	r2, #37	@ 0x25
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	438a      	bics	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f9d3 	bl	8001e18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	210e      	movs	r1, #14
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00f      	b.n	8001aac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2104      	movs	r1, #4
 8001a98:	438a      	bics	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	210a      	movs	r1, #10
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d008      	beq.n	8001acc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	0049      	lsls	r1, r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ade:	2180      	movs	r1, #128	@ 0x80
 8001ae0:	0049      	lsls	r1, r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00a      	b.n	8001b0e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2224      	movs	r2, #36	@ 0x24
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001b06:	2317      	movs	r3, #23
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001b0e:	2317      	movs	r3, #23
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781b      	ldrb	r3, [r3, #0]
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b006      	add	sp, #24
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e050      	b.n	8001bd0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2225      	movs	r2, #37	@ 0x25
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d008      	beq.n	8001b4c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e041      	b.n	8001bd0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	210e      	movs	r1, #14
 8001b58:	438a      	bics	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	491c      	ldr	r1, [pc, #112]	@ (8001bd8 <HAL_DMA_Abort+0xbc>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2101      	movs	r1, #1
 8001b78:	438a      	bics	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <HAL_DMA_Abort+0xc0>)
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	221c      	movs	r2, #28
 8001b86:	4013      	ands	r3, r2
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <HAL_DMA_Abort+0xc0>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b9a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00c      	beq.n	8001bbe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bae:	490a      	ldr	r1, [pc, #40]	@ (8001bd8 <HAL_DMA_Abort+0xbc>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001bbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2225      	movs	r2, #37	@ 0x25
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2224      	movs	r2, #36	@ 0x24
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	fffffeff 	.word	0xfffffeff
 8001bdc:	40020000 	.word	0x40020000

08001be0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	210f      	movs	r1, #15
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2225      	movs	r2, #37	@ 0x25
 8001bf4:	5c9b      	ldrb	r3, [r3, r2]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d006      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e049      	b.n	8001c9e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	210e      	movs	r1, #14
 8001c16:	438a      	bics	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2101      	movs	r1, #1
 8001c26:	438a      	bics	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c34:	491d      	ldr	r1, [pc, #116]	@ (8001cac <HAL_DMA_Abort_IT+0xcc>)
 8001c36:	400a      	ands	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_DMA_Abort_IT+0xd0>)
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	221c      	movs	r2, #28
 8001c44:	4013      	ands	r3, r2
 8001c46:	2201      	movs	r2, #1
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_DMA_Abort_IT+0xd0>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c6c:	490f      	ldr	r1, [pc, #60]	@ (8001cac <HAL_DMA_Abort_IT+0xcc>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2225      	movs	r2, #37	@ 0x25
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	4798      	blx	r3
    }
  }
  return status;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	fffffeff 	.word	0xfffffeff
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001cbc:	4b55      	ldr	r3, [pc, #340]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	221c      	movs	r2, #28
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d027      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d023      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2220      	movs	r2, #32
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d107      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	438a      	bics	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001d02:	4b44      	ldr	r3, [pc, #272]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	221c      	movs	r2, #28
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2204      	movs	r2, #4
 8001d10:	409a      	lsls	r2, r3
 8001d12:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d100      	bne.n	8001d22 <HAL_DMA_IRQHandler+0x6e>
 8001d20:	e073      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	0010      	movs	r0, r2
 8001d2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001d2c:	e06d      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	221c      	movs	r2, #28
 8001d34:	4013      	ands	r3, r2
 8001d36:	2202      	movs	r2, #2
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d02e      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d02a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2220      	movs	r2, #32
 8001d52:	4013      	ands	r3, r2
 8001d54:	d10b      	bne.n	8001d6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	210a      	movs	r1, #10
 8001d62:	438a      	bics	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2225      	movs	r2, #37	@ 0x25
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	221c      	movs	r2, #28
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	@ 0x24
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03a      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d9e:	e034      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	221c      	movs	r2, #28
 8001da6:	4013      	ands	r3, r2
 8001da8:	2208      	movs	r2, #8
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	d02b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2208      	movs	r2, #8
 8001db8:	4013      	ands	r3, r2
 8001dba:	d027      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	210e      	movs	r1, #14
 8001dc8:	438a      	bics	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	221c      	movs	r2, #28
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2225      	movs	r2, #37	@ 0x25
 8001dec:	2101      	movs	r1, #1
 8001dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	@ 0x24
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	0010      	movs	r0, r2
 8001e08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46c0      	nop			@ (mov r8, r8)
}
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40020000 	.word	0x40020000

08001e18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001e40:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <DMA_SetConfig+0x7c>)
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	221c      	movs	r2, #28
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2201      	movs	r2, #1
 8001e50:	409a      	lsls	r2, r3
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <DMA_SetConfig+0x7c>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d108      	bne.n	8001e7a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e78:	e007      	b.n	8001e8a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	60da      	str	r2, [r3, #12]
}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	40020000 	.word	0x40020000

08001e98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	001a      	movs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	001a      	movs	r2, r3
 8001eba:	23ff      	movs	r3, #255	@ 0xff
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	3b08      	subs	r3, #8
 8001ec0:	2114      	movs	r1, #20
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe f928 	bl	8000118 <__udivsi3>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a07      	ldr	r2, [pc, #28]	@ (8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001ed0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001ee0:	46c0      	nop			@ (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	10008200 	.word	0x10008200
 8001eec:	40020880 	.word	0x40020880

08001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	223f      	movs	r2, #63	@ 0x3f
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f06:	4694      	mov	ip, r2
 8001f08:	4463      	add	r3, ip
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	1000823f 	.word	0x1000823f
 8001f34:	40020940 	.word	0x40020940

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e147      	b.n	80021d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_GPIO_Init+0x28>
 8001f5e:	e138      	b.n	80021d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d005      	beq.n	8001f78 <HAL_GPIO_Init+0x40>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d130      	bne.n	8001fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	409a      	lsls	r2, r3
 8001f86:	0013      	movs	r3, r2
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fae:	2201      	movs	r2, #1
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d017      	beq.n	8002016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2203      	movs	r2, #3
 800201c:	4013      	ands	r3, r2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d123      	bne.n	800206a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	58d3      	ldr	r3, [r2, r3]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2207      	movs	r2, #7
 8002034:	4013      	ands	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2107      	movs	r1, #7
 800204e:	400b      	ands	r3, r1
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	6939      	ldr	r1, [r7, #16]
 8002068:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	43da      	mvns	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	401a      	ands	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	409a      	lsls	r2, r3
 8002090:	0013      	movs	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	23c0      	movs	r3, #192	@ 0xc0
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	4013      	ands	r3, r2
 80020a8:	d100      	bne.n	80020ac <HAL_GPIO_Init+0x174>
 80020aa:	e092      	b.n	80021d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020ac:	4a50      	ldr	r2, [pc, #320]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3318      	adds	r3, #24
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	589b      	ldr	r3, [r3, r2]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2203      	movs	r2, #3
 80020be:	4013      	ands	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	220f      	movs	r2, #15
 80020c4:	409a      	lsls	r2, r3
 80020c6:	0013      	movs	r3, r2
 80020c8:	43da      	mvns	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	23a0      	movs	r3, #160	@ 0xa0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x1ca>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <HAL_GPIO_Init+0x2bc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x1c6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a44      	ldr	r2, [pc, #272]	@ (80021f8 <HAL_GPIO_Init+0x2c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x1c2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a43      	ldr	r2, [pc, #268]	@ (80021fc <HAL_GPIO_Init+0x2c4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x1be>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x1cc>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x1cc>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x1cc>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x1cc>
 8002102:	2300      	movs	r3, #0
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	2103      	movs	r1, #3
 8002108:	400a      	ands	r2, r1
 800210a:	00d2      	lsls	r2, r2, #3
 800210c:	4093      	lsls	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002114:	4936      	ldr	r1, [pc, #216]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3318      	adds	r3, #24
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43da      	mvns	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	035b      	lsls	r3, r3, #13
 800213a:	4013      	ands	r3, r2
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002146:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800214c:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43da      	mvns	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	039b      	lsls	r3, r3, #14
 8002164:	4013      	ands	r3, r2
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002170:	4b1f      	ldr	r3, [pc, #124]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002176:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 8002178:	2384      	movs	r3, #132	@ 0x84
 800217a:	58d3      	ldr	r3, [r2, r3]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43da      	mvns	r2, r3
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800219c:	4914      	ldr	r1, [pc, #80]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 800219e:	2284      	movs	r2, #132	@ 0x84
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80021a4:	4a12      	ldr	r2, [pc, #72]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	58d3      	ldr	r3, [r2, r3]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ca:	4909      	ldr	r1, [pc, #36]	@ (80021f0 <HAL_GPIO_Init+0x2b8>)
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	40da      	lsrs	r2, r3
 80021e0:	1e13      	subs	r3, r2, #0
 80021e2:	d000      	beq.n	80021e6 <HAL_GPIO_Init+0x2ae>
 80021e4:	e6b0      	b.n	8001f48 <HAL_GPIO_Init+0x10>
  }
}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b006      	add	sp, #24
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021800 	.word	0x40021800
 80021f4:	50000400 	.word	0x50000400
 80021f8:	50000800 	.word	0x50000800
 80021fc:	50000c00 	.word	0x50000c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	0008      	movs	r0, r1
 800220a:	0011      	movs	r1, r2
 800220c:	1cbb      	adds	r3, r7, #2
 800220e:	1c02      	adds	r2, r0, #0
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	1c7b      	adds	r3, r7, #1
 8002214:	1c0a      	adds	r2, r1, #0
 8002216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002218:	1c7b      	adds	r3, r7, #1
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002220:	1cbb      	adds	r3, r7, #2
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	1cbb      	adds	r3, r7, #2
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	@ (80022b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800224a:	4013      	ands	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d11f      	bne.n	80022a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	0013      	movs	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	189b      	adds	r3, r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4912      	ldr	r1, [pc, #72]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7fd ff52 	bl	8000118 <__udivsi3>
 8002274:	0003      	movs	r3, r0
 8002276:	3301      	adds	r3, #1
 8002278:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227a:	e008      	b.n	800228e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b01      	subs	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e001      	b.n	800228e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e009      	b.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	401a      	ands	r2, r3
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	429a      	cmp	r2, r3
 800229e:	d0ed      	beq.n	800227c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	40007000 	.word	0x40007000
 80022b0:	fffff9ff 	.word	0xfffff9ff
 80022b4:	2000020c 	.word	0x2000020c
 80022b8:	000f4240 	.word	0x000f4240

080022bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	23e0      	movs	r3, #224	@ 0xe0
 80022c6:	01db      	lsls	r3, r3, #7
 80022c8:	4013      	ands	r3, r2
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e2fe      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x1e>
 80022f0:	e07c      	b.n	80023ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f2:	4bc3      	ldr	r3, [pc, #780]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	@ 0x38
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fc:	4bc0      	ldr	r3, [pc, #768]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2203      	movs	r2, #3
 8002302:	4013      	ands	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x3e>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d002      	beq.n	8002318 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4bb9      	ldr	r3, [pc, #740]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	4013      	ands	r3, r2
 8002322:	d062      	beq.n	80023ea <HAL_RCC_OscConfig+0x116>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d15e      	bne.n	80023ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e2d9      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	025b      	lsls	r3, r3, #9
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x78>
 800233c:	4bb0      	ldr	r3, [pc, #704]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4baf      	ldr	r3, [pc, #700]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e020      	b.n	800238e <HAL_RCC_OscConfig+0xba>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	23a0      	movs	r3, #160	@ 0xa0
 8002352:	02db      	lsls	r3, r3, #11
 8002354:	429a      	cmp	r2, r3
 8002356:	d10e      	bne.n	8002376 <HAL_RCC_OscConfig+0xa2>
 8002358:	4ba9      	ldr	r3, [pc, #676]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4ba8      	ldr	r3, [pc, #672]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800235e:	2180      	movs	r1, #128	@ 0x80
 8002360:	02c9      	lsls	r1, r1, #11
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4ba6      	ldr	r3, [pc, #664]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4ba5      	ldr	r3, [pc, #660]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800236c:	2180      	movs	r1, #128	@ 0x80
 800236e:	0249      	lsls	r1, r1, #9
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e00b      	b.n	800238e <HAL_RCC_OscConfig+0xba>
 8002376:	4ba2      	ldr	r3, [pc, #648]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4ba1      	ldr	r3, [pc, #644]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800237c:	49a1      	ldr	r1, [pc, #644]	@ (8002604 <HAL_RCC_OscConfig+0x330>)
 800237e:	400a      	ands	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	4b9f      	ldr	r3, [pc, #636]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b9e      	ldr	r3, [pc, #632]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002388:	499f      	ldr	r1, [pc, #636]	@ (8002608 <HAL_RCC_OscConfig+0x334>)
 800238a:	400a      	ands	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d014      	beq.n	80023c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f9c9 	bl	800172c <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff f9c4 	bl	800172c <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e298      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b2:	4b93      	ldr	r3, [pc, #588]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xcc>
 80023be:	e015      	b.n	80023ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f9b4 	bl	800172c <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ca:	f7ff f9af 	bl	800172c <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e283      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023dc:	4b88      	ldr	r3, [pc, #544]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0xf6>
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d100      	bne.n	80023f8 <HAL_RCC_OscConfig+0x124>
 80023f6:	e099      	b.n	800252c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f8:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2238      	movs	r2, #56	@ 0x38
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002402:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b10      	cmp	r3, #16
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x144>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d002      	beq.n	800241e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d135      	bne.n	800248a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241e:	4b78      	ldr	r3, [pc, #480]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	@ 0x80
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4013      	ands	r3, r2
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x162>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e256      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a74      	ldr	r2, [pc, #464]	@ (800260c <HAL_RCC_OscConfig+0x338>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	4b6e      	ldr	r3, [pc, #440]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d112      	bne.n	8002478 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002452:	4b6b      	ldr	r3, [pc, #428]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6e      	ldr	r2, [pc, #440]	@ (8002610 <HAL_RCC_OscConfig+0x33c>)
 8002458:	4013      	ands	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	4b67      	ldr	r3, [pc, #412]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002466:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a68      	ldr	r2, [pc, #416]	@ (8002614 <HAL_RCC_OscConfig+0x340>)
 8002472:	40da      	lsrs	r2, r3
 8002474:	4b68      	ldr	r3, [pc, #416]	@ (8002618 <HAL_RCC_OscConfig+0x344>)
 8002476:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002478:	4b68      	ldr	r3, [pc, #416]	@ (800261c <HAL_RCC_OscConfig+0x348>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff f8f9 	bl	8001674 <HAL_InitTick>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d051      	beq.n	800252a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e22c      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d030      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002492:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5e      	ldr	r2, [pc, #376]	@ (8002610 <HAL_RCC_OscConfig+0x33c>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80024a6:	4b56      	ldr	r3, [pc, #344]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b55      	ldr	r3, [pc, #340]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	2180      	movs	r1, #128	@ 0x80
 80024ae:	0049      	lsls	r1, r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff f93a 	bl	800172c <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f935 	bl	800172c <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e209      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4013      	ands	r3, r2
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4a4a      	ldr	r2, [pc, #296]	@ (800260c <HAL_RCC_OscConfig+0x338>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	4b44      	ldr	r3, [pc, #272]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024f4:	4b42      	ldr	r3, [pc, #264]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	4949      	ldr	r1, [pc, #292]	@ (8002620 <HAL_RCC_OscConfig+0x34c>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff f914 	bl	800172c <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff f90f 	bl	800172c <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1e3      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251c:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4013      	ands	r3, r2
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x236>
 8002528:	e000      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	4013      	ands	r3, r2
 8002534:	d047      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002536:	4b32      	ldr	r3, [pc, #200]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2238      	movs	r2, #56	@ 0x38
 800253c:	4013      	ands	r3, r2
 800253e:	2b18      	cmp	r3, #24
 8002540:	d10a      	bne.n	8002558 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002542:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d03c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d138      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e1c5      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d019      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002562:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002564:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002566:	2101      	movs	r1, #1
 8002568:	430a      	orrs	r2, r1
 800256a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff f8de 	bl	800172c <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002576:	f7ff f8d9 	bl	800172c <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1ad      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d0f1      	beq.n	8002576 <HAL_RCC_OscConfig+0x2a2>
 8002592:	e018      	b.n	80025c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 8002596:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 800259a:	2101      	movs	r1, #1
 800259c:	438a      	bics	r2, r1
 800259e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff f8c4 	bl	800172c <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7ff f8bf 	bl	800172c <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e193      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f1      	bne.n	80025aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2204      	movs	r2, #4
 80025cc:	4013      	ands	r3, r2
 80025ce:	d100      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2fe>
 80025d0:	e0c6      	b.n	8002760 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	231f      	movs	r3, #31
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2238      	movs	r2, #56	@ 0x38
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d11e      	bne.n	8002624 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x31e>
 80025f0:	e0b6      	b.n	8002760 <HAL_RCC_OscConfig+0x48c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d000      	beq.n	80025fc <HAL_RCC_OscConfig+0x328>
 80025fa:	e0b1      	b.n	8002760 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e171      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
 8002600:	40021000 	.word	0x40021000
 8002604:	fffeffff 	.word	0xfffeffff
 8002608:	fffbffff 	.word	0xfffbffff
 800260c:	ffff80ff 	.word	0xffff80ff
 8002610:	ffffc7ff 	.word	0xffffc7ff
 8002614:	00f42400 	.word	0x00f42400
 8002618:	2000020c 	.word	0x2000020c
 800261c:	20000210 	.word	0x20000210
 8002620:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002624:	4bb1      	ldr	r3, [pc, #708]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	4013      	ands	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x360>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x362>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d011      	beq.n	800265e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4bac      	ldr	r3, [pc, #688]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 800263c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800263e:	4bab      	ldr	r3, [pc, #684]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	0549      	lsls	r1, r1, #21
 8002644:	430a      	orrs	r2, r1
 8002646:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002648:	4ba8      	ldr	r3, [pc, #672]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 800264a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	055b      	lsls	r3, r3, #21
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002656:	231f      	movs	r3, #31
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265e:	4ba4      	ldr	r3, [pc, #656]	@ (80028f0 <HAL_RCC_OscConfig+0x61c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d11a      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266a:	4ba1      	ldr	r3, [pc, #644]	@ (80028f0 <HAL_RCC_OscConfig+0x61c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4ba0      	ldr	r3, [pc, #640]	@ (80028f0 <HAL_RCC_OscConfig+0x61c>)
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	0049      	lsls	r1, r1, #1
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002678:	f7ff f858 	bl	800172c <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7ff f853 	bl	800172c <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e127      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b96      	ldr	r3, [pc, #600]	@ (80028f0 <HAL_RCC_OscConfig+0x61c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3e2>
 80026a8:	4b90      	ldr	r3, [pc, #576]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ac:	4b8f      	ldr	r3, [pc, #572]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	430a      	orrs	r2, r1
 80026b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026b4:	e01c      	b.n	80026f0 <HAL_RCC_OscConfig+0x41c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b05      	cmp	r3, #5
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x404>
 80026be:	4b8b      	ldr	r3, [pc, #556]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c2:	4b8a      	ldr	r3, [pc, #552]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026c4:	2104      	movs	r1, #4
 80026c6:	430a      	orrs	r2, r1
 80026c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026ca:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ce:	4b87      	ldr	r3, [pc, #540]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x41c>
 80026d8:	4b84      	ldr	r3, [pc, #528]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026dc:	4b83      	ldr	r3, [pc, #524]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026de:	2101      	movs	r1, #1
 80026e0:	438a      	bics	r2, r1
 80026e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026e4:	4b81      	ldr	r3, [pc, #516]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026e8:	4b80      	ldr	r3, [pc, #512]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80026ea:	2104      	movs	r1, #4
 80026ec:	438a      	bics	r2, r1
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d014      	beq.n	8002722 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7ff f818 	bl	800172c <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	e009      	b.n	8002716 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7ff f813 	bl	800172c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	4a79      	ldr	r2, [pc, #484]	@ (80028f4 <HAL_RCC_OscConfig+0x620>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0e6      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	4b75      	ldr	r3, [pc, #468]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2202      	movs	r2, #2
 800271c:	4013      	ands	r3, r2
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x42e>
 8002720:	e013      	b.n	800274a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff f803 	bl	800172c <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272a:	e009      	b.n	8002740 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7fe fffe 	bl	800172c <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	4a6f      	ldr	r2, [pc, #444]	@ (80028f4 <HAL_RCC_OscConfig+0x620>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0d1      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002740:	4b6a      	ldr	r3, [pc, #424]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002754:	4b65      	ldr	r3, [pc, #404]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002758:	4b64      	ldr	r3, [pc, #400]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 800275a:	4967      	ldr	r1, [pc, #412]	@ (80028f8 <HAL_RCC_OscConfig+0x624>)
 800275c:	400a      	ands	r2, r1
 800275e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <HAL_RCC_OscConfig+0x496>
 8002768:	e0bb      	b.n	80028e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276a:	4b60      	ldr	r3, [pc, #384]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2238      	movs	r2, #56	@ 0x38
 8002770:	4013      	ands	r3, r2
 8002772:	2b10      	cmp	r3, #16
 8002774:	d100      	bne.n	8002778 <HAL_RCC_OscConfig+0x4a4>
 8002776:	e07b      	b.n	8002870 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d156      	bne.n	800282e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b5a      	ldr	r3, [pc, #360]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b59      	ldr	r3, [pc, #356]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002786:	495d      	ldr	r1, [pc, #372]	@ (80028fc <HAL_RCC_OscConfig+0x628>)
 8002788:	400a      	ands	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe ffce 	bl	800172c <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe ffc9 	bl	800172c <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e09d      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a8:	4b50      	ldr	r3, [pc, #320]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	049b      	lsls	r3, r3, #18
 80027b0:	4013      	ands	r3, r2
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b4:	4b4d      	ldr	r3, [pc, #308]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a51      	ldr	r2, [pc, #324]	@ (8002900 <HAL_RCC_OscConfig+0x62c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1a      	ldr	r2, [r3, #32]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e0:	431a      	orrs	r2, r3
 80027e2:	4b42      	ldr	r3, [pc, #264]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b40      	ldr	r3, [pc, #256]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027ee:	2180      	movs	r1, #128	@ 0x80
 80027f0:	0449      	lsls	r1, r1, #17
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027f6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b3c      	ldr	r3, [pc, #240]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 80027fc:	2180      	movs	r1, #128	@ 0x80
 80027fe:	0549      	lsls	r1, r1, #21
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe ff92 	bl	800172c <HAL_GetTick>
 8002808:	0003      	movs	r3, r0
 800280a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe ff8d 	bl	800172c <HAL_GetTick>
 8002812:	0002      	movs	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e061      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002820:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	049b      	lsls	r3, r3, #18
 8002828:	4013      	ands	r3, r2
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x53a>
 800282c:	e059      	b.n	80028e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002834:	4931      	ldr	r1, [pc, #196]	@ (80028fc <HAL_RCC_OscConfig+0x628>)
 8002836:	400a      	ands	r2, r1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe ff77 	bl	800172c <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe ff72 	bl	800172c <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e046      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	049b      	lsls	r3, r3, #18
 800285e:	4013      	ands	r3, r2
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 8002868:	4926      	ldr	r1, [pc, #152]	@ (8002904 <HAL_RCC_OscConfig+0x630>)
 800286a:	400a      	ands	r2, r1
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	e038      	b.n	80028e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e033      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800287c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x618>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2203      	movs	r2, #3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	429a      	cmp	r2, r3
 800288e:	d126      	bne.n	80028de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2270      	movs	r2, #112	@ 0x70
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11f      	bne.n	80028de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	23fe      	movs	r3, #254	@ 0xfe
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	401a      	ands	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d116      	bne.n	80028de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	23f8      	movs	r3, #248	@ 0xf8
 80028b4:	039b      	lsls	r3, r3, #14
 80028b6:	401a      	ands	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d10e      	bne.n	80028de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	23e0      	movs	r3, #224	@ 0xe0
 80028c4:	051b      	lsls	r3, r3, #20
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	0f5b      	lsrs	r3, r3, #29
 80028d4:	075a      	lsls	r2, r3, #29
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b008      	add	sp, #32
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
 80028f4:	00001388 	.word	0x00001388
 80028f8:	efffffff 	.word	0xefffffff
 80028fc:	feffffff 	.word	0xfeffffff
 8002900:	11c1808c 	.word	0x11c1808c
 8002904:	eefefffc 	.word	0xeefefffc

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0e9      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2207      	movs	r2, #7
 8002922:	4013      	ands	r3, r2
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d91e      	bls.n	8002968 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2207      	movs	r2, #7
 8002930:	4393      	bics	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	4b70      	ldr	r3, [pc, #448]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800293c:	f7fe fef6 	bl	800172c <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002944:	e009      	b.n	800295a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002946:	f7fe fef1 	bl	800172c <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	4a6a      	ldr	r2, [pc, #424]	@ (8002afc <HAL_RCC_ClockConfig+0x1f4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0ca      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800295a:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2207      	movs	r2, #7
 8002960:	4013      	ands	r3, r2
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	d015      	beq.n	800299e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	4013      	ands	r3, r2
 800297a:	d006      	beq.n	800298a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800297c:	4b60      	ldr	r3, [pc, #384]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b5f      	ldr	r3, [pc, #380]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002982:	21e0      	movs	r1, #224	@ 0xe0
 8002984:	01c9      	lsls	r1, r1, #7
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b04 <HAL_RCC_ClockConfig+0x1fc>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b59      	ldr	r3, [pc, #356]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	430a      	orrs	r2, r1
 800299c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	d057      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b0:	4b53      	ldr	r3, [pc, #332]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	4013      	ands	r3, r2
 80029ba:	d12b      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e097      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	049b      	lsls	r3, r3, #18
 80029d0:	4013      	ands	r3, r2
 80029d2:	d11f      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e08b      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e0:	4b47      	ldr	r3, [pc, #284]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4013      	ands	r3, r2
 80029ea:	d113      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e07f      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f8:	4b41      	ldr	r3, [pc, #260]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 80029fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fc:	2202      	movs	r2, #2
 80029fe:	4013      	ands	r3, r2
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e074      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b3e      	ldr	r3, [pc, #248]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e06d      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a14:	4b3a      	ldr	r3, [pc, #232]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4b37      	ldr	r3, [pc, #220]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a28:	f7fe fe80 	bl	800172c <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fe fe7b 	bl	800172c <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002afc <HAL_RCC_ClockConfig+0x1f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e054      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2238      	movs	r2, #56	@ 0x38
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ec      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d21e      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b24      	ldr	r3, [pc, #144]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fe58 	bl	800172c <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a80:	e009      	b.n	8002a96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f7fe fe53 	bl	800172c <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002afc <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e02c      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a96:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002aae:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	@ (8002b08 <HAL_RCC_ClockConfig+0x200>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ac2:	f000 f829 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ac6:	0001      	movs	r1, r0
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	220f      	movs	r2, #15
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_RCC_ClockConfig+0x204>)
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	58d3      	ldr	r3, [r2, r3]
 8002ad8:	221f      	movs	r2, #31
 8002ada:	4013      	ands	r3, r2
 8002adc:	000a      	movs	r2, r1
 8002ade:	40da      	lsrs	r2, r3
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_ClockConfig+0x208>)
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x20c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fe fdc3 	bl	8001674 <HAL_InitTick>
 8002aee:	0003      	movs	r3, r0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b004      	add	sp, #16
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40022000 	.word	0x40022000
 8002afc:	00001388 	.word	0x00001388
 8002b00:	40021000 	.word	0x40021000
 8002b04:	fffff0ff 	.word	0xfffff0ff
 8002b08:	ffff8fff 	.word	0xffff8fff
 8002b0c:	08005190 	.word	0x08005190
 8002b10:	2000020c 	.word	0x2000020c
 8002b14:	20000210 	.word	0x20000210

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2238      	movs	r2, #56	@ 0x38
 8002b24:	4013      	ands	r3, r2
 8002b26:	d10f      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b28:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0adb      	lsrs	r3, r3, #11
 8002b2e:	2207      	movs	r2, #7
 8002b30:	4013      	ands	r3, r2
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	0013      	movs	r3, r2
 8002b38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	4835      	ldr	r0, [pc, #212]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b3e:	f7fd faeb 	bl	8000118 <__udivsi3>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e05d      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2238      	movs	r2, #56	@ 0x38
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d102      	bne.n	8002b5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b30      	ldr	r3, [pc, #192]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e054      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2238      	movs	r2, #56	@ 0x38
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d138      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b66:	4b2a      	ldr	r3, [pc, #168]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b70:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	2207      	movs	r2, #7
 8002b78:	4013      	ands	r3, r2
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	4824      	ldr	r0, [pc, #144]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b88:	f7fd fac6 	bl	8000118 <__udivsi3>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	0019      	movs	r1, r3
 8002b90:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	227f      	movs	r2, #127	@ 0x7f
 8002b98:	4013      	ands	r3, r2
 8002b9a:	434b      	muls	r3, r1
 8002b9c:	617b      	str	r3, [r7, #20]
        break;
 8002b9e:	e00d      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	481c      	ldr	r0, [pc, #112]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ba4:	f7fd fab8 	bl	8000118 <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	0019      	movs	r1, r3
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	227f      	movs	r2, #127	@ 0x7f
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	434b      	muls	r3, r1
 8002bb8:	617b      	str	r3, [r7, #20]
        break;
 8002bba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0f5b      	lsrs	r3, r3, #29
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f7fd faa3 	bl	8000118 <__udivsi3>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2238      	movs	r2, #56	@ 0x38
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d103      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2238      	movs	r2, #56	@ 0x38
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b18      	cmp	r3, #24
 8002bf6:	d103      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002bf8:	23fa      	movs	r3, #250	@ 0xfa
 8002bfa:	01db      	lsls	r3, r3, #7
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e001      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c04:	693b      	ldr	r3, [r7, #16]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	40021000 	.word	0x40021000
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b02      	ldr	r3, [pc, #8]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	2000020c 	.word	0x2000020c

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c34:	f7ff fff2 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c38:	0004      	movs	r4, r0
 8002c3a:	f7ff fb3f 	bl	80022bc <LL_RCC_GetAPB1Prescaler>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	0b1a      	lsrs	r2, r3, #12
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	58d3      	ldr	r3, [r2, r3]
 8002c48:	221f      	movs	r2, #31
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	40dc      	lsrs	r4, r3
 8002c4e:	0023      	movs	r3, r4
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bdb0      	pop	{r4, r5, r7, pc}
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	080051d0 	.word	0x080051d0

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c64:	2313      	movs	r3, #19
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c6c:	2312      	movs	r3, #18
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c80:	e0a3      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2011      	movs	r0, #17
 8002c84:	183b      	adds	r3, r7, r0
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8a:	4bc3      	ldr	r3, [pc, #780]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c8e:	2380      	movs	r3, #128	@ 0x80
 8002c90:	055b      	lsls	r3, r3, #21
 8002c92:	4013      	ands	r3, r2
 8002c94:	d110      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c96:	4bc0      	ldr	r3, [pc, #768]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c9a:	4bbf      	ldr	r3, [pc, #764]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9c:	2180      	movs	r1, #128	@ 0x80
 8002c9e:	0549      	lsls	r1, r1, #21
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ca4:	4bbc      	ldr	r3, [pc, #752]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4bb7      	ldr	r3, [pc, #732]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	0049      	lsls	r1, r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fd31 	bl	800172c <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe fd2c 	bl	800172c <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d904      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cde:	2313      	movs	r3, #19
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	701a      	strb	r2, [r3, #0]
        break;
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce8:	4bac      	ldr	r3, [pc, #688]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d0ed      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002cf4:	2313      	movs	r3, #19
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d154      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d02:	23c0      	movs	r3, #192	@ 0xc0
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d014      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	4aa0      	ldr	r2, [pc, #640]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	4b9c      	ldr	r3, [pc, #624]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d28:	4b9b      	ldr	r3, [pc, #620]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d2a:	2180      	movs	r1, #128	@ 0x80
 8002d2c:	0249      	lsls	r1, r1, #9
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d32:	4b99      	ldr	r3, [pc, #612]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d36:	4b98      	ldr	r3, [pc, #608]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d38:	499a      	ldr	r1, [pc, #616]	@ (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d3e:	4b96      	ldr	r3, [pc, #600]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d016      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fcee 	bl	800172c <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	e00c      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fce9 	bl	800172c <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	4a91      	ldr	r2, [pc, #580]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d904      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d66:	2313      	movs	r3, #19
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	701a      	strb	r2, [r3, #0]
            break;
 8002d6e:	e004      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d70:	4b89      	ldr	r3, [pc, #548]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	2202      	movs	r2, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d0ed      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d7a:	2313      	movs	r3, #19
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d84:	4b84      	ldr	r3, [pc, #528]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	4a85      	ldr	r2, [pc, #532]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d92:	4b81      	ldr	r3, [pc, #516]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d98:	e00c      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9a:	2312      	movs	r3, #18
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2213      	movs	r2, #19
 8002da0:	18ba      	adds	r2, r7, r2
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e005      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	2312      	movs	r3, #18
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2213      	movs	r2, #19
 8002dae:	18ba      	adds	r2, r7, r2
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db4:	2311      	movs	r3, #17
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dc2:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc4:	4979      	ldr	r1, [pc, #484]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd4:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4393      	bics	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2202      	movs	r2, #2
 8002dee:	4013      	ands	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df2:	4b69      	ldr	r3, [pc, #420]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	220c      	movs	r2, #12
 8002df8:	4393      	bics	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b65      	ldr	r3, [pc, #404]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e10:	4b61      	ldr	r3, [pc, #388]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	4a66      	ldr	r2, [pc, #408]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e30:	4b59      	ldr	r3, [pc, #356]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	4b56      	ldr	r3, [pc, #344]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	@ 0x80
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e50:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	4a58      	ldr	r2, [pc, #352]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	4a52      	ldr	r2, [pc, #328]	@ (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b46      	ldr	r3, [pc, #280]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	@ 0x80
 8002e88:	01db      	lsls	r3, r3, #7
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d015      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8e:	4b42      	ldr	r3, [pc, #264]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	0899      	lsrs	r1, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002eac:	4b3a      	ldr	r3, [pc, #232]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	0249      	lsls	r1, r1, #9
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	031b      	lsls	r3, r3, #12
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec6:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	@ 0x80
 8002ee0:	039b      	lsls	r3, r3, #14
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	4a35      	ldr	r2, [pc, #212]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ef4:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	03db      	lsls	r3, r3, #15
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d106      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0c:	2180      	movs	r1, #128	@ 0x80
 8002f0e:	0449      	lsls	r1, r1, #17
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	03db      	lsls	r3, r3, #15
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d016      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	045b      	lsls	r3, r3, #17
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f46:	2180      	movs	r1, #128	@ 0x80
 8002f48:	0449      	lsls	r1, r1, #17
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	4013      	ands	r3, r2
 8002f58:	d016      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	01db      	lsls	r3, r3, #7
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d106      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f80:	2180      	movs	r1, #128	@ 0x80
 8002f82:	0249      	lsls	r1, r1, #9
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f88:	2312      	movs	r3, #18
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	781b      	ldrb	r3, [r3, #0]
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b006      	add	sp, #24
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	fffffcff 	.word	0xfffffcff
 8002fa4:	fffeffff 	.word	0xfffeffff
 8002fa8:	00001388 	.word	0x00001388
 8002fac:	efffffff 	.word	0xefffffff
 8002fb0:	fffff3ff 	.word	0xfffff3ff
 8002fb4:	fff3ffff 	.word	0xfff3ffff
 8002fb8:	ffcfffff 	.word	0xffcfffff
 8002fbc:	ffffcfff 	.word	0xffffcfff
 8002fc0:	ffbfffff 	.word	0xffbfffff
 8002fc4:	feffffff 	.word	0xfeffffff
 8002fc8:	ffff3fff 	.word	0xffff3fff

08002fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e04a      	b.n	8003074 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	223d      	movs	r2, #61	@ 0x3d
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	223c      	movs	r2, #60	@ 0x3c
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7fd fd9d 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223d      	movs	r2, #61	@ 0x3d
 8002ffe:	2102      	movs	r1, #2
 8003000:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	0019      	movs	r1, r3
 800300c:	0010      	movs	r0, r2
 800300e:	f000 f95f 	bl	80032d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2248      	movs	r2, #72	@ 0x48
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223e      	movs	r2, #62	@ 0x3e
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223f      	movs	r2, #63	@ 0x3f
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2241      	movs	r2, #65	@ 0x41
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2242      	movs	r2, #66	@ 0x42
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2243      	movs	r2, #67	@ 0x43
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2244      	movs	r2, #68	@ 0x44
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2245      	movs	r2, #69	@ 0x45
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2246      	movs	r2, #70	@ 0x46
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2247      	movs	r2, #71	@ 0x47
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	223d      	movs	r2, #61	@ 0x3d
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	223d      	movs	r2, #61	@ 0x3d
 8003088:	5c9b      	ldrb	r3, [r3, r2]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e03a      	b.n	800310a <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	223d      	movs	r2, #61	@ 0x3d
 8003098:	2102      	movs	r1, #2
 800309a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003114 <HAL_TIM_Base_Start+0x98>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00f      	beq.n	80030c6 <HAL_TIM_Base_Start+0x4a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_Base_Start+0x4a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <HAL_TIM_Base_Start+0x9c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_Base_Start+0x4a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a16      	ldr	r2, [pc, #88]	@ (800311c <HAL_TIM_Base_Start+0xa0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d116      	bne.n	80030f4 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <HAL_TIM_Base_Start+0xa4>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d016      	beq.n	8003106 <HAL_TIM_Base_Start+0x8a>
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	025b      	lsls	r3, r3, #9
 80030de:	429a      	cmp	r2, r3
 80030e0:	d011      	beq.n	8003106 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2101      	movs	r1, #1
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	e008      	b.n	8003106 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e000      	b.n	8003108 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40000400 	.word	0x40000400
 800311c:	40014000 	.word	0x40014000
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	230f      	movs	r3, #15
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	223c      	movs	r2, #60	@ 0x3c
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x20>
 8003140:	2302      	movs	r3, #2
 8003142:	e0bc      	b.n	80032be <HAL_TIM_ConfigClockSource+0x19a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223c      	movs	r2, #60	@ 0x3c
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	223d      	movs	r2, #61	@ 0x3d
 8003150:	2102      	movs	r1, #2
 8003152:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4a5a      	ldr	r2, [pc, #360]	@ (80032c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4a59      	ldr	r2, [pc, #356]	@ (80032cc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2280      	movs	r2, #128	@ 0x80
 800317a:	0192      	lsls	r2, r2, #6
 800317c:	4293      	cmp	r3, r2
 800317e:	d040      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0xde>
 8003180:	2280      	movs	r2, #128	@ 0x80
 8003182:	0192      	lsls	r2, r2, #6
 8003184:	4293      	cmp	r3, r2
 8003186:	d900      	bls.n	800318a <HAL_TIM_ConfigClockSource+0x66>
 8003188:	e088      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	0152      	lsls	r2, r2, #5
 800318e:	4293      	cmp	r3, r2
 8003190:	d100      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x70>
 8003192:	e088      	b.n	80032a6 <HAL_TIM_ConfigClockSource+0x182>
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	0152      	lsls	r2, r2, #5
 8003198:	4293      	cmp	r3, r2
 800319a:	d900      	bls.n	800319e <HAL_TIM_ConfigClockSource+0x7a>
 800319c:	e07e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 800319e:	2b70      	cmp	r3, #112	@ 0x70
 80031a0:	d018      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xb0>
 80031a2:	d900      	bls.n	80031a6 <HAL_TIM_ConfigClockSource+0x82>
 80031a4:	e07a      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031a6:	2b60      	cmp	r3, #96	@ 0x60
 80031a8:	d04f      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x126>
 80031aa:	d900      	bls.n	80031ae <HAL_TIM_ConfigClockSource+0x8a>
 80031ac:	e076      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031ae:	2b50      	cmp	r3, #80	@ 0x50
 80031b0:	d03b      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x106>
 80031b2:	d900      	bls.n	80031b6 <HAL_TIM_ConfigClockSource+0x92>
 80031b4:	e072      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d057      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x146>
 80031ba:	d900      	bls.n	80031be <HAL_TIM_ConfigClockSource+0x9a>
 80031bc:	e06e      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031be:	2b30      	cmp	r3, #48	@ 0x30
 80031c0:	d063      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x166>
 80031c2:	d86b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d060      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x166>
 80031c8:	d868      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x178>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d05d      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x166>
 80031ce:	2b10      	cmp	r3, #16
 80031d0:	d05b      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x166>
 80031d2:	e063      	b.n	800329c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e4:	f000 f97e 	bl	80034e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2277      	movs	r2, #119	@ 0x77
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]
      break;
 8003200:	e052      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003212:	f000 f967 	bl	80034e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	01c9      	lsls	r1, r1, #7
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
      break;
 8003228:	e03e      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	001a      	movs	r2, r3
 8003238:	f000 f8d8 	bl	80033ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2150      	movs	r1, #80	@ 0x50
 8003242:	0018      	movs	r0, r3
 8003244:	f000 f932 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8003248:	e02e      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	001a      	movs	r2, r3
 8003258:	f000 f8f6 	bl	8003448 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2160      	movs	r1, #96	@ 0x60
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f922 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8003268:	e01e      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	001a      	movs	r2, r3
 8003278:	f000 f8b8 	bl	80033ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	@ 0x40
 8003282:	0018      	movs	r0, r3
 8003284:	f000 f912 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 8003288:	e00e      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0019      	movs	r1, r3
 8003294:	0010      	movs	r0, r2
 8003296:	f000 f909 	bl	80034ac <TIM_ITRx_SetConfig>
      break;
 800329a:	e005      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800329c:	230f      	movs	r3, #15
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
      break;
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032a6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	223d      	movs	r2, #61	@ 0x3d
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	223c      	movs	r2, #60	@ 0x3c
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

  return status;
 80032b8:	230f      	movs	r3, #15
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	ffceff88 	.word	0xffceff88
 80032cc:	ffff00ff 	.word	0xffff00ff

080032d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a3b      	ldr	r2, [pc, #236]	@ (80033d0 <TIM_Base_SetConfig+0x100>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d008      	beq.n	80032fa <TIM_Base_SetConfig+0x2a>
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x2a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a37      	ldr	r2, [pc, #220]	@ (80033d4 <TIM_Base_SetConfig+0x104>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2270      	movs	r2, #112	@ 0x70
 80032fe:	4393      	bics	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a30      	ldr	r2, [pc, #192]	@ (80033d0 <TIM_Base_SetConfig+0x100>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d018      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	05db      	lsls	r3, r3, #23
 800331a:	429a      	cmp	r2, r3
 800331c:	d013      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2c      	ldr	r2, [pc, #176]	@ (80033d4 <TIM_Base_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2b      	ldr	r2, [pc, #172]	@ (80033d8 <TIM_Base_SetConfig+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <TIM_Base_SetConfig+0x10c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <TIM_Base_SetConfig+0x110>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x76>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <TIM_Base_SetConfig+0x114>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a27      	ldr	r2, [pc, #156]	@ (80033e8 <TIM_Base_SetConfig+0x118>)
 800334a:	4013      	ands	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2280      	movs	r2, #128	@ 0x80
 800335c:	4393      	bics	r3, r2
 800335e:	001a      	movs	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <TIM_Base_SetConfig+0x100>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_Base_SetConfig+0xce>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <TIM_Base_SetConfig+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0xce>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a13      	ldr	r2, [pc, #76]	@ (80033e0 <TIM_Base_SetConfig+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0xce>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a12      	ldr	r2, [pc, #72]	@ (80033e4 <TIM_Base_SetConfig+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d103      	bne.n	80033a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2201      	movs	r2, #1
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2201      	movs	r2, #1
 80033be:	4393      	bics	r3, r2
 80033c0:	001a      	movs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
  }
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	40012c00 	.word	0x40012c00
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40002000 	.word	0x40002000
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	fffffcff 	.word	0xfffffcff

080033ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	2201      	movs	r2, #1
 8003404:	4393      	bics	r3, r2
 8003406:	001a      	movs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	22f0      	movs	r2, #240	@ 0xf0
 8003416:	4393      	bics	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	220a      	movs	r2, #10
 8003428:	4393      	bics	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bd80      	pop	{r7, pc}

08003448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	2210      	movs	r2, #16
 8003460:	4393      	bics	r3, r2
 8003462:	001a      	movs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4a0d      	ldr	r2, [pc, #52]	@ (80034a8 <TIM_TI2_ConfigInputStage+0x60>)
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	031b      	lsls	r3, r3, #12
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	22a0      	movs	r2, #160	@ 0xa0
 8003484:	4393      	bics	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b006      	add	sp, #24
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	ffff0fff 	.word	0xffff0fff

080034ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a08      	ldr	r2, [pc, #32]	@ (80034e0 <TIM_ITRx_SetConfig+0x34>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	2207      	movs	r2, #7
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	609a      	str	r2, [r3, #8]
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	ffcfff8f 	.word	0xffcfff8f

080034e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <TIM_ETR_SetConfig+0x3c>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	431a      	orrs	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b006      	add	sp, #24
 800351e:	bd80      	pop	{r7, pc}
 8003520:	ffff00ff 	.word	0xffff00ff

08003524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	223c      	movs	r2, #60	@ 0x3c
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e055      	b.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223c      	movs	r2, #60	@ 0x3c
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	223d      	movs	r2, #61	@ 0x3d
 8003548:	2102      	movs	r1, #2
 800354a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d108      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800356a:	4013      	ands	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2270      	movs	r2, #112	@ 0x70
 800357c:	4393      	bics	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a16      	ldr	r2, [pc, #88]	@ (80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	05db      	lsls	r3, r3, #23
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d009      	beq.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2280      	movs	r2, #128	@ 0x80
 80035c0:	4393      	bics	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223d      	movs	r2, #61	@ 0x3d
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	223c      	movs	r2, #60	@ 0x3c
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b004      	add	sp, #16
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	ff0fffff 	.word	0xff0fffff
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40014000 	.word	0x40014000

08003600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e046      	b.n	80036a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2288      	movs	r2, #136	@ 0x88
 8003616:	589b      	ldr	r3, [r3, r2]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2284      	movs	r2, #132	@ 0x84
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f7fd fb9c 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2288      	movs	r2, #136	@ 0x88
 8003630:	2124      	movs	r1, #36	@ 0x24
 8003632:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	438a      	bics	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 fe28 	bl	80042a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fb66 	bl	8003d28 <UART_SetConfig>
 800365c:	0003      	movs	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e01c      	b.n	80036a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	490d      	ldr	r1, [pc, #52]	@ (80036a8 <HAL_UART_Init+0xa8>)
 8003672:	400a      	ands	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	212a      	movs	r1, #42	@ 0x2a
 8003682:	438a      	bics	r2, r1
 8003684:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 feb7 	bl	800440c <UART_CheckIdleState>
 800369e:	0003      	movs	r3, r0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	ffffb7ff 	.word	0xffffb7ff

080036ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	b0aa      	sub	sp, #168	@ 0xa8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	22a4      	movs	r2, #164	@ 0xa4
 80036bc:	18b9      	adds	r1, r7, r2
 80036be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	20a0      	movs	r0, #160	@ 0xa0
 80036c8:	1839      	adds	r1, r7, r0
 80036ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	249c      	movs	r4, #156	@ 0x9c
 80036d4:	1939      	adds	r1, r7, r4
 80036d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036d8:	0011      	movs	r1, r2
 80036da:	18bb      	adds	r3, r7, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4aa2      	ldr	r2, [pc, #648]	@ (8003968 <HAL_UART_IRQHandler+0x2bc>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	2298      	movs	r2, #152	@ 0x98
 80036e4:	18bd      	adds	r5, r7, r2
 80036e6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80036e8:	18bb      	adds	r3, r7, r2
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11a      	bne.n	8003726 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036f0:	187b      	adds	r3, r7, r1
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2220      	movs	r2, #32
 80036f6:	4013      	ands	r3, r2
 80036f8:	d015      	beq.n	8003726 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036fa:	183b      	adds	r3, r7, r0
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	4013      	ands	r3, r2
 8003702:	d105      	bne.n	8003710 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003704:	193b      	adds	r3, r7, r4
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	055b      	lsls	r3, r3, #21
 800370c:	4013      	ands	r3, r2
 800370e:	d00a      	beq.n	8003726 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	2b00      	cmp	r3, #0
 8003716:	d100      	bne.n	800371a <HAL_UART_IRQHandler+0x6e>
 8003718:	e2dc      	b.n	8003cd4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	0010      	movs	r0, r2
 8003722:	4798      	blx	r3
      }
      return;
 8003724:	e2d6      	b.n	8003cd4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003726:	2398      	movs	r3, #152	@ 0x98
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d100      	bne.n	8003732 <HAL_UART_IRQHandler+0x86>
 8003730:	e122      	b.n	8003978 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003732:	239c      	movs	r3, #156	@ 0x9c
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a8c      	ldr	r2, [pc, #560]	@ (800396c <HAL_UART_IRQHandler+0x2c0>)
 800373a:	4013      	ands	r3, r2
 800373c:	d106      	bne.n	800374c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800373e:	23a0      	movs	r3, #160	@ 0xa0
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a8a      	ldr	r2, [pc, #552]	@ (8003970 <HAL_UART_IRQHandler+0x2c4>)
 8003746:	4013      	ands	r3, r2
 8003748:	d100      	bne.n	800374c <HAL_UART_IRQHandler+0xa0>
 800374a:	e115      	b.n	8003978 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800374c:	23a4      	movs	r3, #164	@ 0xa4
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	d012      	beq.n	800377e <HAL_UART_IRQHandler+0xd2>
 8003758:	23a0      	movs	r3, #160	@ 0xa0
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2201      	movs	r2, #1
 800376c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2290      	movs	r2, #144	@ 0x90
 8003772:	589b      	ldr	r3, [r3, r2]
 8003774:	2201      	movs	r2, #1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2190      	movs	r1, #144	@ 0x90
 800377c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800377e:	23a4      	movs	r3, #164	@ 0xa4
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d011      	beq.n	80037ae <HAL_UART_IRQHandler+0x102>
 800378a:	239c      	movs	r3, #156	@ 0x9c
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2202      	movs	r2, #2
 800379c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2290      	movs	r2, #144	@ 0x90
 80037a2:	589b      	ldr	r3, [r3, r2]
 80037a4:	2204      	movs	r2, #4
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2190      	movs	r1, #144	@ 0x90
 80037ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ae:	23a4      	movs	r3, #164	@ 0xa4
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2204      	movs	r2, #4
 80037b6:	4013      	ands	r3, r2
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x132>
 80037ba:	239c      	movs	r3, #156	@ 0x9c
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00b      	beq.n	80037de <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2204      	movs	r2, #4
 80037cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2290      	movs	r2, #144	@ 0x90
 80037d2:	589b      	ldr	r3, [r3, r2]
 80037d4:	2202      	movs	r2, #2
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2190      	movs	r1, #144	@ 0x90
 80037dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037de:	23a4      	movs	r3, #164	@ 0xa4
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	4013      	ands	r3, r2
 80037e8:	d017      	beq.n	800381a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037ea:	23a0      	movs	r3, #160	@ 0xa0
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2220      	movs	r2, #32
 80037f2:	4013      	ands	r3, r2
 80037f4:	d105      	bne.n	8003802 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037f6:	239c      	movs	r3, #156	@ 0x9c
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5b      	ldr	r2, [pc, #364]	@ (800396c <HAL_UART_IRQHandler+0x2c0>)
 80037fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2290      	movs	r2, #144	@ 0x90
 800380e:	589b      	ldr	r3, [r3, r2]
 8003810:	2208      	movs	r2, #8
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2190      	movs	r1, #144	@ 0x90
 8003818:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800381a:	23a4      	movs	r3, #164	@ 0xa4
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4013      	ands	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_UART_IRQHandler+0x1a4>
 8003828:	23a0      	movs	r3, #160	@ 0xa0
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	04db      	lsls	r3, r3, #19
 8003832:	4013      	ands	r3, r2
 8003834:	d00c      	beq.n	8003850 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2280      	movs	r2, #128	@ 0x80
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2290      	movs	r2, #144	@ 0x90
 8003844:	589b      	ldr	r3, [r3, r2]
 8003846:	2220      	movs	r2, #32
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2190      	movs	r1, #144	@ 0x90
 800384e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2290      	movs	r2, #144	@ 0x90
 8003854:	589b      	ldr	r3, [r3, r2]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d100      	bne.n	800385c <HAL_UART_IRQHandler+0x1b0>
 800385a:	e23d      	b.n	8003cd8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800385c:	23a4      	movs	r3, #164	@ 0xa4
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	d015      	beq.n	8003894 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003868:	23a0      	movs	r3, #160	@ 0xa0
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2220      	movs	r2, #32
 8003870:	4013      	ands	r3, r2
 8003872:	d106      	bne.n	8003882 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003874:	239c      	movs	r3, #156	@ 0x9c
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	055b      	lsls	r3, r3, #21
 800387e:	4013      	ands	r3, r2
 8003880:	d008      	beq.n	8003894 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	0010      	movs	r0, r2
 8003892:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2290      	movs	r2, #144	@ 0x90
 8003898:	589b      	ldr	r3, [r3, r2]
 800389a:	2194      	movs	r1, #148	@ 0x94
 800389c:	187a      	adds	r2, r7, r1
 800389e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d004      	beq.n	80038b8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2228      	movs	r2, #40	@ 0x28
 80038b4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b6:	d04c      	beq.n	8003952 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f000 ffa6 	bl	800480c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2240      	movs	r2, #64	@ 0x40
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d13c      	bne.n	8003948 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80038d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	2090      	movs	r0, #144	@ 0x90
 80038d8:	183a      	adds	r2, r7, r0
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	2301      	movs	r3, #1
 80038de:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	438a      	bics	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	589b      	ldr	r3, [r3, r2]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d016      	beq.n	800393e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	@ 0x80
 8003914:	589b      	ldr	r3, [r3, r2]
 8003916:	4a17      	ldr	r2, [pc, #92]	@ (8003974 <HAL_UART_IRQHandler+0x2c8>)
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	589b      	ldr	r3, [r3, r2]
 8003920:	0018      	movs	r0, r3
 8003922:	f7fe f95d 	bl	8001be0 <HAL_DMA_Abort_IT>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d01c      	beq.n	8003964 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2280      	movs	r2, #128	@ 0x80
 800392e:	589b      	ldr	r3, [r3, r2]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	2180      	movs	r1, #128	@ 0x80
 8003936:	5852      	ldr	r2, [r2, r1]
 8003938:	0010      	movs	r0, r2
 800393a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	e012      	b.n	8003964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f9e9 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	e00d      	b.n	8003964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f9e4 	bl	8003d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e008      	b.n	8003964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f000 f9df 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2290      	movs	r2, #144	@ 0x90
 800395e:	2100      	movs	r1, #0
 8003960:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003962:	e1b9      	b.n	8003cd8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	46c0      	nop			@ (mov r8, r8)
    return;
 8003966:	e1b7      	b.n	8003cd8 <HAL_UART_IRQHandler+0x62c>
 8003968:	0000080f 	.word	0x0000080f
 800396c:	10000001 	.word	0x10000001
 8003970:	04000120 	.word	0x04000120
 8003974:	08004ad1 	.word	0x08004ad1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d000      	beq.n	8003982 <HAL_UART_IRQHandler+0x2d6>
 8003980:	e13e      	b.n	8003c00 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003982:	23a4      	movs	r3, #164	@ 0xa4
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d100      	bne.n	8003990 <HAL_UART_IRQHandler+0x2e4>
 800398e:	e137      	b.n	8003c00 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003990:	23a0      	movs	r3, #160	@ 0xa0
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	4013      	ands	r3, r2
 800399a:	d100      	bne.n	800399e <HAL_UART_IRQHandler+0x2f2>
 800399c:	e130      	b.n	8003c00 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2240      	movs	r2, #64	@ 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d000      	beq.n	80039b6 <HAL_UART_IRQHandler+0x30a>
 80039b4:	e0a4      	b.n	8003b00 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2280      	movs	r2, #128	@ 0x80
 80039ba:	589b      	ldr	r3, [r3, r2]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	217e      	movs	r1, #126	@ 0x7e
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d100      	bne.n	80039d0 <HAL_UART_IRQHandler+0x324>
 80039ce:	e185      	b.n	8003cdc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	225c      	movs	r2, #92	@ 0x5c
 80039d4:	5a9b      	ldrh	r3, [r3, r2]
 80039d6:	187a      	adds	r2, r7, r1
 80039d8:	8812      	ldrh	r2, [r2, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d300      	bcc.n	80039e0 <HAL_UART_IRQHandler+0x334>
 80039de:	e17d      	b.n	8003cdc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	187a      	adds	r2, r7, r1
 80039e4:	215e      	movs	r1, #94	@ 0x5e
 80039e6:	8812      	ldrh	r2, [r2, #0]
 80039e8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d170      	bne.n	8003adc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8310 	mrs	r3, PRIMASK
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a04:	2301      	movs	r3, #1
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	49b4      	ldr	r1, [pc, #720]	@ (8003cec <HAL_UART_IRQHandler+0x640>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a34:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a36:	2301      	movs	r3, #1
 8003a38:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			@ (mov r8, r8)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	438a      	bics	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a68:	2301      	movs	r3, #1
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2140      	movs	r1, #64	@ 0x40
 8003a80:	438a      	bics	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a86:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	228c      	movs	r2, #140	@ 0x8c
 8003a94:	2120      	movs	r1, #32
 8003a96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2110      	movs	r1, #16
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	589b      	ldr	r3, [r3, r2]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f7fe f820 	bl	8001b1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	225c      	movs	r2, #92	@ 0x5c
 8003ae6:	5a9a      	ldrh	r2, [r3, r2]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	215e      	movs	r1, #94	@ 0x5e
 8003aec:	5a5b      	ldrh	r3, [r3, r1]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fd f851 	bl	8000ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003afe:	e0ed      	b.n	8003cdc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	225c      	movs	r2, #92	@ 0x5c
 8003b04:	5a99      	ldrh	r1, [r3, r2]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	225e      	movs	r2, #94	@ 0x5e
 8003b0a:	5a9b      	ldrh	r3, [r3, r2]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	208e      	movs	r0, #142	@ 0x8e
 8003b10:	183b      	adds	r3, r7, r0
 8003b12:	1a8a      	subs	r2, r1, r2
 8003b14:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	225e      	movs	r2, #94	@ 0x5e
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d100      	bne.n	8003b24 <HAL_UART_IRQHandler+0x478>
 8003b22:	e0dd      	b.n	8003ce0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003b24:	183b      	adds	r3, r7, r0
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d100      	bne.n	8003b2e <HAL_UART_IRQHandler+0x482>
 8003b2c:	e0d8      	b.n	8003ce0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b34:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b36:	2488      	movs	r4, #136	@ 0x88
 8003b38:	193a      	adds	r2, r7, r4
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4967      	ldr	r1, [pc, #412]	@ (8003cf0 <HAL_UART_IRQHandler+0x644>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	193b      	adds	r3, r7, r4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b66:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b6c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b6e:	2484      	movs	r4, #132	@ 0x84
 8003b70:	193a      	adds	r2, r7, r4
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	2301      	movs	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	495a      	ldr	r1, [pc, #360]	@ (8003cf4 <HAL_UART_IRQHandler+0x648>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	228c      	movs	r2, #140	@ 0x8c
 8003ba2:	2120      	movs	r1, #32
 8003ba4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bba:	2480      	movs	r4, #128	@ 0x80
 8003bbc:	193a      	adds	r2, r7, r4
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	438a      	bics	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	193b      	adds	r3, r7, r4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fc ffd1 	bl	8000ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bfe:	e06f      	b.n	8003ce0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c00:	23a4      	movs	r3, #164	@ 0xa4
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	035b      	lsls	r3, r3, #13
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d010      	beq.n	8003c30 <HAL_UART_IRQHandler+0x584>
 8003c0e:	239c      	movs	r3, #156	@ 0x9c
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	03db      	lsls	r3, r3, #15
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	0352      	lsls	r2, r2, #13
 8003c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 ff94 	bl	8004b56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c2e:	e05a      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c30:	23a4      	movs	r3, #164	@ 0xa4
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d016      	beq.n	8003c6a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c3c:	23a0      	movs	r3, #160	@ 0xa0
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2280      	movs	r2, #128	@ 0x80
 8003c44:	4013      	ands	r3, r2
 8003c46:	d106      	bne.n	8003c56 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c48:	239c      	movs	r3, #156	@ 0x9c
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4013      	ands	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d042      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	0010      	movs	r0, r2
 8003c66:	4798      	blx	r3
    }
    return;
 8003c68:	e03c      	b.n	8003ce4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c6a:	23a4      	movs	r3, #164	@ 0xa4
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	4013      	ands	r3, r2
 8003c74:	d00a      	beq.n	8003c8c <HAL_UART_IRQHandler+0x5e0>
 8003c76:	23a0      	movs	r3, #160	@ 0xa0
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2240      	movs	r2, #64	@ 0x40
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 ff3a 	bl	8004afe <UART_EndTransmit_IT>
    return;
 8003c8a:	e02c      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c8c:	23a4      	movs	r3, #164	@ 0xa4
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	4013      	ands	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x606>
 8003c9a:	23a0      	movs	r3, #160	@ 0xa0
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	05db      	lsls	r3, r3, #23
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 ff63 	bl	8004b76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cb0:	e019      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003cb2:	23a4      	movs	r3, #164	@ 0xa4
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	045b      	lsls	r3, r3, #17
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d012      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
 8003cc0:	23a0      	movs	r3, #160	@ 0xa0
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	da0d      	bge.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 ff4a 	bl	8004b66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cd2:	e008      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	e004      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	e002      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003ce4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b02a      	add	sp, #168	@ 0xa8
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}
 8003cec:	fffffeff 	.word	0xfffffeff
 8003cf0:	fffffedf 	.word	0xfffffedf
 8003cf4:	effffffe 	.word	0xeffffffe

08003cf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d10:	46c0      	nop			@ (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b090      	sub	sp, #64	@ 0x40
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d30:	231a      	movs	r3, #26
 8003d32:	2220      	movs	r2, #32
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4aaf      	ldr	r2, [pc, #700]	@ (8004018 <UART_SetConfig+0x2f0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	0019      	movs	r1, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4aaa      	ldr	r2, [pc, #680]	@ (800401c <UART_SetConfig+0x2f4>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	0018      	movs	r0, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	0003      	movs	r3, r0
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4aa4      	ldr	r2, [pc, #656]	@ (8004020 <UART_SetConfig+0x2f8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a9f      	ldr	r2, [pc, #636]	@ (8004024 <UART_SetConfig+0x2fc>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	220f      	movs	r2, #15
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	0003      	movs	r3, r0
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a95      	ldr	r2, [pc, #596]	@ (8004028 <UART_SetConfig+0x300>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d131      	bne.n	8003e3c <UART_SetConfig+0x114>
 8003dd8:	4b94      	ldr	r3, [pc, #592]	@ (800402c <UART_SetConfig+0x304>)
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d01d      	beq.n	8003e20 <UART_SetConfig+0xf8>
 8003de4:	d823      	bhi.n	8003e2e <UART_SetConfig+0x106>
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d00c      	beq.n	8003e04 <UART_SetConfig+0xdc>
 8003dea:	d820      	bhi.n	8003e2e <UART_SetConfig+0x106>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <UART_SetConfig+0xce>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d00e      	beq.n	8003e12 <UART_SetConfig+0xea>
 8003df4:	e01b      	b.n	8003e2e <UART_SetConfig+0x106>
 8003df6:	231b      	movs	r3, #27
 8003df8:	2220      	movs	r2, #32
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	19db      	adds	r3, r3, r7
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e0b4      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e04:	231b      	movs	r3, #27
 8003e06:	2220      	movs	r2, #32
 8003e08:	189b      	adds	r3, r3, r2
 8003e0a:	19db      	adds	r3, r3, r7
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e0ad      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e12:	231b      	movs	r3, #27
 8003e14:	2220      	movs	r2, #32
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e0a6      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e20:	231b      	movs	r3, #27
 8003e22:	2220      	movs	r2, #32
 8003e24:	189b      	adds	r3, r3, r2
 8003e26:	19db      	adds	r3, r3, r7
 8003e28:	2208      	movs	r2, #8
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e09f      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e2e:	231b      	movs	r3, #27
 8003e30:	2220      	movs	r2, #32
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	19db      	adds	r3, r3, r7
 8003e36:	2210      	movs	r2, #16
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e098      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a7b      	ldr	r2, [pc, #492]	@ (8004030 <UART_SetConfig+0x308>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d131      	bne.n	8003eaa <UART_SetConfig+0x182>
 8003e46:	4b79      	ldr	r3, [pc, #484]	@ (800402c <UART_SetConfig+0x304>)
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	d01d      	beq.n	8003e8e <UART_SetConfig+0x166>
 8003e52:	d823      	bhi.n	8003e9c <UART_SetConfig+0x174>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d00c      	beq.n	8003e72 <UART_SetConfig+0x14a>
 8003e58:	d820      	bhi.n	8003e9c <UART_SetConfig+0x174>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <UART_SetConfig+0x13c>
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00e      	beq.n	8003e80 <UART_SetConfig+0x158>
 8003e62:	e01b      	b.n	8003e9c <UART_SetConfig+0x174>
 8003e64:	231b      	movs	r3, #27
 8003e66:	2220      	movs	r2, #32
 8003e68:	189b      	adds	r3, r3, r2
 8003e6a:	19db      	adds	r3, r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e07d      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e72:	231b      	movs	r3, #27
 8003e74:	2220      	movs	r2, #32
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	19db      	adds	r3, r3, r7
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e076      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e80:	231b      	movs	r3, #27
 8003e82:	2220      	movs	r2, #32
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	19db      	adds	r3, r3, r7
 8003e88:	2204      	movs	r2, #4
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e06f      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e8e:	231b      	movs	r3, #27
 8003e90:	2220      	movs	r2, #32
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	19db      	adds	r3, r3, r7
 8003e96:	2208      	movs	r2, #8
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e068      	b.n	8003f6e <UART_SetConfig+0x246>
 8003e9c:	231b      	movs	r3, #27
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	189b      	adds	r3, r3, r2
 8003ea2:	19db      	adds	r3, r3, r7
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e061      	b.n	8003f6e <UART_SetConfig+0x246>
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a61      	ldr	r2, [pc, #388]	@ (8004034 <UART_SetConfig+0x30c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d106      	bne.n	8003ec2 <UART_SetConfig+0x19a>
 8003eb4:	231b      	movs	r3, #27
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	19db      	adds	r3, r3, r7
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e055      	b.n	8003f6e <UART_SetConfig+0x246>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a5c      	ldr	r2, [pc, #368]	@ (8004038 <UART_SetConfig+0x310>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d106      	bne.n	8003eda <UART_SetConfig+0x1b2>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	2220      	movs	r2, #32
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e049      	b.n	8003f6e <UART_SetConfig+0x246>
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a50      	ldr	r2, [pc, #320]	@ (8004020 <UART_SetConfig+0x2f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d13e      	bne.n	8003f62 <UART_SetConfig+0x23a>
 8003ee4:	4b51      	ldr	r3, [pc, #324]	@ (800402c <UART_SetConfig+0x304>)
 8003ee6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ee8:	23c0      	movs	r3, #192	@ 0xc0
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	4013      	ands	r3, r2
 8003eee:	22c0      	movs	r2, #192	@ 0xc0
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <UART_SetConfig+0x21e>
 8003ef6:	22c0      	movs	r2, #192	@ 0xc0
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d82a      	bhi.n	8003f54 <UART_SetConfig+0x22c>
 8003efe:	2280      	movs	r2, #128	@ 0x80
 8003f00:	0112      	lsls	r2, r2, #4
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d011      	beq.n	8003f2a <UART_SetConfig+0x202>
 8003f06:	2280      	movs	r2, #128	@ 0x80
 8003f08:	0112      	lsls	r2, r2, #4
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d822      	bhi.n	8003f54 <UART_SetConfig+0x22c>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <UART_SetConfig+0x1f4>
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	00d2      	lsls	r2, r2, #3
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <UART_SetConfig+0x210>
 8003f1a:	e01b      	b.n	8003f54 <UART_SetConfig+0x22c>
 8003f1c:	231b      	movs	r3, #27
 8003f1e:	2220      	movs	r2, #32
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e021      	b.n	8003f6e <UART_SetConfig+0x246>
 8003f2a:	231b      	movs	r3, #27
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	189b      	adds	r3, r3, r2
 8003f30:	19db      	adds	r3, r3, r7
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e01a      	b.n	8003f6e <UART_SetConfig+0x246>
 8003f38:	231b      	movs	r3, #27
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	2204      	movs	r2, #4
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e013      	b.n	8003f6e <UART_SetConfig+0x246>
 8003f46:	231b      	movs	r3, #27
 8003f48:	2220      	movs	r2, #32
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	19db      	adds	r3, r3, r7
 8003f4e:	2208      	movs	r2, #8
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e00c      	b.n	8003f6e <UART_SetConfig+0x246>
 8003f54:	231b      	movs	r3, #27
 8003f56:	2220      	movs	r2, #32
 8003f58:	189b      	adds	r3, r3, r2
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e005      	b.n	8003f6e <UART_SetConfig+0x246>
 8003f62:	231b      	movs	r3, #27
 8003f64:	2220      	movs	r2, #32
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2b      	ldr	r2, [pc, #172]	@ (8004020 <UART_SetConfig+0x2f8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d000      	beq.n	8003f7a <UART_SetConfig+0x252>
 8003f78:	e0a9      	b.n	80040ce <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f7a:	231b      	movs	r3, #27
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	189b      	adds	r3, r3, r2
 8003f80:	19db      	adds	r3, r3, r7
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d015      	beq.n	8003fb4 <UART_SetConfig+0x28c>
 8003f88:	dc18      	bgt.n	8003fbc <UART_SetConfig+0x294>
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d00d      	beq.n	8003faa <UART_SetConfig+0x282>
 8003f8e:	dc15      	bgt.n	8003fbc <UART_SetConfig+0x294>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <UART_SetConfig+0x272>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d005      	beq.n	8003fa4 <UART_SetConfig+0x27c>
 8003f98:	e010      	b.n	8003fbc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9a:	f7fe fe49 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fa2:	e014      	b.n	8003fce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa4:	4b25      	ldr	r3, [pc, #148]	@ (800403c <UART_SetConfig+0x314>)
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fa8:	e011      	b.n	8003fce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003faa:	f7fe fdb5 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fb2:	e00c      	b.n	8003fce <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb4:	2380      	movs	r3, #128	@ 0x80
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fba:	e008      	b.n	8003fce <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fc0:	231a      	movs	r3, #26
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	189b      	adds	r3, r3, r2
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
        break;
 8003fcc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d100      	bne.n	8003fd6 <UART_SetConfig+0x2ae>
 8003fd4:	e14b      	b.n	800426e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fda:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <UART_SetConfig+0x318>)
 8003fdc:	0052      	lsls	r2, r2, #1
 8003fde:	5ad3      	ldrh	r3, [r2, r3]
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fe4:	f7fc f898 	bl	8000118 <__udivsi3>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	0013      	movs	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d305      	bcc.n	8004008 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004004:	429a      	cmp	r2, r3
 8004006:	d91d      	bls.n	8004044 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004008:	231a      	movs	r3, #26
 800400a:	2220      	movs	r2, #32
 800400c:	189b      	adds	r3, r3, r2
 800400e:	19db      	adds	r3, r3, r7
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e12b      	b.n	800426e <UART_SetConfig+0x546>
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	cfff69f3 	.word	0xcfff69f3
 800401c:	ffffcfff 	.word	0xffffcfff
 8004020:	40008000 	.word	0x40008000
 8004024:	11fff4ff 	.word	0x11fff4ff
 8004028:	40013800 	.word	0x40013800
 800402c:	40021000 	.word	0x40021000
 8004030:	40004400 	.word	0x40004400
 8004034:	40004800 	.word	0x40004800
 8004038:	40004c00 	.word	0x40004c00
 800403c:	00f42400 	.word	0x00f42400
 8004040:	080051f0 	.word	0x080051f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004050:	4b92      	ldr	r3, [pc, #584]	@ (800429c <UART_SetConfig+0x574>)
 8004052:	0052      	lsls	r2, r2, #1
 8004054:	5ad3      	ldrh	r3, [r2, r3]
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	69b8      	ldr	r0, [r7, #24]
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	f7fc f9ce 	bl	8000404 <__aeabi_uldivmod>
 8004068:	0002      	movs	r2, r0
 800406a:	000b      	movs	r3, r1
 800406c:	0e11      	lsrs	r1, r2, #24
 800406e:	021d      	lsls	r5, r3, #8
 8004070:	430d      	orrs	r5, r1
 8004072:	0214      	lsls	r4, r2, #8
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	1900      	adds	r0, r0, r4
 8004086:	4169      	adcs	r1, r5
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f7fc f9b5 	bl	8000404 <__aeabi_uldivmod>
 800409a:	0002      	movs	r2, r0
 800409c:	000b      	movs	r3, r1
 800409e:	0013      	movs	r3, r2
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a4:	23c0      	movs	r3, #192	@ 0xc0
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d309      	bcc.n	80040c0 <UART_SetConfig+0x398>
 80040ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	035b      	lsls	r3, r3, #13
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d204      	bcs.n	80040c0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e0d6      	b.n	800426e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80040c0:	231a      	movs	r3, #26
 80040c2:	2220      	movs	r2, #32
 80040c4:	189b      	adds	r3, r3, r2
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e0cf      	b.n	800426e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	69da      	ldr	r2, [r3, #28]
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d000      	beq.n	80040dc <UART_SetConfig+0x3b4>
 80040da:	e070      	b.n	80041be <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80040dc:	231b      	movs	r3, #27
 80040de:	2220      	movs	r2, #32
 80040e0:	189b      	adds	r3, r3, r2
 80040e2:	19db      	adds	r3, r3, r7
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d015      	beq.n	8004116 <UART_SetConfig+0x3ee>
 80040ea:	dc18      	bgt.n	800411e <UART_SetConfig+0x3f6>
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d00d      	beq.n	800410c <UART_SetConfig+0x3e4>
 80040f0:	dc15      	bgt.n	800411e <UART_SetConfig+0x3f6>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <UART_SetConfig+0x3d4>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d005      	beq.n	8004106 <UART_SetConfig+0x3de>
 80040fa:	e010      	b.n	800411e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fc:	f7fe fd98 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8004100:	0003      	movs	r3, r0
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004104:	e014      	b.n	8004130 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004106:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <UART_SetConfig+0x578>)
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800410a:	e011      	b.n	8004130 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410c:	f7fe fd04 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004110:	0003      	movs	r3, r0
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004114:	e00c      	b.n	8004130 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800411c:	e008      	b.n	8004130 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004122:	231a      	movs	r3, #26
 8004124:	2220      	movs	r2, #32
 8004126:	189b      	adds	r3, r3, r2
 8004128:	19db      	adds	r3, r3, r7
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
        break;
 800412e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d100      	bne.n	8004138 <UART_SetConfig+0x410>
 8004136:	e09a      	b.n	800426e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800413c:	4b57      	ldr	r3, [pc, #348]	@ (800429c <UART_SetConfig+0x574>)
 800413e:	0052      	lsls	r2, r2, #1
 8004140:	5ad3      	ldrh	r3, [r2, r3]
 8004142:	0019      	movs	r1, r3
 8004144:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004146:	f7fb ffe7 	bl	8000118 <__udivsi3>
 800414a:	0003      	movs	r3, r0
 800414c:	005a      	lsls	r2, r3, #1
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	18d2      	adds	r2, r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	0019      	movs	r1, r3
 800415c:	0010      	movs	r0, r2
 800415e:	f7fb ffdb 	bl	8000118 <__udivsi3>
 8004162:	0003      	movs	r3, r0
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d921      	bls.n	80041b0 <UART_SetConfig+0x488>
 800416c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	429a      	cmp	r2, r3
 8004174:	d21c      	bcs.n	80041b0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	b29a      	uxth	r2, r3
 800417a:	200e      	movs	r0, #14
 800417c:	2420      	movs	r4, #32
 800417e:	1903      	adds	r3, r0, r4
 8004180:	19db      	adds	r3, r3, r7
 8004182:	210f      	movs	r1, #15
 8004184:	438a      	bics	r2, r1
 8004186:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	2207      	movs	r2, #7
 8004190:	4013      	ands	r3, r2
 8004192:	b299      	uxth	r1, r3
 8004194:	1903      	adds	r3, r0, r4
 8004196:	19db      	adds	r3, r3, r7
 8004198:	1902      	adds	r2, r0, r4
 800419a:	19d2      	adds	r2, r2, r7
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1902      	adds	r2, r0, r4
 80041a8:	19d2      	adds	r2, r2, r7
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e05e      	b.n	800426e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041b0:	231a      	movs	r3, #26
 80041b2:	2220      	movs	r2, #32
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e057      	b.n	800426e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041be:	231b      	movs	r3, #27
 80041c0:	2220      	movs	r2, #32
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	19db      	adds	r3, r3, r7
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d015      	beq.n	80041f8 <UART_SetConfig+0x4d0>
 80041cc:	dc18      	bgt.n	8004200 <UART_SetConfig+0x4d8>
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00d      	beq.n	80041ee <UART_SetConfig+0x4c6>
 80041d2:	dc15      	bgt.n	8004200 <UART_SetConfig+0x4d8>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <UART_SetConfig+0x4b6>
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d005      	beq.n	80041e8 <UART_SetConfig+0x4c0>
 80041dc:	e010      	b.n	8004200 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041de:	f7fe fd27 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80041e2:	0003      	movs	r3, r0
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041e6:	e014      	b.n	8004212 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e8:	4b2d      	ldr	r3, [pc, #180]	@ (80042a0 <UART_SetConfig+0x578>)
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041ec:	e011      	b.n	8004212 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ee:	f7fe fc93 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 80041f2:	0003      	movs	r3, r0
 80041f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041f6:	e00c      	b.n	8004212 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041fe:	e008      	b.n	8004212 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004204:	231a      	movs	r3, #26
 8004206:	2220      	movs	r2, #32
 8004208:	189b      	adds	r3, r3, r2
 800420a:	19db      	adds	r3, r3, r7
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
        break;
 8004210:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	d02a      	beq.n	800426e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800421c:	4b1f      	ldr	r3, [pc, #124]	@ (800429c <UART_SetConfig+0x574>)
 800421e:	0052      	lsls	r2, r2, #1
 8004220:	5ad3      	ldrh	r3, [r2, r3]
 8004222:	0019      	movs	r1, r3
 8004224:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004226:	f7fb ff77 	bl	8000118 <__udivsi3>
 800422a:	0003      	movs	r3, r0
 800422c:	001a      	movs	r2, r3
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	18d2      	adds	r2, r2, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0019      	movs	r1, r3
 800423c:	0010      	movs	r0, r2
 800423e:	f7fb ff6b 	bl	8000118 <__udivsi3>
 8004242:	0003      	movs	r3, r0
 8004244:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d90a      	bls.n	8004262 <UART_SetConfig+0x53a>
 800424c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	025b      	lsls	r3, r3, #9
 8004252:	429a      	cmp	r2, r3
 8004254:	d205      	bcs.n	8004262 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	b29a      	uxth	r2, r3
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e005      	b.n	800426e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004262:	231a      	movs	r3, #26
 8004264:	2220      	movs	r2, #32
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	226a      	movs	r2, #106	@ 0x6a
 8004272:	2101      	movs	r1, #1
 8004274:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	2268      	movs	r2, #104	@ 0x68
 800427a:	2101      	movs	r1, #1
 800427c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	2200      	movs	r2, #0
 8004282:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	2200      	movs	r2, #0
 8004288:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800428a:	231a      	movs	r3, #26
 800428c:	2220      	movs	r2, #32
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b010      	add	sp, #64	@ 0x40
 800429a:	bdb0      	pop	{r4, r5, r7, pc}
 800429c:	080051f0 	.word	0x080051f0
 80042a0:	00f42400 	.word	0x00f42400

080042a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	2208      	movs	r2, #8
 80042b2:	4013      	ands	r3, r2
 80042b4:	d00b      	beq.n	80042ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <UART_AdvFeatureConfig+0x144>)
 80042be:	4013      	ands	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d2:	2201      	movs	r2, #1
 80042d4:	4013      	ands	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a43      	ldr	r2, [pc, #268]	@ (80043ec <UART_AdvFeatureConfig+0x148>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	2202      	movs	r2, #2
 80042f6:	4013      	ands	r3, r2
 80042f8:	d00b      	beq.n	8004312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a3b      	ldr	r2, [pc, #236]	@ (80043f0 <UART_AdvFeatureConfig+0x14c>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	2204      	movs	r2, #4
 8004318:	4013      	ands	r3, r2
 800431a:	d00b      	beq.n	8004334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4a34      	ldr	r2, [pc, #208]	@ (80043f4 <UART_AdvFeatureConfig+0x150>)
 8004324:	4013      	ands	r3, r2
 8004326:	0019      	movs	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	2210      	movs	r2, #16
 800433a:	4013      	ands	r3, r2
 800433c:	d00b      	beq.n	8004356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a2c      	ldr	r2, [pc, #176]	@ (80043f8 <UART_AdvFeatureConfig+0x154>)
 8004346:	4013      	ands	r3, r2
 8004348:	0019      	movs	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	2220      	movs	r2, #32
 800435c:	4013      	ands	r3, r2
 800435e:	d00b      	beq.n	8004378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4a25      	ldr	r2, [pc, #148]	@ (80043fc <UART_AdvFeatureConfig+0x158>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	4013      	ands	r3, r2
 8004380:	d01d      	beq.n	80043be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <UART_AdvFeatureConfig+0x15c>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	035b      	lsls	r3, r3, #13
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d10b      	bne.n	80043be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <UART_AdvFeatureConfig+0x160>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	2280      	movs	r2, #128	@ 0x80
 80043c4:	4013      	ands	r3, r2
 80043c6:	d00b      	beq.n	80043e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004408 <UART_AdvFeatureConfig+0x164>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	ffff7fff 	.word	0xffff7fff
 80043ec:	fffdffff 	.word	0xfffdffff
 80043f0:	fffeffff 	.word	0xfffeffff
 80043f4:	fffbffff 	.word	0xfffbffff
 80043f8:	ffffefff 	.word	0xffffefff
 80043fc:	ffffdfff 	.word	0xffffdfff
 8004400:	ffefffff 	.word	0xffefffff
 8004404:	ff9fffff 	.word	0xff9fffff
 8004408:	fff7ffff 	.word	0xfff7ffff

0800440c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b092      	sub	sp, #72	@ 0x48
 8004410:	af02      	add	r7, sp, #8
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2290      	movs	r2, #144	@ 0x90
 8004418:	2100      	movs	r1, #0
 800441a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800441c:	f7fd f986 	bl	800172c <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2208      	movs	r2, #8
 800442c:	4013      	ands	r3, r2
 800442e:	2b08      	cmp	r3, #8
 8004430:	d12d      	bne.n	800448e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	0391      	lsls	r1, r2, #14
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <UART_CheckIdleState+0x14c>)
 800443c:	9200      	str	r2, [sp, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	f000 f88e 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d022      	beq.n	800448e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004450:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004452:	2301      	movs	r3, #1
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2180      	movs	r1, #128	@ 0x80
 800446a:	438a      	bics	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2288      	movs	r2, #136	@ 0x88
 800447e:	2120      	movs	r1, #32
 8004480:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2284      	movs	r2, #132	@ 0x84
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e060      	b.n	8004550 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2204      	movs	r2, #4
 8004496:	4013      	ands	r3, r2
 8004498:	2b04      	cmp	r3, #4
 800449a:	d146      	bne.n	800452a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800449c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	03d1      	lsls	r1, r2, #15
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <UART_CheckIdleState+0x14c>)
 80044a6:	9200      	str	r2, [sp, #0]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f000 f859 	bl	8004560 <UART_WaitOnFlagUntilTimeout>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d03b      	beq.n	800452a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80044bc:	2301      	movs	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4922      	ldr	r1, [pc, #136]	@ (800455c <UART_CheckIdleState+0x150>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e4:	f3ef 8310 	mrs	r3, PRIMASK
 80044e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ee:	2301      	movs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			@ (mov r8, r8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	438a      	bics	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	228c      	movs	r2, #140	@ 0x8c
 800451a:	2120      	movs	r1, #32
 800451c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2284      	movs	r2, #132	@ 0x84
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e012      	b.n	8004550 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2288      	movs	r2, #136	@ 0x88
 800452e:	2120      	movs	r1, #32
 8004530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	228c      	movs	r2, #140	@ 0x8c
 8004536:	2120      	movs	r1, #32
 8004538:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2284      	movs	r2, #132	@ 0x84
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b010      	add	sp, #64	@ 0x40
 8004556:	bd80      	pop	{r7, pc}
 8004558:	01ffffff 	.word	0x01ffffff
 800455c:	fffffedf 	.word	0xfffffedf

08004560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	603b      	str	r3, [r7, #0]
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	e051      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3301      	adds	r3, #1
 8004576:	d04e      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004578:	f7fd f8d8 	bl	800172c <HAL_GetTick>
 800457c:	0002      	movs	r2, r0
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e051      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2204      	movs	r2, #4
 800459a:	4013      	ands	r3, r2
 800459c:	d03b      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d038      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	d035      	beq.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	2208      	movs	r2, #8
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d111      	bne.n	80045dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2208      	movs	r2, #8
 80045be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f922 	bl	800480c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2290      	movs	r2, #144	@ 0x90
 80045cc:	2108      	movs	r1, #8
 80045ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2284      	movs	r2, #132	@ 0x84
 80045d4:	2100      	movs	r1, #0
 80045d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e02c      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	401a      	ands	r2, r3
 80045e8:	2380      	movs	r3, #128	@ 0x80
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d112      	bne.n	8004616 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f000 f905 	bl	800480c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2290      	movs	r2, #144	@ 0x90
 8004606:	2120      	movs	r1, #32
 8004608:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2284      	movs	r2, #132	@ 0x84
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e00f      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	425a      	negs	r2, r3
 8004626:	4153      	adcs	r3, r2
 8004628:	b2db      	uxtb	r3, r3
 800462a:	001a      	movs	r2, r3
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d09e      	beq.n	8004572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b090      	sub	sp, #64	@ 0x40
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	1dbb      	adds	r3, r7, #6
 800464c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1dba      	adds	r2, r7, #6
 8004658:	215c      	movs	r1, #92	@ 0x5c
 800465a:	8812      	ldrh	r2, [r2, #0]
 800465c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2290      	movs	r2, #144	@ 0x90
 8004662:	2100      	movs	r1, #0
 8004664:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	228c      	movs	r2, #140	@ 0x8c
 800466a:	2122      	movs	r1, #34	@ 0x22
 800466c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2280      	movs	r2, #128	@ 0x80
 8004672:	589b      	ldr	r3, [r3, r2]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d02d      	beq.n	80046d4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2280      	movs	r2, #128	@ 0x80
 800467c:	589b      	ldr	r3, [r3, r2]
 800467e:	4a40      	ldr	r2, [pc, #256]	@ (8004780 <UART_Start_Receive_DMA+0x140>)
 8004680:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	589b      	ldr	r3, [r3, r2]
 8004688:	4a3e      	ldr	r2, [pc, #248]	@ (8004784 <UART_Start_Receive_DMA+0x144>)
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2280      	movs	r2, #128	@ 0x80
 8004690:	589b      	ldr	r3, [r3, r2]
 8004692:	4a3d      	ldr	r2, [pc, #244]	@ (8004788 <UART_Start_Receive_DMA+0x148>)
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2280      	movs	r2, #128	@ 0x80
 800469a:	589b      	ldr	r3, [r3, r2]
 800469c:	2200      	movs	r2, #0
 800469e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2280      	movs	r2, #128	@ 0x80
 80046a4:	5898      	ldr	r0, [r3, r2]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3324      	adds	r3, #36	@ 0x24
 80046ac:	0019      	movs	r1, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	001a      	movs	r2, r3
 80046b4:	1dbb      	adds	r3, r7, #6
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f7fd f9aa 	bl	8001a10 <HAL_DMA_Start_IT>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d009      	beq.n	80046d4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2290      	movs	r2, #144	@ 0x90
 80046c4:	2110      	movs	r1, #16
 80046c6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	228c      	movs	r2, #140	@ 0x8c
 80046cc:	2120      	movs	r1, #32
 80046ce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e050      	b.n	8004776 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e6:	2301      	movs	r3, #1
 80046e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2180      	movs	r1, #128	@ 0x80
 80046fe:	0049      	lsls	r1, r1, #1
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004706:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004710:	f3ef 8310 	mrs	r3, PRIMASK
 8004714:	613b      	str	r3, [r7, #16]
  return(result);
 8004716:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			@ (mov r8, r8)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	61fb      	str	r3, [r7, #28]
  return(result);
 8004748:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
 800474c:	2301      	movs	r3, #1
 800474e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2140      	movs	r1, #64	@ 0x40
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b010      	add	sp, #64	@ 0x40
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	080048d9 	.word	0x080048d9
 8004784:	08004a09 	.word	0x08004a09
 8004788:	08004a4b 	.word	0x08004a4b

0800478c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004794:	f3ef 8310 	mrs	r3, PRIMASK
 8004798:	60bb      	str	r3, [r7, #8]
  return(result);
 800479a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
 800479e:	2301      	movs	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f383 8810 	msr	PRIMASK, r3
}
 80047a8:	46c0      	nop			@ (mov r8, r8)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	21c0      	movs	r1, #192	@ 0xc0
 80047b6:	438a      	bics	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f383 8810 	msr	PRIMASK, r3
}
 80047c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ca:	617b      	str	r3, [r7, #20]
  return(result);
 80047cc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	2301      	movs	r3, #1
 80047d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4908      	ldr	r1, [pc, #32]	@ (8004808 <UART_EndTxTransfer+0x7c>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2288      	movs	r2, #136	@ 0x88
 80047fc:	2120      	movs	r1, #32
 80047fe:	5099      	str	r1, [r3, r2]
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b00a      	add	sp, #40	@ 0x28
 8004806:	bd80      	pop	{r7, pc}
 8004808:	ff7fffff 	.word	0xff7fffff

0800480c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08e      	sub	sp, #56	@ 0x38
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	617b      	str	r3, [r7, #20]
  return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
 800481e:	2301      	movs	r3, #1
 8004820:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4926      	ldr	r1, [pc, #152]	@ (80048d0 <UART_EndRxTransfer+0xc4>)
 8004836:	400a      	ands	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	623b      	str	r3, [r7, #32]
  return(result);
 800484c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004850:	2301      	movs	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	f383 8810 	msr	PRIMASK, r3
}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	491b      	ldr	r1, [pc, #108]	@ (80048d4 <UART_EndRxTransfer+0xc8>)
 8004868:	400a      	ands	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d118      	bne.n	80048b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004880:	f3ef 8310 	mrs	r3, PRIMASK
 8004884:	60bb      	str	r3, [r7, #8]
  return(result);
 8004886:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488a:	2301      	movs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2110      	movs	r1, #16
 80048a2:	438a      	bics	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f383 8810 	msr	PRIMASK, r3
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	228c      	movs	r2, #140	@ 0x8c
 80048b6:	2120      	movs	r1, #32
 80048b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b00e      	add	sp, #56	@ 0x38
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	fffffedf 	.word	0xfffffedf
 80048d4:	effffffe 	.word	0xeffffffe

080048d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	@ 0x50
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2220      	movs	r2, #32
 80048ee:	4013      	ands	r3, r2
 80048f0:	d16f      	bne.n	80049d2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80048f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f4:	225e      	movs	r2, #94	@ 0x5e
 80048f6:	2100      	movs	r1, #0
 80048f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fa:	f3ef 8310 	mrs	r3, PRIMASK
 80048fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004900:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004904:	2301      	movs	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	493a      	ldr	r1, [pc, #232]	@ (8004a04 <UART_DMAReceiveCplt+0x12c>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492c:	f3ef 8310 	mrs	r3, PRIMASK
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	647b      	str	r3, [r7, #68]	@ 0x44
 8004936:	2301      	movs	r3, #1
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	438a      	bics	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	f383 8810 	msr	PRIMASK, r3
}
 800495c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495e:	f3ef 8310 	mrs	r3, PRIMASK
 8004962:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
 8004968:	2301      	movs	r3, #1
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2140      	movs	r1, #64	@ 0x40
 8004980:	438a      	bics	r2, r1
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004986:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498a:	f383 8810 	msr	PRIMASK, r3
}
 800498e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004992:	228c      	movs	r2, #140	@ 0x8c
 8004994:	2120      	movs	r1, #32
 8004996:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d118      	bne.n	80049d2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a0:	f3ef 8310 	mrs	r3, PRIMASK
 80049a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049aa:	2301      	movs	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			@ (mov r8, r8)
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2110      	movs	r1, #16
 80049c2:	438a      	bics	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d4:	2200      	movs	r2, #0
 80049d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d108      	bne.n	80049f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e2:	225c      	movs	r2, #92	@ 0x5c
 80049e4:	5a9a      	ldrh	r2, [r3, r2]
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	0011      	movs	r1, r2
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7fc f8d8 	bl	8000ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049f0:	e003      	b.n	80049fa <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80049f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7fc f8f9 	bl	8000bec <HAL_UART_RxCpltCallback>
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b014      	add	sp, #80	@ 0x50
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	fffffeff 	.word	0xfffffeff

08004a08 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10a      	bne.n	8004a3a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	225c      	movs	r2, #92	@ 0x5c
 8004a28:	5a9b      	ldrh	r3, [r3, r2]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	0011      	movs	r1, r2
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fc f8b4 	bl	8000ba0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a38:	e003      	b.n	8004a42 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7ff f963 	bl	8003d08 <HAL_UART_RxHalfCpltCallback>
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b004      	add	sp, #16
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2288      	movs	r2, #136	@ 0x88
 8004a5c:	589b      	ldr	r3, [r3, r2]
 8004a5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	228c      	movs	r2, #140	@ 0x8c
 8004a64:	589b      	ldr	r3, [r3, r2]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d10a      	bne.n	8004a8c <UART_DMAError+0x42>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b21      	cmp	r3, #33	@ 0x21
 8004a7a:	d107      	bne.n	8004a8c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2256      	movs	r2, #86	@ 0x56
 8004a80:	2100      	movs	r1, #0
 8004a82:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7ff fe80 	bl	800478c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2240      	movs	r2, #64	@ 0x40
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b40      	cmp	r3, #64	@ 0x40
 8004a98:	d10a      	bne.n	8004ab0 <UART_DMAError+0x66>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b22      	cmp	r3, #34	@ 0x22
 8004a9e:	d107      	bne.n	8004ab0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	225e      	movs	r2, #94	@ 0x5e
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff feae 	bl	800480c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2290      	movs	r2, #144	@ 0x90
 8004ab4:	589b      	ldr	r3, [r3, r2]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2190      	movs	r1, #144	@ 0x90
 8004abe:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7ff f928 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b006      	add	sp, #24
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	225e      	movs	r2, #94	@ 0x5e
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2256      	movs	r2, #86	@ 0x56
 8004aea:	2100      	movs	r1, #0
 8004aec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff f911 	bl	8003d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b004      	add	sp, #16
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b06:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	2301      	movs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2140      	movs	r1, #64	@ 0x40
 8004b28:	438a      	bics	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2288      	movs	r2, #136	@ 0x88
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7ff f8d5 	bl	8003cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b002      	add	sp, #8
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b002      	add	sp, #8
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2284      	movs	r2, #132	@ 0x84
 8004b94:	5c9b      	ldrb	r3, [r3, r2]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_UARTEx_DisableFifoMode+0x16>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e027      	b.n	8004bee <HAL_UARTEx_DisableFifoMode+0x66>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2284      	movs	r2, #132	@ 0x84
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2288      	movs	r2, #136	@ 0x88
 8004baa:	2124      	movs	r1, #36	@ 0x24
 8004bac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	438a      	bics	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2288      	movs	r2, #136	@ 0x88
 8004be0:	2120      	movs	r1, #32
 8004be2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2284      	movs	r2, #132	@ 0x84
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	dfffffff 	.word	0xdfffffff

08004bfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2284      	movs	r2, #132	@ 0x84
 8004c0a:	5c9b      	ldrb	r3, [r3, r2]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e02e      	b.n	8004c72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2284      	movs	r2, #132	@ 0x84
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2288      	movs	r2, #136	@ 0x88
 8004c20:	2124      	movs	r1, #36	@ 0x24
 8004c22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	438a      	bics	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	08d9      	lsrs	r1, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f000 f8bc 	bl	8004dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2288      	movs	r2, #136	@ 0x88
 8004c64:	2120      	movs	r1, #32
 8004c66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2284      	movs	r2, #132	@ 0x84
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2284      	movs	r2, #132	@ 0x84
 8004c8a:	5c9b      	ldrb	r3, [r3, r2]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e02f      	b.n	8004cf4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2284      	movs	r2, #132	@ 0x84
 8004c98:	2101      	movs	r1, #1
 8004c9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2288      	movs	r2, #136	@ 0x88
 8004ca0:	2124      	movs	r1, #36	@ 0x24
 8004ca2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	438a      	bics	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8004cfc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 f87b 	bl	8004dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2288      	movs	r2, #136	@ 0x88
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2284      	movs	r2, #132	@ 0x84
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	f1ffffff 	.word	0xf1ffffff

08004d00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	1dbb      	adds	r3, r7, #6
 8004d0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	228c      	movs	r2, #140	@ 0x8c
 8004d12:	589b      	ldr	r3, [r3, r2]
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d156      	bne.n	8004dc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004d1e:	1dbb      	adds	r3, r7, #6
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e04e      	b.n	8004dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	015b      	lsls	r3, r3, #5
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d109      	bne.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	d001      	beq.n	8004d4a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e03e      	b.n	8004dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004d56:	2527      	movs	r5, #39	@ 0x27
 8004d58:	197c      	adds	r4, r7, r5
 8004d5a:	1dbb      	adds	r3, r7, #6
 8004d5c:	881a      	ldrh	r2, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fc6c 	bl	8004640 <UART_Start_Receive_DMA>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004d6c:	197b      	adds	r3, r7, r5
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d124      	bne.n	8004dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d11c      	bne.n	8004db6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d84:	f3ef 8310 	mrs	r3, PRIMASK
 8004d88:	617b      	str	r3, [r7, #20]
  return(result);
 8004d8a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			@ (mov r8, r8)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2110      	movs	r1, #16
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f383 8810 	msr	PRIMASK, r3
}
 8004db4:	e003      	b.n	8004dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004db6:	2327      	movs	r3, #39	@ 0x27
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004dbe:	2327      	movs	r3, #39	@ 0x27
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	e000      	b.n	8004dc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b00a      	add	sp, #40	@ 0x28
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}

08004dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	226a      	movs	r2, #106	@ 0x6a
 8004de4:	2101      	movs	r1, #1
 8004de6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2268      	movs	r2, #104	@ 0x68
 8004dec:	2101      	movs	r1, #1
 8004dee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004df0:	e043      	b.n	8004e7a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004df2:	260f      	movs	r6, #15
 8004df4:	19bb      	adds	r3, r7, r6
 8004df6:	2208      	movs	r2, #8
 8004df8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dfa:	200e      	movs	r0, #14
 8004dfc:	183b      	adds	r3, r7, r0
 8004dfe:	2208      	movs	r2, #8
 8004e00:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	0e5b      	lsrs	r3, r3, #25
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	240d      	movs	r4, #13
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2107      	movs	r1, #7
 8004e12:	400a      	ands	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	0f5b      	lsrs	r3, r3, #29
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	250c      	movs	r5, #12
 8004e22:	197b      	adds	r3, r7, r5
 8004e24:	2107      	movs	r1, #7
 8004e26:	400a      	ands	r2, r1
 8004e28:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e2a:	183b      	adds	r3, r7, r0
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	197a      	adds	r2, r7, r5
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	4914      	ldr	r1, [pc, #80]	@ (8004e84 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e34:	5c8a      	ldrb	r2, [r1, r2]
 8004e36:	435a      	muls	r2, r3
 8004e38:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e3a:	197b      	adds	r3, r7, r5
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	4a12      	ldr	r2, [pc, #72]	@ (8004e88 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e42:	0019      	movs	r1, r3
 8004e44:	f7fb f9f2 	bl	800022c <__divsi3>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	b299      	uxth	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	226a      	movs	r2, #106	@ 0x6a
 8004e50:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e52:	19bb      	adds	r3, r7, r6
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	193a      	adds	r2, r7, r4
 8004e58:	7812      	ldrb	r2, [r2, #0]
 8004e5a:	490a      	ldr	r1, [pc, #40]	@ (8004e84 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e5c:	5c8a      	ldrb	r2, [r1, r2]
 8004e5e:	435a      	muls	r2, r3
 8004e60:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e62:	193b      	adds	r3, r7, r4
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	f7fb f9de 	bl	800022c <__divsi3>
 8004e70:	0003      	movs	r3, r0
 8004e72:	b299      	uxth	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2268      	movs	r2, #104	@ 0x68
 8004e78:	5299      	strh	r1, [r3, r2]
}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b005      	add	sp, #20
 8004e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	08005208 	.word	0x08005208
 8004e88:	08005210 	.word	0x08005210

08004e8c <atoi>:
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	220a      	movs	r2, #10
 8004e90:	2100      	movs	r1, #0
 8004e92:	f000 f88b 	bl	8004fac <strtol>
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <_strtol_l.constprop.0>:
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	0017      	movs	r7, r2
 8004e9e:	001e      	movs	r6, r3
 8004ea0:	9003      	str	r0, [sp, #12]
 8004ea2:	9101      	str	r1, [sp, #4]
 8004ea4:	2b24      	cmp	r3, #36	@ 0x24
 8004ea6:	d844      	bhi.n	8004f32 <_strtol_l.constprop.0+0x9a>
 8004ea8:	000c      	movs	r4, r1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d041      	beq.n	8004f32 <_strtol_l.constprop.0+0x9a>
 8004eae:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa4 <_strtol_l.constprop.0+0x10c>)
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	469c      	mov	ip, r3
 8004eb4:	0023      	movs	r3, r4
 8004eb6:	4661      	mov	r1, ip
 8004eb8:	781d      	ldrb	r5, [r3, #0]
 8004eba:	3401      	adds	r4, #1
 8004ebc:	5d48      	ldrb	r0, [r1, r5]
 8004ebe:	0001      	movs	r1, r0
 8004ec0:	4011      	ands	r1, r2
 8004ec2:	4210      	tst	r0, r2
 8004ec4:	d1f6      	bne.n	8004eb4 <_strtol_l.constprop.0+0x1c>
 8004ec6:	2d2d      	cmp	r5, #45	@ 0x2d
 8004ec8:	d13a      	bne.n	8004f40 <_strtol_l.constprop.0+0xa8>
 8004eca:	7825      	ldrb	r5, [r4, #0]
 8004ecc:	1c9c      	adds	r4, r3, #2
 8004ece:	2301      	movs	r3, #1
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	0033      	movs	r3, r6
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	d109      	bne.n	8004eee <_strtol_l.constprop.0+0x56>
 8004eda:	2d30      	cmp	r5, #48	@ 0x30
 8004edc:	d136      	bne.n	8004f4c <_strtol_l.constprop.0+0xb4>
 8004ede:	2120      	movs	r1, #32
 8004ee0:	7823      	ldrb	r3, [r4, #0]
 8004ee2:	438b      	bics	r3, r1
 8004ee4:	2b58      	cmp	r3, #88	@ 0x58
 8004ee6:	d131      	bne.n	8004f4c <_strtol_l.constprop.0+0xb4>
 8004ee8:	0016      	movs	r6, r2
 8004eea:	7865      	ldrb	r5, [r4, #1]
 8004eec:	3402      	adds	r4, #2
 8004eee:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <_strtol_l.constprop.0+0x110>)
 8004ef0:	9b00      	ldr	r3, [sp, #0]
 8004ef2:	4694      	mov	ip, r2
 8004ef4:	4463      	add	r3, ip
 8004ef6:	0031      	movs	r1, r6
 8004ef8:	0018      	movs	r0, r3
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	f7fb f992 	bl	8000224 <__aeabi_uidivmod>
 8004f00:	2200      	movs	r2, #0
 8004f02:	4684      	mov	ip, r0
 8004f04:	0010      	movs	r0, r2
 8004f06:	002b      	movs	r3, r5
 8004f08:	3b30      	subs	r3, #48	@ 0x30
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d825      	bhi.n	8004f5a <_strtol_l.constprop.0+0xc2>
 8004f0e:	001d      	movs	r5, r3
 8004f10:	42ae      	cmp	r6, r5
 8004f12:	dd31      	ble.n	8004f78 <_strtol_l.constprop.0+0xe0>
 8004f14:	1c53      	adds	r3, r2, #1
 8004f16:	d009      	beq.n	8004f2c <_strtol_l.constprop.0+0x94>
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4252      	negs	r2, r2
 8004f1c:	4584      	cmp	ip, r0
 8004f1e:	d305      	bcc.n	8004f2c <_strtol_l.constprop.0+0x94>
 8004f20:	d101      	bne.n	8004f26 <_strtol_l.constprop.0+0x8e>
 8004f22:	42a9      	cmp	r1, r5
 8004f24:	db25      	blt.n	8004f72 <_strtol_l.constprop.0+0xda>
 8004f26:	2201      	movs	r2, #1
 8004f28:	4370      	muls	r0, r6
 8004f2a:	1828      	adds	r0, r5, r0
 8004f2c:	7825      	ldrb	r5, [r4, #0]
 8004f2e:	3401      	adds	r4, #1
 8004f30:	e7e9      	b.n	8004f06 <_strtol_l.constprop.0+0x6e>
 8004f32:	f000 f887 	bl	8005044 <__errno>
 8004f36:	2316      	movs	r3, #22
 8004f38:	6003      	str	r3, [r0, #0]
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	b005      	add	sp, #20
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f40:	9100      	str	r1, [sp, #0]
 8004f42:	2d2b      	cmp	r5, #43	@ 0x2b
 8004f44:	d1c5      	bne.n	8004ed2 <_strtol_l.constprop.0+0x3a>
 8004f46:	7825      	ldrb	r5, [r4, #0]
 8004f48:	1c9c      	adds	r4, r3, #2
 8004f4a:	e7c2      	b.n	8004ed2 <_strtol_l.constprop.0+0x3a>
 8004f4c:	2e00      	cmp	r6, #0
 8004f4e:	d1ce      	bne.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f50:	3608      	adds	r6, #8
 8004f52:	2d30      	cmp	r5, #48	@ 0x30
 8004f54:	d0cb      	beq.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f56:	3602      	adds	r6, #2
 8004f58:	e7c9      	b.n	8004eee <_strtol_l.constprop.0+0x56>
 8004f5a:	002b      	movs	r3, r5
 8004f5c:	3b41      	subs	r3, #65	@ 0x41
 8004f5e:	2b19      	cmp	r3, #25
 8004f60:	d801      	bhi.n	8004f66 <_strtol_l.constprop.0+0xce>
 8004f62:	3d37      	subs	r5, #55	@ 0x37
 8004f64:	e7d4      	b.n	8004f10 <_strtol_l.constprop.0+0x78>
 8004f66:	002b      	movs	r3, r5
 8004f68:	3b61      	subs	r3, #97	@ 0x61
 8004f6a:	2b19      	cmp	r3, #25
 8004f6c:	d804      	bhi.n	8004f78 <_strtol_l.constprop.0+0xe0>
 8004f6e:	3d57      	subs	r5, #87	@ 0x57
 8004f70:	e7ce      	b.n	8004f10 <_strtol_l.constprop.0+0x78>
 8004f72:	2201      	movs	r2, #1
 8004f74:	4252      	negs	r2, r2
 8004f76:	e7d9      	b.n	8004f2c <_strtol_l.constprop.0+0x94>
 8004f78:	1c53      	adds	r3, r2, #1
 8004f7a:	d108      	bne.n	8004f8e <_strtol_l.constprop.0+0xf6>
 8004f7c:	2322      	movs	r3, #34	@ 0x22
 8004f7e:	9a03      	ldr	r2, [sp, #12]
 8004f80:	9802      	ldr	r0, [sp, #8]
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	2f00      	cmp	r7, #0
 8004f86:	d0d9      	beq.n	8004f3c <_strtol_l.constprop.0+0xa4>
 8004f88:	1e63      	subs	r3, r4, #1
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	e007      	b.n	8004f9e <_strtol_l.constprop.0+0x106>
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d000      	beq.n	8004f96 <_strtol_l.constprop.0+0xfe>
 8004f94:	4240      	negs	r0, r0
 8004f96:	2f00      	cmp	r7, #0
 8004f98:	d0d0      	beq.n	8004f3c <_strtol_l.constprop.0+0xa4>
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d1f4      	bne.n	8004f88 <_strtol_l.constprop.0+0xf0>
 8004f9e:	9b01      	ldr	r3, [sp, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	e7cb      	b.n	8004f3c <_strtol_l.constprop.0+0xa4>
 8004fa4:	08005219 	.word	0x08005219
 8004fa8:	7fffffff 	.word	0x7fffffff

08004fac <strtol>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4c04      	ldr	r4, [pc, #16]	@ (8004fc0 <strtol+0x14>)
 8004fb0:	0013      	movs	r3, r2
 8004fb2:	000a      	movs	r2, r1
 8004fb4:	0001      	movs	r1, r0
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	f7ff ff6e 	bl	8004e98 <_strtol_l.constprop.0>
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	20000218 	.word	0x20000218

08004fc4 <memset>:
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	1882      	adds	r2, r0, r2
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d100      	bne.n	8004fce <memset+0xa>
 8004fcc:	4770      	bx	lr
 8004fce:	7019      	strb	r1, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	e7f9      	b.n	8004fc8 <memset+0x4>

08004fd4 <strchr>:
 8004fd4:	b2c9      	uxtb	r1, r1
 8004fd6:	7803      	ldrb	r3, [r0, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <strchr+0x12>
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	d100      	bne.n	8004fe2 <strchr+0xe>
 8004fe0:	4770      	bx	lr
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	e7f7      	b.n	8004fd6 <strchr+0x2>
 8004fe6:	424b      	negs	r3, r1
 8004fe8:	4159      	adcs	r1, r3
 8004fea:	4249      	negs	r1, r1
 8004fec:	4008      	ands	r0, r1
 8004fee:	e7f7      	b.n	8004fe0 <strchr+0xc>

08004ff0 <strncpy>:
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	b530      	push	{r4, r5, lr}
 8004ff4:	001d      	movs	r5, r3
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d006      	beq.n	8005008 <strncpy+0x18>
 8004ffa:	780c      	ldrb	r4, [r1, #0]
 8004ffc:	3a01      	subs	r2, #1
 8004ffe:	3301      	adds	r3, #1
 8005000:	702c      	strb	r4, [r5, #0]
 8005002:	3101      	adds	r1, #1
 8005004:	2c00      	cmp	r4, #0
 8005006:	d1f5      	bne.n	8004ff4 <strncpy+0x4>
 8005008:	2100      	movs	r1, #0
 800500a:	189a      	adds	r2, r3, r2
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <strncpy+0x22>
 8005010:	bd30      	pop	{r4, r5, pc}
 8005012:	7019      	strb	r1, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	e7f9      	b.n	800500c <strncpy+0x1c>

08005018 <strstr>:
 8005018:	780a      	ldrb	r2, [r1, #0]
 800501a:	b530      	push	{r4, r5, lr}
 800501c:	2a00      	cmp	r2, #0
 800501e:	d10c      	bne.n	800503a <strstr+0x22>
 8005020:	bd30      	pop	{r4, r5, pc}
 8005022:	429a      	cmp	r2, r3
 8005024:	d108      	bne.n	8005038 <strstr+0x20>
 8005026:	2301      	movs	r3, #1
 8005028:	5ccc      	ldrb	r4, [r1, r3]
 800502a:	2c00      	cmp	r4, #0
 800502c:	d0f8      	beq.n	8005020 <strstr+0x8>
 800502e:	5cc5      	ldrb	r5, [r0, r3]
 8005030:	42a5      	cmp	r5, r4
 8005032:	d101      	bne.n	8005038 <strstr+0x20>
 8005034:	3301      	adds	r3, #1
 8005036:	e7f7      	b.n	8005028 <strstr+0x10>
 8005038:	3001      	adds	r0, #1
 800503a:	7803      	ldrb	r3, [r0, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <strstr+0xa>
 8005040:	0018      	movs	r0, r3
 8005042:	e7ed      	b.n	8005020 <strstr+0x8>

08005044 <__errno>:
 8005044:	4b01      	ldr	r3, [pc, #4]	@ (800504c <__errno+0x8>)
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	4770      	bx	lr
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	20000218 	.word	0x20000218

08005050 <__libc_init_array>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	2600      	movs	r6, #0
 8005054:	4c0c      	ldr	r4, [pc, #48]	@ (8005088 <__libc_init_array+0x38>)
 8005056:	4d0d      	ldr	r5, [pc, #52]	@ (800508c <__libc_init_array+0x3c>)
 8005058:	1b64      	subs	r4, r4, r5
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	42a6      	cmp	r6, r4
 800505e:	d109      	bne.n	8005074 <__libc_init_array+0x24>
 8005060:	2600      	movs	r6, #0
 8005062:	f000 f819 	bl	8005098 <_init>
 8005066:	4c0a      	ldr	r4, [pc, #40]	@ (8005090 <__libc_init_array+0x40>)
 8005068:	4d0a      	ldr	r5, [pc, #40]	@ (8005094 <__libc_init_array+0x44>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	42a6      	cmp	r6, r4
 8005070:	d105      	bne.n	800507e <__libc_init_array+0x2e>
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	00b3      	lsls	r3, r6, #2
 8005076:	58eb      	ldr	r3, [r5, r3]
 8005078:	4798      	blx	r3
 800507a:	3601      	adds	r6, #1
 800507c:	e7ee      	b.n	800505c <__libc_init_array+0xc>
 800507e:	00b3      	lsls	r3, r6, #2
 8005080:	58eb      	ldr	r3, [r5, r3]
 8005082:	4798      	blx	r3
 8005084:	3601      	adds	r6, #1
 8005086:	e7f2      	b.n	800506e <__libc_init_array+0x1e>
 8005088:	08005324 	.word	0x08005324
 800508c:	08005324 	.word	0x08005324
 8005090:	08005328 	.word	0x08005328
 8005094:	08005324 	.word	0x08005324

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
