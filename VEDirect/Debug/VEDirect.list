
VEDirect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062ac  080062ac  00008274  2**0
                  CONTENTS
  4 .ARM          00000008  080062ac  080062ac  000072ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062b4  080062b4  00008274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b4  080062b4  000072b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  080062bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000274  08006530  00008274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012e0  08006530  000082e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111a3  00000000  00000000  0000829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8c  00000000  00000000  0001943f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0001c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000925  00000000  00000000  0001ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c6  00000000  00000000  0001d7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011006  00000000  00000000  000379c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e180  00000000  00000000  000489c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000e6b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e9cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000274 	.word	0x20000274
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005fb8 	.word	0x08005fb8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000278 	.word	0x20000278
 8000100:	08005fb8 	.word	0x08005fb8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	@ (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	@ (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	@ (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <_DoInit+0x90>)
 800065c:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2203      	movs	r2, #3
 8000662:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2203      	movs	r2, #3
 8000668:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <_DoInit+0x94>)
 800066e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	4a1e      	ldr	r2, [pc, #120]	@ (80006ec <_DoInit+0x98>)
 8000674:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2280      	movs	r2, #128	@ 0x80
 800067a:	00d2      	lsls	r2, r2, #3
 800067c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <_DoInit+0x94>)
 8000694:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	4a15      	ldr	r2, [pc, #84]	@ (80006f0 <_DoInit+0x9c>)
 800069a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	2210      	movs	r2, #16
 80006a0:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	e00c      	b.n	80006d4 <_DoInit+0x80>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	220f      	movs	r2, #15
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4a0c      	ldr	r2, [pc, #48]	@ (80006f4 <_DoInit+0xa0>)
 80006c2:	5cd1      	ldrb	r1, [r2, r3]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	18d3      	adds	r3, r2, r3
 80006ca:	1c0a      	adds	r2, r1, #0
 80006cc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d9ef      	bls.n	80006ba <_DoInit+0x66>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000290 	.word	0x20000290
 80006e8:	08005fd0 	.word	0x08005fd0
 80006ec:	20000338 	.word	0x20000338
 80006f0:	20000738 	.word	0x20000738
 80006f4:	080060dc 	.word	0x080060dc

080006f8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	429a      	cmp	r2, r3
 800071a:	d905      	bls.n	8000728 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
 8000726:	e007      	b.n	8000738 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	69b9      	ldr	r1, [r7, #24]
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	18d3      	adds	r3, r2, r3
 8000734:	3b01      	subs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	4293      	cmp	r3, r2
 8000744:	d900      	bls.n	8000748 <_WriteBlocking+0x50>
 8000746:	0013      	movs	r3, r2
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800074a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4293      	cmp	r3, r2
 8000750:	d900      	bls.n	8000754 <_WriteBlocking+0x5c>
 8000752:	0013      	movs	r3, r2
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	0018      	movs	r0, r3
 8000768:	f004 fef5 	bl	8005556 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800076c:	6a3a      	ldr	r2, [r7, #32]
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000784:	69fa      	ldr	r2, [r7, #28]
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	429a      	cmp	r2, r3
 8000794:	d101      	bne.n	800079a <_WriteBlocking+0xa2>
      WrOff = 0u;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1b3      	bne.n	800070e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007a6:	6a3b      	ldr	r3, [r7, #32]
}
 80007a8:	0018      	movs	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b00a      	add	sp, #40	@ 0x28
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d910      	bls.n	80007f6 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	18d3      	adds	r3, r2, r3
 80007dc:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f004 feb6 	bl	8005556 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	18d2      	adds	r2, r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007f4:	e01e      	b.n	8000834 <_WriteNoCheck+0x84>
    NumBytesAtOnce = Rem;
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	0018      	movs	r0, r3
 800080c:	f004 fea3 	bl	8005556 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	18d1      	adds	r1, r2, r3
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	0018      	movs	r0, r3
 800082a:	f004 fe94 	bl	8005556 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	60da      	str	r2, [r3, #12]
}
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b008      	add	sp, #32
 800083a:	bd80      	pop	{r7, pc}

0800083c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d808      	bhi.n	800086a <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	1ad2      	subs	r2, r2, r3
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	18d3      	adds	r3, r2, r3
 8000864:	3b01      	subs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e004      	b.n	8000874 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	3b01      	subs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000874:	697b      	ldr	r3, [r7, #20]
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b006      	add	sp, #24
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	0013      	movs	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	189b      	adds	r3, r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a23      	ldr	r2, [pc, #140]	@ (800092c <SEGGER_RTT_WriteNoLock+0xac>)
 800089e:	189b      	adds	r3, r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d02e      	beq.n	8000908 <SEGGER_RTT_WriteNoLock+0x88>
 80008aa:	d836      	bhi.n	800091a <SEGGER_RTT_WriteNoLock+0x9a>
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <SEGGER_RTT_WriteNoLock+0x36>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d016      	beq.n	80008e2 <SEGGER_RTT_WriteNoLock+0x62>
 80008b4:	e031      	b.n	800091a <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ffbf 	bl	800083c <_GetAvailWriteSpace>
 80008be:	0003      	movs	r3, r0
 80008c0:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d202      	bcs.n	80008d0 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008ce:	e027      	b.n	8000920 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	69b9      	ldr	r1, [r7, #24]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff ff68 	bl	80007b0 <_WriteNoCheck>
    break;
 80008e0:	e01e      	b.n	8000920 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff ffa9 	bl	800083c <_GetAvailWriteSpace>
 80008ea:	0003      	movs	r3, r0
 80008ec:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d900      	bls.n	80008f8 <SEGGER_RTT_WriteNoLock+0x78>
 80008f6:	0013      	movs	r3, r2
 80008f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	69b9      	ldr	r1, [r7, #24]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff ff55 	bl	80007b0 <_WriteNoCheck>
    break;
 8000906:	e00b      	b.n	8000920 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	69b9      	ldr	r1, [r7, #24]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fef2 	bl	80006f8 <_WriteBlocking>
 8000914:	0003      	movs	r3, r0
 8000916:	61fb      	str	r3, [r7, #28]
    break;
 8000918:	e002      	b.n	8000920 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    break;
 800091e:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8000920:	69fb      	ldr	r3, [r7, #28]
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b008      	add	sp, #32
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	20000290 	.word	0x20000290

08000930 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <SEGGER_RTT_Write+0x4c>)
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <SEGGER_RTT_Write+0x1e>
 800094a:	f7ff fe83 	bl	8000654 <_DoInit>
  SEGGER_RTT_LOCK();
 800094e:	f3ef 8310 	mrs	r3, PRIMASK
 8000952:	2101      	movs	r1, #1
 8000954:	f381 8810 	msr	PRIMASK, r1
 8000958:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff8d 	bl	8000880 <SEGGER_RTT_WriteNoLock>
 8000966:	0003      	movs	r3, r0
 8000968:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8000970:	697b      	ldr	r3, [r7, #20]
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b008      	add	sp, #32
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	20000290 	.word	0x20000290

08000980 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d101      	bne.n	80009a0 <SEGGER_RTT_ConfigUpBuffer+0x20>
 800099c:	f7ff fe5a 	bl	8000654 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <SEGGER_RTT_ConfigUpBuffer+0x90>)
 80009a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d829      	bhi.n	80009fe <SEGGER_RTT_ConfigUpBuffer+0x7e>
    SEGGER_RTT_LOCK();
 80009aa:	f3ef 8310 	mrs	r3, PRIMASK
 80009ae:	2101      	movs	r1, #1
 80009b0:	f381 8810 	msr	PRIMASK, r1
 80009b4:	61bb      	str	r3, [r7, #24]
    pUp = &pRTTCB->aUp[BufferIndex];
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	0013      	movs	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <SEGGER_RTT_ConfigUpBuffer+0x6c>
      pUp->sName        = sName;
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	601a      	str	r2, [r3, #0]
      pUp->pBuffer      = (char*)pBuffer;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	605a      	str	r2, [r3, #4]
      pUp->SizeOfBuffer = BufferSize;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	609a      	str	r2, [r3, #8]
      pUp->RdOff        = 0u;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
      pUp->WrOff        = 0u;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    }
    pUp->Flags          = Flags;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009f0:	615a      	str	r2, [r3, #20]
    SEGGER_RTT_UNLOCK();
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f383 8810 	msr	PRIMASK, r3
    r =  0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fc:	e002      	b.n	8000a04 <SEGGER_RTT_ConfigUpBuffer+0x84>
  } else {
    r = -1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	425b      	negs	r3, r3
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b00a      	add	sp, #40	@ 0x28
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000290 	.word	0x20000290

08000a14 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  _DoInit();
 8000a18:	f7ff fe1c 	bl	8000654 <_DoInit>
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0019      	movs	r1, r3
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff ff7a 	bl	8000930 <SEGGER_RTT_Write>
  return len;
 8000a3c:	683b      	ldr	r3, [r7, #0]
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_DMA_Init+0x38>)
 8000a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f001 f99c 	bl	8001da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a70:	2009      	movs	r0, #9
 8000a72:	f001 f9ae 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	240c      	movs	r4, #12
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2314      	movs	r3, #20
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f004 fccb 	bl	8005430 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000ab8:	2120      	movs	r1, #32
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_GPIO_Init+0x9c>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ae2:	23a0      	movs	r3, #160	@ 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fe10 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000af0:	0021      	movs	r1, r4
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2220      	movs	r2, #32
 8000af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2202      	movs	r2, #2
 8000b08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	187a      	adds	r2, r7, r1
 8000b0c:	23a0      	movs	r3, #160	@ 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fc98 	bl	8002448 <HAL_GPIO_Init>

}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b009      	add	sp, #36	@ 0x24
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	40021000 	.word	0x40021000

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b0ad      	sub	sp, #180	@ 0xb4
 8000b28:	af2a      	add	r7, sp, #168	@ 0xa8
	setvbuf(stdout, NULL, _IONBF, 0);
 8000b2a:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <main+0xa4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6898      	ldr	r0, [r3, #8]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2202      	movs	r2, #2
 8000b34:	2100      	movs	r1, #0
 8000b36:	f004 fad9 	bl	80050ec <setvbuf>

  /* USER CODE BEGIN 1 */
	checksum = 0;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <main+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f001 f800 	bl	8001b44 <HAL_Init>

 
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f850 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff ff9c 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4c:	f7ff ff7c 	bl	8000a48 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b50:	f000 fa84 	bl	800105c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000b54:	f000 fa34 	bl	8000fc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //test_buffer = "\r\nPID\t0xA389\r\nV\t11980\r\nVS\t-13\r\nI\t0\r\nP\t0\r\nCE\t0\r\nSOC\t1000\r\nTTG\t-1\r\nAlarm\tOFF\r\nAR\t0\r\nBMV\tSmartShunt 500A/50mV\r\nFW\t0404\r\nChecksum\tQ"


  __HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_IDLE);
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <main+0xac>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(&huart3, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <main+0xb0>)
 8000b62:	6859      	ldr	r1, [r3, #4]
 8000b64:	1dfc      	adds	r4, r7, #7
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0xac>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f004 f835 	bl	8004bdc <HAL_UARTEx_ReceiveToIdle_DMA>
 8000b72:	0003      	movs	r3, r0
 8000b74:	7023      	strb	r3, [r4, #0]
 // __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);
  SEGGER_RTT_ConfigUpBuffer  (0,  NULL  ,  NULL  , 0,  SEGGER_RTT_MODE_NO_BLOCK_SKIP  );
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fefd 	bl	8000980 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_Init();
 8000b86:	f7ff ff45 	bl	8000a14 <SEGGER_RTT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		parse_frame(test_buffer);
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <main+0xb4>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 f879 	bl	8000c84 <parse_frame>
				  printf("parsed: %s %s\n", ve_data.fields[0].label,ve_data.fields[0].value);
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <main+0xb8>)
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <main+0xb8>)
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <main+0xbc>)
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f004 fa35 	bl	800500c <iprintf>

				 // Map parsed fields to the structure
				map_fields_to_structure(ve_data, &g_ve_direct_channels);
 8000ba2:	4c0e      	ldr	r4, [pc, #56]	@ (8000bdc <main+0xb8>)
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <main+0xc0>)
 8000ba6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ba8:	466b      	mov	r3, sp
 8000baa:	0018      	movs	r0, r3
 8000bac:	0023      	movs	r3, r4
 8000bae:	3310      	adds	r3, #16
 8000bb0:	22a4      	movs	r2, #164	@ 0xa4
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	f004 fccf 	bl	8005556 <memcpy>
 8000bb8:	6820      	ldr	r0, [r4, #0]
 8000bba:	6861      	ldr	r1, [r4, #4]
 8000bbc:	68a2      	ldr	r2, [r4, #8]
 8000bbe:	68e3      	ldr	r3, [r4, #12]
 8000bc0:	f000 fb62 	bl	8001288 <map_fields_to_structure>
  {
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	e7e0      	b.n	8000b8a <main+0x66>
 8000bc8:	20000224 	.word	0x20000224
 8000bcc:	20000b48 	.word	0x20000b48
 8000bd0:	20000c98 	.word	0x20000c98
 8000bd4:	20000200 	.word	0x20000200
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000b4c 	.word	0x20000b4c
 8000be0:	08005fe0 	.word	0x08005fe0
 8000be4:	20000d88 	.word	0x20000d88

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b093      	sub	sp, #76	@ 0x4c
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	2410      	movs	r4, #16
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2338      	movs	r3, #56	@ 0x38
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f004 fc19 	bl	8005430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfe:	003b      	movs	r3, r7
 8000c00:	0018      	movs	r0, r3
 8000c02:	2310      	movs	r3, #16
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f004 fc12 	bl	8005430 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fd9b 	bl	800274c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2202      	movs	r2, #2
 8000c1a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	0052      	lsls	r2, r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2240      	movs	r2, #64	@ 0x40
 8000c2e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fdd3 	bl	80027e4 <HAL_RCC_OscConfig>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c42:	f000 f819 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	003b      	movs	r3, r7
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c58:	003b      	movs	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5e:	003b      	movs	r3, r7
 8000c60:	2100      	movs	r1, #0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 f8d8 	bl	8002e18 <HAL_RCC_ClockConfig>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c6c:	f000 f804 	bl	8000c78 <Error_Handler>
  }
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b013      	add	sp, #76	@ 0x4c
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <parse_frame>:

    return checksum_calculated;
}

//parses the whole string frame to array of structs
void parse_frame(const char *input, vedirect_field_t fields[]) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
    const char *start = input;  // Pointer to start of the string
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	61fb      	str	r3, [r7, #28]
    const char *end = input + strlen(input);  // Pointer to the end of the string
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fa3f 	bl	8000118 <strlen>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
    int count = 0;  // Counter for fields
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]

    while (start < end) {
 8000ca6:	e031      	b.n	8000d0c <parse_frame+0x88>
        // Find the position of the next \r\n (end of label-value pair)
        const char *line_end = strstr(start, "\r\n");
 8000ca8:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <parse_frame+0xb4>)
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f004 fbd4 	bl	800545c <strstr>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	613b      	str	r3, [r7, #16]
        if (!line_end) {
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d02b      	beq.n	8000d16 <parse_frame+0x92>
            break;  // No more lines
        }

        // Find the position of the \t (delimiter between label and value)
        const char *tab = strchr(start, '\t');
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2109      	movs	r1, #9
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f004 fbbc 	bl	8005440 <strchr>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	60fb      	str	r3, [r7, #12]
        if (tab && tab < line_end) {
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d019      	beq.n	8000d06 <parse_frame+0x82>
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d215      	bcs.n	8000d06 <parse_frame+0x82>
            fields[count].label = (char *)start;       // Point to the start of the label
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	601a      	str	r2, [r3, #0]
            fields[count].value = (char *)(tab + 1);   // Point to the start of the value
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	3201      	adds	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]

            // Null terminate the label and value temporarily for printing or further processing
            *((char *)tab) = '\0';            // Null terminate the label
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
            *((char *)line_end) = '\0';       // Null terminate the value
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

            count++;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	3301      	adds	r3, #1
 8000d04:	61bb      	str	r3, [r7, #24]
        }

        // Move the start pointer to the next line
        start = line_end + 2;  // Skip \r\n
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	3302      	adds	r3, #2
 8000d0a:	61fb      	str	r3, [r7, #28]
    while (start < end) {
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3c9      	bcc.n	8000ca8 <parse_frame+0x24>
 8000d14:	e000      	b.n	8000d18 <parse_frame+0x94>
            break;  // No more lines
 8000d16:	46c0      	nop			@ (mov r8, r8)
    }

    // Add a sentinel NULL at the end to mark the end of the array
    fields[count].label = NULL;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	18d3      	adds	r3, r2, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    fields[count].value = NULL;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b008      	add	sp, #32
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	08005ff0 	.word	0x08005ff0

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d5e:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d60:	2180      	movs	r1, #128	@ 0x80
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	430a      	orrs	r2, r1
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_MspInit+0x44>)
 8000d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	4013      	ands	r3, r2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 ff34 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <DMA1_Channel1_IRQHandler+0x14>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f001 fa00 	bl	80021c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	20000d2c 	.word	0x20000d2c

08000dd0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <USART3_4_LPUART1_IRQHandler+0x14>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 fbd6 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000c98 	.word	0x20000c98

08000de8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfa:	e000      	b.n	8000dfe <_read+0x16>
 8000dfc:	bf00      	nop
 8000dfe:	0001      	movs	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
  }

  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b006      	add	sp, #24
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	425b      	negs	r3, r3
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	0192      	lsls	r2, r2, #6
 8000e46:	605a      	str	r2, [r3, #4]
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b004      	add	sp, #16
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f004 fb26 	bl	80054fc <__errno>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	425b      	negs	r3, r3
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	18d2      	adds	r2, r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b006      	add	sp, #24
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20009000 	.word	0x20009000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000c00 	.word	0x20000c00
 8000ee4:	200012e0 	.word	0x200012e0

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_UARTEx_RxEventCallback>:
#define BUFFER_SIZE 512  // Large enough to accommodate more frames

extern UART_HandleTypeDef huart3;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	000a      	movs	r2, r1
 8000efe:	1cbb      	adds	r3, r7, #2
 8000f00:	801a      	strh	r2, [r3, #0]
    if (huart == &huart3)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_UARTEx_RxEventCallback+0x50>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d117      	bne.n	8000f3a <HAL_UARTEx_RxEventCallback+0x46>
    {
    	 // Swap the buffers so the main loop can access the received data
        volatile uint8_t *p_tmp = protocol_rx_buff.p_rx_buff_user;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
        protocol_rx_buff.p_rx_buff_user = protocol_rx_buff.p_rx_buff_reception;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f16:	601a      	str	r2, [r3, #0]
        protocol_rx_buff.p_rx_buff_reception = p_tmp;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	605a      	str	r2, [r3, #4]

        protocol_rx_buff.new_data_sz = Size;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f20:	1cba      	adds	r2, r7, #2
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	811a      	strh	r2, [r3, #8]

        printf("%s\n", (char *)protocol_rx_buff.p_rx_buff_reception);
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f004 f8d4 	bl	80050d8 <puts>
        
        vedirect_rx_upd_rx_timestamp();
 8000f30:	f000 f840 	bl	8000fb4 <vedirect_rx_upd_rx_timestamp>
        vedirect_rx_set_state(VEDIRECT_RX_State_DATA_READY);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f000 f82d 	bl	8000f94 <vedirect_rx_set_state>
    }
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	20000c98 	.word	0x20000c98
 8000f48:	20000200 	.word	0x20000200

08000f4c <HAL_UART_RxCpltCallback>:

// DMA Transfer Complete callback
void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <HAL_UART_RxCpltCallback+0x40>)
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d113      	bne.n	8000f84 <HAL_UART_RxCpltCallback+0x38>
    {
        // This can be used to handle data if full buffer is filled
        // For example, reset DMA here if necessary

        // Reset the DMA for next reception
        __HAL_DMA_DISABLE(huart->hdmarx); // Disable the DMA stream
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	589b      	ldr	r3, [r3, r2]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2180      	movs	r1, #128	@ 0x80
 8000f6a:	585b      	ldr	r3, [r3, r1]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
        //memset(&protocol_rx_buff.p_rx_buff_user, 0, BUFFER_SIZE);
        //memset(&protocol_rx_buff.p_rx_buff_reception, 0, BUFFER_SIZE);
        HAL_UARTEx_ReceiveToIdle_DMA(huart, protocol_rx_buff.p_rx_buff_reception, BUFFER_SIZE);
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_UART_RxCpltCallback+0x44>)
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	009a      	lsls	r2, r3, #2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f003 fe2c 	bl	8004bdc <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8000f84:	46c0      	nop			@ (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000c98 	.word	0x20000c98
 8000f90:	20000200 	.word	0x20000200

08000f94 <vedirect_rx_set_state>:
    }
}

// Function to set the state
void vedirect_rx_set_state(VEDIRECT_RX_State new_state)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	701a      	strb	r2, [r3, #0]
    rx_state = new_state;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <vedirect_rx_set_state+0x1c>)
 8000fa2:	1dfa      	adds	r2, r7, #7
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	701a      	strb	r2, [r3, #0]
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000b49 	.word	0x20000b49

08000fb4 <vedirect_rx_upd_rx_timestamp>:
    return rx_state;
}

// Function to update the timestamp (dummy function for example)
void vedirect_rx_upd_rx_timestamp(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    // Implement timestamp update logic if needed
    // For now, it's just a placeholder function
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fc6:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <MX_USART2_UART_Init+0x98>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fca:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fcc:	22e1      	movs	r2, #225	@ 0xe1
 8000fce:	0252      	lsls	r2, r2, #9
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 800100a:	0018      	movs	r0, r3
 800100c:	f002 fa66 	bl	80034dc <HAL_UART_Init>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001014:	f7ff fe30 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 800101a:	2100      	movs	r1, #0
 800101c:	0018      	movs	r0, r3
 800101e:	f003 fd5b 	bl	8004ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001026:	f7ff fe27 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 800102c:	2100      	movs	r1, #0
 800102e:	0018      	movs	r0, r3
 8001030:	f003 fd92 	bl	8004b58 <HAL_UARTEx_SetRxFifoThreshold>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001038:	f7ff fe1e 	bl	8000c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <MX_USART2_UART_Init+0x94>)
 800103e:	0018      	movs	r0, r3
 8001040:	f003 fd10 	bl	8004a64 <HAL_UARTEx_DisableFifoMode>
 8001044:	1e03      	subs	r3, r0, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001048:	f7ff fe16 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000c04 	.word	0x20000c04
 8001058:	40004400 	.word	0x40004400

0800105c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001062:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <MX_USART3_UART_Init+0x64>)
 8001064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001068:	2296      	movs	r2, #150	@ 0x96
 800106a:	01d2      	lsls	r2, r2, #7
 800106c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <MX_USART3_UART_Init+0x60>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f002 fa18 	bl	80034dc <HAL_UART_Init>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b0:	f7ff fde2 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	20000c98 	.word	0x20000c98
 80010c0:	40004800 	.word	0x40004800

080010c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b099      	sub	sp, #100	@ 0x64
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	234c      	movs	r3, #76	@ 0x4c
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	0018      	movs	r0, r3
 80010d2:	2314      	movs	r3, #20
 80010d4:	001a      	movs	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f004 f9aa 	bl	8005430 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	2418      	movs	r4, #24
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	0018      	movs	r0, r3
 80010e2:	2334      	movs	r3, #52	@ 0x34
 80010e4:	001a      	movs	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f004 f9a2 	bl	8005430 <memset>
  if(uartHandle->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <HAL_UART_MspInit+0x18c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13f      	bne.n	8001176 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2202      	movs	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	193b      	adds	r3, r7, r4
 8001104:	0018      	movs	r0, r3
 8001106:	f002 f831 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110e:	f7ff fdb3 	bl	8000c78 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001112:	4b50      	ldr	r3, [pc, #320]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001116:	4b4f      	ldr	r3, [pc, #316]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0289      	lsls	r1, r1, #10
 800111c:	430a      	orrs	r2, r1
 800111e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001120:	4b4c      	ldr	r3, [pc, #304]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	029b      	lsls	r3, r3, #10
 8001128:	4013      	ands	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b49      	ldr	r3, [pc, #292]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001132:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	@ 0x34
 800113a:	4b46      	ldr	r3, [pc, #280]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	214c      	movs	r1, #76	@ 0x4c
 8001148:	187b      	adds	r3, r7, r1
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2201      	movs	r2, #1
 8001164:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	187a      	adds	r2, r7, r1
 8001168:	23a0      	movs	r3, #160	@ 0xa0
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f96a 	bl	8002448 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001174:	e067      	b.n	8001246 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a37      	ldr	r2, [pc, #220]	@ (8001258 <HAL_UART_MspInit+0x194>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d162      	bne.n	8001246 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001180:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001184:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	02c9      	lsls	r1, r1, #11
 800118a:	430a      	orrs	r2, r1
 800118c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800118e:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <HAL_UART_MspInit+0x190>)
 8001190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001192:	2380      	movs	r3, #128	@ 0x80
 8001194:	02db      	lsls	r3, r3, #11
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_UART_MspInit+0x190>)
 800119e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <HAL_UART_MspInit+0x190>)
 80011a2:	2104      	movs	r1, #4
 80011a4:	430a      	orrs	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <HAL_UART_MspInit+0x190>)
 80011aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ac:	2204      	movs	r2, #4
 80011ae:	4013      	ands	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011b4:	214c      	movs	r1, #76	@ 0x4c
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2230      	movs	r2, #48	@ 0x30
 80011ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2202      	movs	r2, #2
 80011c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	4a21      	ldr	r2, [pc, #132]	@ (800125c <HAL_UART_MspInit+0x198>)
 80011d8:	0019      	movs	r1, r3
 80011da:	0010      	movs	r0, r2
 80011dc:	f001 f934 	bl	8002448 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 80011e2:	4a20      	ldr	r2, [pc, #128]	@ (8001264 <HAL_UART_MspInit+0x1a0>)
 80011e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 80011e8:	2236      	movs	r2, #54	@ 0x36
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001204:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	0152      	lsls	r2, r2, #5
 8001216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fdf6 	bl	8001e0c <HAL_DMA_Init>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8001224:	f7ff fd28 	bl	8000c78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2180      	movs	r1, #128	@ 0x80
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 800122e:	505a      	str	r2, [r3, r1]
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <HAL_UART_MspInit+0x19c>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 2, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	201d      	movs	r0, #29
 800123c:	f000 fdb4 	bl	8001da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8001240:	201d      	movs	r0, #29
 8001242:	f000 fdc6 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b019      	add	sp, #100	@ 0x64
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	40004400 	.word	0x40004400
 8001254:	40021000 	.word	0x40021000
 8001258:	40004800 	.word	0x40004800
 800125c:	50000800 	.word	0x50000800
 8001260:	20000d2c 	.word	0x20000d2c
 8001264:	40020008 	.word	0x40020008

08001268 <convert_to_uint32>:
#include <ve_direct.h>

ve_direct_data_t g_ve_direct_channels[VE_DIRECT_CH_MAX];

// Helper function to convert a string to ve_direct_data_base_type_t (uint32_t)
ve_direct_data_base_type_t convert_to_uint32(const char *str) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    return (ve_direct_data_base_type_t)strtoul(str, NULL, 0);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f003 fdf8 	bl	8004e6c <strtoul>
 800127c:	0003      	movs	r3, r0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <map_fields_to_structure>:
    } while (0)

//int parse(ve_direct_data_t * pStruct, uint32_t label, )

// Function to map fields into the structure using macros
void map_fields_to_structure(vedirect_data_t ve_data, ve_direct_data_t ve_direct_data) {
 8001288:	b084      	sub	sp, #16
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	2420      	movs	r4, #32
 8001292:	193c      	adds	r4, r7, r4
 8001294:	6020      	str	r0, [r4, #0]
 8001296:	6061      	str	r1, [r4, #4]
 8001298:	60a2      	str	r2, [r4, #8]
 800129a:	60e3      	str	r3, [r4, #12]
    for (int i = 0; i < ve_data.field_count; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	f000 fc09 	bl	8001ab6 <map_fields_to_structure+0x82e>
        const char *label = ve_data.fields[i].label;
 80012a4:	2420      	movs	r4, #32
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	00d2      	lsls	r2, r2, #3
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	60bb      	str	r3, [r7, #8]
        const char *value = ve_data.fields[i].value;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	00d2      	lsls	r2, r2, #3
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	3304      	adds	r3, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	607b      	str	r3, [r7, #4]
        PARSE_FIELD(ve_direct_data.label, "V", value);
 80012be:	4ad1      	ldr	r2, [pc, #836]	@ (8001604 <map_fields_to_structure+0x37c>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7fe ff1d 	bl	8000104 <strcmp>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d10a      	bne.n	80012e4 <map_fields_to_structure+0x5c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ffc9 	bl	8001268 <convert_to_uint32>
 80012d6:	0002      	movs	r2, r0
 80012d8:	23b4      	movs	r3, #180	@ 0xb4
 80012da:	191b      	adds	r3, r3, r4
 80012dc:	19db      	adds	r3, r3, r7
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	f000 fbe6 	bl	8001ab0 <map_fields_to_structure+0x828>
 80012e4:	4ac8      	ldr	r2, [pc, #800]	@ (8001608 <map_fields_to_structure+0x380>)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff0a 	bl	8000104 <strcmp>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d10b      	bne.n	800130c <map_fields_to_structure+0x84>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff ffb6 	bl	8001268 <convert_to_uint32>
 80012fc:	0002      	movs	r2, r0
 80012fe:	23b4      	movs	r3, #180	@ 0xb4
 8001300:	2120      	movs	r1, #32
 8001302:	185b      	adds	r3, r3, r1
 8001304:	19db      	adds	r3, r3, r7
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	f000 fbd2 	bl	8001ab0 <map_fields_to_structure+0x828>
 800130c:	4abf      	ldr	r2, [pc, #764]	@ (800160c <map_fields_to_structure+0x384>)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f7fe fef6 	bl	8000104 <strcmp>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d10b      	bne.n	8001334 <map_fields_to_structure+0xac>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ffa2 	bl	8001268 <convert_to_uint32>
 8001324:	0002      	movs	r2, r0
 8001326:	23b4      	movs	r3, #180	@ 0xb4
 8001328:	2120      	movs	r1, #32
 800132a:	185b      	adds	r3, r3, r1
 800132c:	19db      	adds	r3, r3, r7
 800132e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001330:	f000 fbbe 	bl	8001ab0 <map_fields_to_structure+0x828>
 8001334:	4ab6      	ldr	r2, [pc, #728]	@ (8001610 <map_fields_to_structure+0x388>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f7fe fee2 	bl	8000104 <strcmp>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d10b      	bne.n	800135c <map_fields_to_structure+0xd4>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff8e 	bl	8001268 <convert_to_uint32>
 800134c:	0002      	movs	r2, r0
 800134e:	23b4      	movs	r3, #180	@ 0xb4
 8001350:	2120      	movs	r1, #32
 8001352:	185b      	adds	r3, r3, r1
 8001354:	19db      	adds	r3, r3, r7
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001358:	f000 fbaa 	bl	8001ab0 <map_fields_to_structure+0x828>
 800135c:	4aad      	ldr	r2, [pc, #692]	@ (8001614 <map_fields_to_structure+0x38c>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fece 	bl	8000104 <strcmp>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d10b      	bne.n	8001384 <map_fields_to_structure+0xfc>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff ff7a 	bl	8001268 <convert_to_uint32>
 8001374:	0002      	movs	r2, r0
 8001376:	23b4      	movs	r3, #180	@ 0xb4
 8001378:	2120      	movs	r1, #32
 800137a:	185b      	adds	r3, r3, r1
 800137c:	19db      	adds	r3, r3, r7
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001380:	f000 fb96 	bl	8001ab0 <map_fields_to_structure+0x828>
 8001384:	4aa4      	ldr	r2, [pc, #656]	@ (8001618 <map_fields_to_structure+0x390>)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe feba 	bl	8000104 <strcmp>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d10b      	bne.n	80013ac <map_fields_to_structure+0x124>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff ff66 	bl	8001268 <convert_to_uint32>
 800139c:	0002      	movs	r2, r0
 800139e:	23b4      	movs	r3, #180	@ 0xb4
 80013a0:	2120      	movs	r1, #32
 80013a2:	185b      	adds	r3, r3, r1
 80013a4:	19db      	adds	r3, r3, r7
 80013a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80013a8:	f000 fb82 	bl	8001ab0 <map_fields_to_structure+0x828>
 80013ac:	4a9b      	ldr	r2, [pc, #620]	@ (800161c <map_fields_to_structure+0x394>)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe fea6 	bl	8000104 <strcmp>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d10b      	bne.n	80013d4 <map_fields_to_structure+0x14c>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff ff52 	bl	8001268 <convert_to_uint32>
 80013c4:	0002      	movs	r2, r0
 80013c6:	23b4      	movs	r3, #180	@ 0xb4
 80013c8:	2120      	movs	r1, #32
 80013ca:	185b      	adds	r3, r3, r1
 80013cc:	19db      	adds	r3, r3, r7
 80013ce:	649a      	str	r2, [r3, #72]	@ 0x48
 80013d0:	f000 fb6e 	bl	8001ab0 <map_fields_to_structure+0x828>
 80013d4:	4a92      	ldr	r2, [pc, #584]	@ (8001620 <map_fields_to_structure+0x398>)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f7fe fe92 	bl	8000104 <strcmp>
 80013e0:	1e03      	subs	r3, r0, #0
 80013e2:	d10b      	bne.n	80013fc <map_fields_to_structure+0x174>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff ff3e 	bl	8001268 <convert_to_uint32>
 80013ec:	0002      	movs	r2, r0
 80013ee:	23b4      	movs	r3, #180	@ 0xb4
 80013f0:	2120      	movs	r1, #32
 80013f2:	185b      	adds	r3, r3, r1
 80013f4:	19db      	adds	r3, r3, r7
 80013f6:	2198      	movs	r1, #152	@ 0x98
 80013f8:	505a      	str	r2, [r3, r1]
 80013fa:	e359      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80013fc:	4a89      	ldr	r2, [pc, #548]	@ (8001624 <map_fields_to_structure+0x39c>)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f7fe fe7e 	bl	8000104 <strcmp>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d10b      	bne.n	8001424 <map_fields_to_structure+0x19c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff ff2a 	bl	8001268 <convert_to_uint32>
 8001414:	0002      	movs	r2, r0
 8001416:	23b4      	movs	r3, #180	@ 0xb4
 8001418:	2120      	movs	r1, #32
 800141a:	185b      	adds	r3, r3, r1
 800141c:	19db      	adds	r3, r3, r7
 800141e:	219c      	movs	r1, #156	@ 0x9c
 8001420:	505a      	str	r2, [r3, r1]
 8001422:	e345      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001424:	4a80      	ldr	r2, [pc, #512]	@ (8001628 <map_fields_to_structure+0x3a0>)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	0011      	movs	r1, r2
 800142a:	0018      	movs	r0, r3
 800142c:	f7fe fe6a 	bl	8000104 <strcmp>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d10b      	bne.n	800144c <map_fields_to_structure+0x1c4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff16 	bl	8001268 <convert_to_uint32>
 800143c:	0002      	movs	r2, r0
 800143e:	23b4      	movs	r3, #180	@ 0xb4
 8001440:	2120      	movs	r1, #32
 8001442:	185b      	adds	r3, r3, r1
 8001444:	19db      	adds	r3, r3, r7
 8001446:	21a0      	movs	r1, #160	@ 0xa0
 8001448:	505a      	str	r2, [r3, r1]
 800144a:	e331      	b.n	8001ab0 <map_fields_to_structure+0x828>
 800144c:	4a77      	ldr	r2, [pc, #476]	@ (800162c <map_fields_to_structure+0x3a4>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7fe fe56 	bl	8000104 <strcmp>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d10b      	bne.n	8001474 <map_fields_to_structure+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0018      	movs	r0, r3
 8001460:	f7ff ff02 	bl	8001268 <convert_to_uint32>
 8001464:	0002      	movs	r2, r0
 8001466:	23b4      	movs	r3, #180	@ 0xb4
 8001468:	2120      	movs	r1, #32
 800146a:	185b      	adds	r3, r3, r1
 800146c:	19db      	adds	r3, r3, r7
 800146e:	21a4      	movs	r1, #164	@ 0xa4
 8001470:	505a      	str	r2, [r3, r1]
 8001472:	e31d      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001474:	4a6e      	ldr	r2, [pc, #440]	@ (8001630 <map_fields_to_structure+0x3a8>)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	0011      	movs	r1, r2
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fe42 	bl	8000104 <strcmp>
 8001480:	1e03      	subs	r3, r0, #0
 8001482:	d10b      	bne.n	800149c <map_fields_to_structure+0x214>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff feee 	bl	8001268 <convert_to_uint32>
 800148c:	0002      	movs	r2, r0
 800148e:	23b4      	movs	r3, #180	@ 0xb4
 8001490:	2120      	movs	r1, #32
 8001492:	185b      	adds	r3, r3, r1
 8001494:	19db      	adds	r3, r3, r7
 8001496:	21a8      	movs	r1, #168	@ 0xa8
 8001498:	505a      	str	r2, [r3, r1]
 800149a:	e309      	b.n	8001ab0 <map_fields_to_structure+0x828>
 800149c:	4a65      	ldr	r2, [pc, #404]	@ (8001634 <map_fields_to_structure+0x3ac>)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7fe fe2e 	bl	8000104 <strcmp>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d10b      	bne.n	80014c4 <map_fields_to_structure+0x23c>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff feda 	bl	8001268 <convert_to_uint32>
 80014b4:	0002      	movs	r2, r0
 80014b6:	23b4      	movs	r3, #180	@ 0xb4
 80014b8:	2120      	movs	r1, #32
 80014ba:	185b      	adds	r3, r3, r1
 80014bc:	19db      	adds	r3, r3, r7
 80014be:	21ac      	movs	r1, #172	@ 0xac
 80014c0:	505a      	str	r2, [r3, r1]
 80014c2:	e2f5      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80014c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001638 <map_fields_to_structure+0x3b0>)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe1a 	bl	8000104 <strcmp>
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	d10b      	bne.n	80014ec <map_fields_to_structure+0x264>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff fec6 	bl	8001268 <convert_to_uint32>
 80014dc:	0002      	movs	r2, r0
 80014de:	23b4      	movs	r3, #180	@ 0xb4
 80014e0:	2120      	movs	r1, #32
 80014e2:	185b      	adds	r3, r3, r1
 80014e4:	19db      	adds	r3, r3, r7
 80014e6:	21b0      	movs	r1, #176	@ 0xb0
 80014e8:	505a      	str	r2, [r3, r1]
 80014ea:	e2e1      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80014ec:	4a53      	ldr	r2, [pc, #332]	@ (800163c <map_fields_to_structure+0x3b4>)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7fe fe06 	bl	8000104 <strcmp>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d10b      	bne.n	8001514 <map_fields_to_structure+0x28c>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	0018      	movs	r0, r3
 8001500:	f7ff feb2 	bl	8001268 <convert_to_uint32>
 8001504:	0002      	movs	r2, r0
 8001506:	23b4      	movs	r3, #180	@ 0xb4
 8001508:	2120      	movs	r1, #32
 800150a:	185b      	adds	r3, r3, r1
 800150c:	19db      	adds	r3, r3, r7
 800150e:	21b4      	movs	r1, #180	@ 0xb4
 8001510:	505a      	str	r2, [r3, r1]
 8001512:	e2cd      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001514:	4a4a      	ldr	r2, [pc, #296]	@ (8001640 <map_fields_to_structure+0x3b8>)
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f7fe fdf2 	bl	8000104 <strcmp>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d10b      	bne.n	800153c <map_fields_to_structure+0x2b4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fe9e 	bl	8001268 <convert_to_uint32>
 800152c:	0002      	movs	r2, r0
 800152e:	23b4      	movs	r3, #180	@ 0xb4
 8001530:	2120      	movs	r1, #32
 8001532:	185b      	adds	r3, r3, r1
 8001534:	19db      	adds	r3, r3, r7
 8001536:	21b8      	movs	r1, #184	@ 0xb8
 8001538:	505a      	str	r2, [r3, r1]
 800153a:	e2b9      	b.n	8001ab0 <map_fields_to_structure+0x828>
 800153c:	4a41      	ldr	r2, [pc, #260]	@ (8001644 <map_fields_to_structure+0x3bc>)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	0011      	movs	r1, r2
 8001542:	0018      	movs	r0, r3
 8001544:	f7fe fdde 	bl	8000104 <strcmp>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d10b      	bne.n	8001564 <map_fields_to_structure+0x2dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fe8a 	bl	8001268 <convert_to_uint32>
 8001554:	0002      	movs	r2, r0
 8001556:	23b4      	movs	r3, #180	@ 0xb4
 8001558:	2120      	movs	r1, #32
 800155a:	185b      	adds	r3, r3, r1
 800155c:	19db      	adds	r3, r3, r7
 800155e:	21bc      	movs	r1, #188	@ 0xbc
 8001560:	505a      	str	r2, [r3, r1]
 8001562:	e2a5      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001564:	4a38      	ldr	r2, [pc, #224]	@ (8001648 <map_fields_to_structure+0x3c0>)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f7fe fdca 	bl	8000104 <strcmp>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d10b      	bne.n	800158c <map_fields_to_structure+0x304>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fe76 	bl	8001268 <convert_to_uint32>
 800157c:	0002      	movs	r2, r0
 800157e:	23b4      	movs	r3, #180	@ 0xb4
 8001580:	2120      	movs	r1, #32
 8001582:	185b      	adds	r3, r3, r1
 8001584:	19db      	adds	r3, r3, r7
 8001586:	21c0      	movs	r1, #192	@ 0xc0
 8001588:	505a      	str	r2, [r3, r1]
 800158a:	e291      	b.n	8001ab0 <map_fields_to_structure+0x828>
 800158c:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <map_fields_to_structure+0x3c4>)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f7fe fdb6 	bl	8000104 <strcmp>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d10b      	bne.n	80015b4 <map_fields_to_structure+0x32c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fe62 	bl	8001268 <convert_to_uint32>
 80015a4:	0002      	movs	r2, r0
 80015a6:	23b4      	movs	r3, #180	@ 0xb4
 80015a8:	2120      	movs	r1, #32
 80015aa:	185b      	adds	r3, r3, r1
 80015ac:	19db      	adds	r3, r3, r7
 80015ae:	21c4      	movs	r1, #196	@ 0xc4
 80015b0:	505a      	str	r2, [r3, r1]
 80015b2:	e27d      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80015b4:	4a26      	ldr	r2, [pc, #152]	@ (8001650 <map_fields_to_structure+0x3c8>)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	0011      	movs	r1, r2
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7fe fda2 	bl	8000104 <strcmp>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d10b      	bne.n	80015dc <map_fields_to_structure+0x354>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff fe4e 	bl	8001268 <convert_to_uint32>
 80015cc:	0002      	movs	r2, r0
 80015ce:	23b4      	movs	r3, #180	@ 0xb4
 80015d0:	2120      	movs	r1, #32
 80015d2:	185b      	adds	r3, r3, r1
 80015d4:	19db      	adds	r3, r3, r7
 80015d6:	21c8      	movs	r1, #200	@ 0xc8
 80015d8:	505a      	str	r2, [r3, r1]
 80015da:	e269      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80015dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <map_fields_to_structure+0x3cc>)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7fe fd8e 	bl	8000104 <strcmp>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d135      	bne.n	8001658 <map_fields_to_structure+0x3d0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fe3a 	bl	8001268 <convert_to_uint32>
 80015f4:	0002      	movs	r2, r0
 80015f6:	23b4      	movs	r3, #180	@ 0xb4
 80015f8:	2120      	movs	r1, #32
 80015fa:	185b      	adds	r3, r3, r1
 80015fc:	19db      	adds	r3, r3, r7
 80015fe:	21cc      	movs	r1, #204	@ 0xcc
 8001600:	505a      	str	r2, [r3, r1]
 8001602:	e255      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001604:	08005ff4 	.word	0x08005ff4
 8001608:	08005ff8 	.word	0x08005ff8
 800160c:	08005ffc 	.word	0x08005ffc
 8001610:	08006000 	.word	0x08006000
 8001614:	08006004 	.word	0x08006004
 8001618:	08006008 	.word	0x08006008
 800161c:	0800600c 	.word	0x0800600c
 8001620:	08006010 	.word	0x08006010
 8001624:	08006014 	.word	0x08006014
 8001628:	08006018 	.word	0x08006018
 800162c:	0800601c 	.word	0x0800601c
 8001630:	08006020 	.word	0x08006020
 8001634:	08006024 	.word	0x08006024
 8001638:	08006028 	.word	0x08006028
 800163c:	0800602c 	.word	0x0800602c
 8001640:	08006030 	.word	0x08006030
 8001644:	08006034 	.word	0x08006034
 8001648:	08006038 	.word	0x08006038
 800164c:	0800603c 	.word	0x0800603c
 8001650:	08006040 	.word	0x08006040
 8001654:	08006044 	.word	0x08006044
 8001658:	4acd      	ldr	r2, [pc, #820]	@ (8001990 <map_fields_to_structure+0x708>)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0011      	movs	r1, r2
 800165e:	0018      	movs	r0, r3
 8001660:	f7fe fd50 	bl	8000104 <strcmp>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d10b      	bne.n	8001680 <map_fields_to_structure+0x3f8>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fdfc 	bl	8001268 <convert_to_uint32>
 8001670:	0002      	movs	r2, r0
 8001672:	23b4      	movs	r3, #180	@ 0xb4
 8001674:	2120      	movs	r1, #32
 8001676:	185b      	adds	r3, r3, r1
 8001678:	19db      	adds	r3, r3, r7
 800167a:	21d0      	movs	r1, #208	@ 0xd0
 800167c:	505a      	str	r2, [r3, r1]
 800167e:	e217      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001680:	4ac4      	ldr	r2, [pc, #784]	@ (8001994 <map_fields_to_structure+0x70c>)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fd3c 	bl	8000104 <strcmp>
 800168c:	1e03      	subs	r3, r0, #0
 800168e:	d10b      	bne.n	80016a8 <map_fields_to_structure+0x420>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff fde8 	bl	8001268 <convert_to_uint32>
 8001698:	0002      	movs	r2, r0
 800169a:	23b4      	movs	r3, #180	@ 0xb4
 800169c:	2120      	movs	r1, #32
 800169e:	185b      	adds	r3, r3, r1
 80016a0:	19db      	adds	r3, r3, r7
 80016a2:	21d4      	movs	r1, #212	@ 0xd4
 80016a4:	505a      	str	r2, [r3, r1]
 80016a6:	e203      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80016a8:	4abb      	ldr	r2, [pc, #748]	@ (8001998 <map_fields_to_structure+0x710>)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd28 	bl	8000104 <strcmp>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d10b      	bne.n	80016d0 <map_fields_to_structure+0x448>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fdd4 	bl	8001268 <convert_to_uint32>
 80016c0:	0002      	movs	r2, r0
 80016c2:	23b4      	movs	r3, #180	@ 0xb4
 80016c4:	2120      	movs	r1, #32
 80016c6:	185b      	adds	r3, r3, r1
 80016c8:	19db      	adds	r3, r3, r7
 80016ca:	21d8      	movs	r1, #216	@ 0xd8
 80016cc:	505a      	str	r2, [r3, r1]
 80016ce:	e1ef      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80016d0:	4ab2      	ldr	r2, [pc, #712]	@ (800199c <map_fields_to_structure+0x714>)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	0011      	movs	r1, r2
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7fe fd14 	bl	8000104 <strcmp>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d10b      	bne.n	80016f8 <map_fields_to_structure+0x470>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff fdc0 	bl	8001268 <convert_to_uint32>
 80016e8:	0002      	movs	r2, r0
 80016ea:	23b4      	movs	r3, #180	@ 0xb4
 80016ec:	2120      	movs	r1, #32
 80016ee:	185b      	adds	r3, r3, r1
 80016f0:	19db      	adds	r3, r3, r7
 80016f2:	21dc      	movs	r1, #220	@ 0xdc
 80016f4:	505a      	str	r2, [r3, r1]
 80016f6:	e1db      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80016f8:	4aa9      	ldr	r2, [pc, #676]	@ (80019a0 <map_fields_to_structure+0x718>)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	0011      	movs	r1, r2
 80016fe:	0018      	movs	r0, r3
 8001700:	f7fe fd00 	bl	8000104 <strcmp>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d10b      	bne.n	8001720 <map_fields_to_structure+0x498>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fdac 	bl	8001268 <convert_to_uint32>
 8001710:	0002      	movs	r2, r0
 8001712:	23b4      	movs	r3, #180	@ 0xb4
 8001714:	2120      	movs	r1, #32
 8001716:	185b      	adds	r3, r3, r1
 8001718:	19db      	adds	r3, r3, r7
 800171a:	21e0      	movs	r1, #224	@ 0xe0
 800171c:	505a      	str	r2, [r3, r1]
 800171e:	e1c7      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001720:	4aa0      	ldr	r2, [pc, #640]	@ (80019a4 <map_fields_to_structure+0x71c>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f7fe fcec 	bl	8000104 <strcmp>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d10b      	bne.n	8001748 <map_fields_to_structure+0x4c0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff fd98 	bl	8001268 <convert_to_uint32>
 8001738:	0002      	movs	r2, r0
 800173a:	23b4      	movs	r3, #180	@ 0xb4
 800173c:	2120      	movs	r1, #32
 800173e:	185b      	adds	r3, r3, r1
 8001740:	19db      	adds	r3, r3, r7
 8001742:	21e4      	movs	r1, #228	@ 0xe4
 8001744:	505a      	str	r2, [r3, r1]
 8001746:	e1b3      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001748:	4a97      	ldr	r2, [pc, #604]	@ (80019a8 <map_fields_to_structure+0x720>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f7fe fcd8 	bl	8000104 <strcmp>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d10b      	bne.n	8001770 <map_fields_to_structure+0x4e8>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fd84 	bl	8001268 <convert_to_uint32>
 8001760:	0002      	movs	r2, r0
 8001762:	23b4      	movs	r3, #180	@ 0xb4
 8001764:	2120      	movs	r1, #32
 8001766:	185b      	adds	r3, r3, r1
 8001768:	19db      	adds	r3, r3, r7
 800176a:	21e8      	movs	r1, #232	@ 0xe8
 800176c:	505a      	str	r2, [r3, r1]
 800176e:	e19f      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001770:	4a8e      	ldr	r2, [pc, #568]	@ (80019ac <map_fields_to_structure+0x724>)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f7fe fcc4 	bl	8000104 <strcmp>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d10b      	bne.n	8001798 <map_fields_to_structure+0x510>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fd70 	bl	8001268 <convert_to_uint32>
 8001788:	0002      	movs	r2, r0
 800178a:	23b4      	movs	r3, #180	@ 0xb4
 800178c:	2120      	movs	r1, #32
 800178e:	185b      	adds	r3, r3, r1
 8001790:	19db      	adds	r3, r3, r7
 8001792:	21ec      	movs	r1, #236	@ 0xec
 8001794:	505a      	str	r2, [r3, r1]
 8001796:	e18b      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001798:	4a85      	ldr	r2, [pc, #532]	@ (80019b0 <map_fields_to_structure+0x728>)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f7fe fcb0 	bl	8000104 <strcmp>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d10b      	bne.n	80017c0 <map_fields_to_structure+0x538>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff fd5c 	bl	8001268 <convert_to_uint32>
 80017b0:	0002      	movs	r2, r0
 80017b2:	23b4      	movs	r3, #180	@ 0xb4
 80017b4:	2120      	movs	r1, #32
 80017b6:	185b      	adds	r3, r3, r1
 80017b8:	19db      	adds	r3, r3, r7
 80017ba:	21f0      	movs	r1, #240	@ 0xf0
 80017bc:	505a      	str	r2, [r3, r1]
 80017be:	e177      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80017c0:	4a7c      	ldr	r2, [pc, #496]	@ (80019b4 <map_fields_to_structure+0x72c>)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7fe fc9c 	bl	8000104 <strcmp>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d10c      	bne.n	80017ea <map_fields_to_structure+0x562>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff fd48 	bl	8001268 <convert_to_uint32>
 80017d8:	0003      	movs	r3, r0
 80017da:	b2d9      	uxtb	r1, r3
 80017dc:	23b4      	movs	r3, #180	@ 0xb4
 80017de:	2220      	movs	r2, #32
 80017e0:	189b      	adds	r3, r3, r2
 80017e2:	19db      	adds	r3, r3, r7
 80017e4:	22f4      	movs	r2, #244	@ 0xf4
 80017e6:	5499      	strb	r1, [r3, r2]
 80017e8:	e162      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80017ea:	4a73      	ldr	r2, [pc, #460]	@ (80019b8 <map_fields_to_structure+0x730>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe fc87 	bl	8000104 <strcmp>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d10d      	bne.n	8001816 <map_fields_to_structure+0x58e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff fd33 	bl	8001268 <convert_to_uint32>
 8001802:	0003      	movs	r3, r0
 8001804:	b299      	uxth	r1, r3
 8001806:	23b4      	movs	r3, #180	@ 0xb4
 8001808:	2220      	movs	r2, #32
 800180a:	189b      	adds	r3, r3, r2
 800180c:	19da      	adds	r2, r3, r7
 800180e:	2382      	movs	r3, #130	@ 0x82
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	52d1      	strh	r1, [r2, r3]
 8001814:	e14c      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001816:	4a69      	ldr	r2, [pc, #420]	@ (80019bc <map_fields_to_structure+0x734>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe fc71 	bl	8000104 <strcmp>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d10c      	bne.n	8001840 <map_fields_to_structure+0x5b8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff fd1d 	bl	8001268 <convert_to_uint32>
 800182e:	0003      	movs	r3, r0
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	23b4      	movs	r3, #180	@ 0xb4
 8001834:	2220      	movs	r2, #32
 8001836:	189b      	adds	r3, r3, r2
 8001838:	19db      	adds	r3, r3, r7
 800183a:	22f5      	movs	r2, #245	@ 0xf5
 800183c:	5499      	strb	r1, [r3, r2]
 800183e:	e137      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001840:	4a5f      	ldr	r2, [pc, #380]	@ (80019c0 <map_fields_to_structure+0x738>)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f7fe fc5c 	bl	8000104 <strcmp>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d10b      	bne.n	8001868 <map_fields_to_structure+0x5e0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff fd08 	bl	8001268 <convert_to_uint32>
 8001858:	0002      	movs	r2, r0
 800185a:	23b4      	movs	r3, #180	@ 0xb4
 800185c:	2120      	movs	r1, #32
 800185e:	185b      	adds	r3, r3, r1
 8001860:	19db      	adds	r3, r3, r7
 8001862:	21fc      	movs	r1, #252	@ 0xfc
 8001864:	505a      	str	r2, [r3, r1]
 8001866:	e123      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <map_fields_to_structure+0x73c>)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f7fe fc48 	bl	8000104 <strcmp>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d10c      	bne.n	8001892 <map_fields_to_structure+0x60a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fcf4 	bl	8001268 <convert_to_uint32>
 8001880:	0001      	movs	r1, r0
 8001882:	23b4      	movs	r3, #180	@ 0xb4
 8001884:	2220      	movs	r2, #32
 8001886:	189b      	adds	r3, r3, r2
 8001888:	19da      	adds	r2, r3, r7
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	50d1      	str	r1, [r2, r3]
 8001890:	e10e      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001892:	4a4d      	ldr	r2, [pc, #308]	@ (80019c8 <map_fields_to_structure+0x740>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f7fe fc33 	bl	8000104 <strcmp>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d10c      	bne.n	80018bc <map_fields_to_structure+0x634>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	0018      	movs	r0, r3
 80018a6:	f7ff fcdf 	bl	8001268 <convert_to_uint32>
 80018aa:	0001      	movs	r1, r0
 80018ac:	23b4      	movs	r3, #180	@ 0xb4
 80018ae:	2220      	movs	r2, #32
 80018b0:	189b      	adds	r3, r3, r2
 80018b2:	19da      	adds	r2, r3, r7
 80018b4:	2384      	movs	r3, #132	@ 0x84
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	50d1      	str	r1, [r2, r3]
 80018ba:	e0f9      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80018bc:	4a43      	ldr	r2, [pc, #268]	@ (80019cc <map_fields_to_structure+0x744>)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7fe fc1e 	bl	8000104 <strcmp>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d10c      	bne.n	80018e6 <map_fields_to_structure+0x65e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fcca 	bl	8001268 <convert_to_uint32>
 80018d4:	0001      	movs	r1, r0
 80018d6:	23b4      	movs	r3, #180	@ 0xb4
 80018d8:	2220      	movs	r2, #32
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	19da      	adds	r2, r3, r7
 80018de:	2386      	movs	r3, #134	@ 0x86
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	50d1      	str	r1, [r2, r3]
 80018e4:	e0e4      	b.n	8001ab0 <map_fields_to_structure+0x828>
 80018e6:	4a3a      	ldr	r2, [pc, #232]	@ (80019d0 <map_fields_to_structure+0x748>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe fc09 	bl	8000104 <strcmp>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d10d      	bne.n	8001912 <map_fields_to_structure+0x68a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fcb5 	bl	8001268 <convert_to_uint32>
 80018fe:	0003      	movs	r3, r0
 8001900:	b259      	sxtb	r1, r3
 8001902:	23b4      	movs	r3, #180	@ 0xb4
 8001904:	2220      	movs	r2, #32
 8001906:	189b      	adds	r3, r3, r2
 8001908:	19da      	adds	r2, r3, r7
 800190a:	2388      	movs	r3, #136	@ 0x88
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	54d1      	strb	r1, [r2, r3]
 8001910:	e0ce      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001912:	4a30      	ldr	r2, [pc, #192]	@ (80019d4 <map_fields_to_structure+0x74c>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f7fe fbf3 	bl	8000104 <strcmp>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d10c      	bne.n	800193c <map_fields_to_structure+0x6b4>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fc9f 	bl	8001268 <convert_to_uint32>
 800192a:	0001      	movs	r1, r0
 800192c:	23b4      	movs	r3, #180	@ 0xb4
 800192e:	2220      	movs	r2, #32
 8001930:	189b      	adds	r3, r3, r2
 8001932:	19da      	adds	r2, r3, r7
 8001934:	238a      	movs	r3, #138	@ 0x8a
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	50d1      	str	r1, [r2, r3]
 800193a:	e0b9      	b.n	8001ab0 <map_fields_to_structure+0x828>
 800193c:	4a26      	ldr	r2, [pc, #152]	@ (80019d8 <map_fields_to_structure+0x750>)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	0011      	movs	r1, r2
 8001942:	0018      	movs	r0, r3
 8001944:	f7fe fbde 	bl	8000104 <strcmp>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d10c      	bne.n	8001966 <map_fields_to_structure+0x6de>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff fc8a 	bl	8001268 <convert_to_uint32>
 8001954:	0001      	movs	r1, r0
 8001956:	23b4      	movs	r3, #180	@ 0xb4
 8001958:	2220      	movs	r2, #32
 800195a:	189b      	adds	r3, r3, r2
 800195c:	19da      	adds	r2, r3, r7
 800195e:	238c      	movs	r3, #140	@ 0x8c
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	50d1      	str	r1, [r2, r3]
 8001964:	e0a4      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001966:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <map_fields_to_structure+0x754>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f7fe fbc9 	bl	8000104 <strcmp>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d134      	bne.n	80019e0 <map_fields_to_structure+0x758>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fc75 	bl	8001268 <convert_to_uint32>
 800197e:	0001      	movs	r1, r0
 8001980:	23b4      	movs	r3, #180	@ 0xb4
 8001982:	2220      	movs	r2, #32
 8001984:	189b      	adds	r3, r3, r2
 8001986:	19da      	adds	r2, r3, r7
 8001988:	238e      	movs	r3, #142	@ 0x8e
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	50d1      	str	r1, [r2, r3]
 800198e:	e08f      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001990:	08006048 	.word	0x08006048
 8001994:	0800604c 	.word	0x0800604c
 8001998:	08006050 	.word	0x08006050
 800199c:	08006054 	.word	0x08006054
 80019a0:	08006058 	.word	0x08006058
 80019a4:	0800605c 	.word	0x0800605c
 80019a8:	08006060 	.word	0x08006060
 80019ac:	08006064 	.word	0x08006064
 80019b0:	08006068 	.word	0x08006068
 80019b4:	0800606c 	.word	0x0800606c
 80019b8:	08006070 	.word	0x08006070
 80019bc:	08006074 	.word	0x08006074
 80019c0:	08006078 	.word	0x08006078
 80019c4:	0800607c 	.word	0x0800607c
 80019c8:	08006080 	.word	0x08006080
 80019cc:	08006084 	.word	0x08006084
 80019d0:	0800608c 	.word	0x0800608c
 80019d4:	08006094 	.word	0x08006094
 80019d8:	080060a0 	.word	0x080060a0
 80019dc:	080060ac 	.word	0x080060ac
 80019e0:	4a3e      	ldr	r2, [pc, #248]	@ (8001adc <map_fields_to_structure+0x854>)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	0011      	movs	r1, r2
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fb8c 	bl	8000104 <strcmp>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d10c      	bne.n	8001a0a <map_fields_to_structure+0x782>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fc38 	bl	8001268 <convert_to_uint32>
 80019f8:	0001      	movs	r1, r0
 80019fa:	23b4      	movs	r3, #180	@ 0xb4
 80019fc:	2220      	movs	r2, #32
 80019fe:	189b      	adds	r3, r3, r2
 8001a00:	19da      	adds	r2, r3, r7
 8001a02:	23a2      	movs	r3, #162	@ 0xa2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	50d1      	str	r1, [r2, r3]
 8001a08:	e052      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001a0a:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <map_fields_to_structure+0x858>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0011      	movs	r1, r2
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fb77 	bl	8000104 <strcmp>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d10c      	bne.n	8001a34 <map_fields_to_structure+0x7ac>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fc23 	bl	8001268 <convert_to_uint32>
 8001a22:	0001      	movs	r1, r0
 8001a24:	23b4      	movs	r3, #180	@ 0xb4
 8001a26:	2220      	movs	r2, #32
 8001a28:	189b      	adds	r3, r3, r2
 8001a2a:	19da      	adds	r2, r3, r7
 8001a2c:	23a4      	movs	r3, #164	@ 0xa4
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	50d1      	str	r1, [r2, r3]
 8001a32:	e03d      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001a34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae4 <map_fields_to_structure+0x85c>)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	0011      	movs	r1, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7fe fb62 	bl	8000104 <strcmp>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d10c      	bne.n	8001a5e <map_fields_to_structure+0x7d6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fc0e 	bl	8001268 <convert_to_uint32>
 8001a4c:	0001      	movs	r1, r0
 8001a4e:	23b4      	movs	r3, #180	@ 0xb4
 8001a50:	2220      	movs	r2, #32
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	19da      	adds	r2, r3, r7
 8001a56:	23a6      	movs	r3, #166	@ 0xa6
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	50d1      	str	r1, [r2, r3]
 8001a5c:	e028      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001a5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <map_fields_to_structure+0x860>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fb4d 	bl	8000104 <strcmp>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d10c      	bne.n	8001a88 <map_fields_to_structure+0x800>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fbf9 	bl	8001268 <convert_to_uint32>
 8001a76:	0001      	movs	r1, r0
 8001a78:	23b4      	movs	r3, #180	@ 0xb4
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	189b      	adds	r3, r3, r2
 8001a7e:	19da      	adds	r2, r3, r7
 8001a80:	23a8      	movs	r3, #168	@ 0xa8
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	50d1      	str	r1, [r2, r3]
 8001a86:	e013      	b.n	8001ab0 <map_fields_to_structure+0x828>
 8001a88:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <map_fields_to_structure+0x864>)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7fe fb38 	bl	8000104 <strcmp>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d10b      	bne.n	8001ab0 <map_fields_to_structure+0x828>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff fbe4 	bl	8001268 <convert_to_uint32>
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	23b4      	movs	r3, #180	@ 0xb4
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	189b      	adds	r3, r3, r2
 8001aa8:	19da      	adds	r2, r3, r7
 8001aaa:	23aa      	movs	r3, #170	@ 0xaa
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < ve_data.field_count; i++) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	22b0      	movs	r2, #176	@ 0xb0
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	001a      	movs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	da01      	bge.n	8001aca <map_fields_to_structure+0x842>
 8001ac6:	f7ff fbed 	bl	80012a4 <map_fields_to_structure+0x1c>
    }
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b005      	add	sp, #20
 8001ad2:	bc90      	pop	{r4, r7}
 8001ad4:	bc08      	pop	{r3}
 8001ad6:	b004      	add	sp, #16
 8001ad8:	4718      	bx	r3
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	080060b8 	.word	0x080060b8
 8001ae0:	080060c0 	.word	0x080060c0
 8001ae4:	080060c4 	.word	0x080060c4
 8001ae8:	080060cc 	.word	0x080060cc
 8001aec:	080060d4 	.word	0x080060d4

08001af0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8001af0:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001af2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001af4:	f7ff f9f8 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <LoopForever+0xe>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	@ (8001b3c <LoopForever+0x16>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b1e:	f003 fcf3 	bl	8005508 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b22:	f7fe ffff 	bl	8000b24 <main>

08001b26 <LoopForever>:

LoopForever:
  b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
ldr   r0, =_estack
 8001b28:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8001b34:	080062bc 	.word	0x080062bc
  ldr r2, =_sbss
 8001b38:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8001b3c:	200012e0 	.word	0x200012e0

08001b40 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_COMP_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x3c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_Init+0x3c>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	0049      	lsls	r1, r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f810 	bl	8001b84 <HAL_InitTick>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e001      	b.n	8001b74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff f8e4 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_InitTick+0x88>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d02b      	beq.n	8001bf4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_InitTick+0x8c>)
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_InitTick+0x88>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	23fa      	movs	r3, #250	@ 0xfa
 8001ba8:	0098      	lsls	r0, r3, #2
 8001baa:	f7fe fac7 	bl	800013c <__udivsi3>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	0020      	movs	r0, r4
 8001bb4:	f7fe fac2 	bl	800013c <__udivsi3>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f919 	bl	8001df2 <HAL_SYSTICK_Config>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d112      	bne.n	8001bea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d80a      	bhi.n	8001be0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	425b      	negs	r3, r3
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f8e8 	bl	8001da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_InitTick+0x90>)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e00d      	b.n	8001bfc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001be0:	230f      	movs	r3, #15
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bea:	230f      	movs	r3, #15
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e003      	b.n	8001bfc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b005      	add	sp, #20
 8001c08:	bd90      	pop	{r4, r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	20000214 	.word	0x20000214
 8001c10:	2000020c 	.word	0x2000020c
 8001c14:	20000210 	.word	0x20000210

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	001a      	movs	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	18d2      	adds	r2, r2, r3
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	20000214 	.word	0x20000214
 8001c38:	20001190 	.word	0x20001190

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	@ (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	20001190 	.word	0x20001190

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	0002      	movs	r2, r0
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c62:	d809      	bhi.n	8001c78 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	231f      	movs	r3, #31
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_EnableIRQ+0x30>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	4091      	lsls	r1, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c98:	d828      	bhi.n	8001cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d58 <__NVIC_SetPriority+0xd4>)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	33c0      	adds	r3, #192	@ 0xc0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	589b      	ldr	r3, [r3, r2]
 8001caa:	1dfa      	adds	r2, r7, #7
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	0011      	movs	r1, r2
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	21ff      	movs	r1, #255	@ 0xff
 8001cb8:	4091      	lsls	r1, r2
 8001cba:	000a      	movs	r2, r1
 8001cbc:	43d2      	mvns	r2, r2
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	22ff      	movs	r2, #255	@ 0xff
 8001cc8:	401a      	ands	r2, r3
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	4003      	ands	r3, r0
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd8:	481f      	ldr	r0, [pc, #124]	@ (8001d58 <__NVIC_SetPriority+0xd4>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	33c0      	adds	r3, #192	@ 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cea:	e031      	b.n	8001d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <__NVIC_SetPriority+0xd8>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	3b08      	subs	r3, #8
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3306      	adds	r3, #6
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	18d3      	adds	r3, r2, r3
 8001d02:	3304      	adds	r3, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1dfa      	adds	r2, r7, #7
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	400a      	ands	r2, r1
 8001d10:	00d2      	lsls	r2, r2, #3
 8001d12:	21ff      	movs	r1, #255	@ 0xff
 8001d14:	4091      	lsls	r1, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	43d2      	mvns	r2, r2
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	22ff      	movs	r2, #255	@ 0xff
 8001d24:	401a      	ands	r2, r3
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	4003      	ands	r3, r0
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d34:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <__NVIC_SetPriority+0xd8>)
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	4023      	ands	r3, r4
 8001d40:	3b08      	subs	r3, #8
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	430a      	orrs	r2, r1
 8001d46:	3306      	adds	r3, #6
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	18c3      	adds	r3, r0, r3
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	601a      	str	r2, [r3, #0]
}
 8001d50:	46c0      	nop			@ (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b003      	add	sp, #12
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	045b      	lsls	r3, r3, #17
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d301      	bcc.n	8001d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d74:	2301      	movs	r3, #1
 8001d76:	e010      	b.n	8001d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <SysTick_Config+0x44>)
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d80:	2301      	movs	r3, #1
 8001d82:	425b      	negs	r3, r3
 8001d84:	2103      	movs	r1, #3
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff ff7c 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <SysTick_Config+0x44>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <SysTick_Config+0x44>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	210f      	movs	r1, #15
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b25b      	sxtb	r3, r3
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	0002      	movs	r2, r0
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff ff33 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff ffaf 	bl	8001d60 <SysTick_Config>
 8001e02:	0003      	movs	r3, r0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e077      	b.n	8001f0e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3d      	ldr	r2, [pc, #244]	@ (8001f18 <HAL_DMA_Init+0x10c>)
 8001e24:	4694      	mov	ip, r2
 8001e26:	4463      	add	r3, ip
 8001e28:	2114      	movs	r1, #20
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7fe f986 	bl	800013c <__udivsi3>
 8001e30:	0003      	movs	r3, r0
 8001e32:	009a      	lsls	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2225      	movs	r2, #37	@ 0x25
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4934      	ldr	r1, [pc, #208]	@ (8001f1c <HAL_DMA_Init+0x110>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fa8d 	bl	80023a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	01db      	lsls	r3, r3, #7
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d102      	bne.n	8001ea0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	213f      	movs	r1, #63	@ 0x3f
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001eb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d011      	beq.n	8001ee4 <HAL_DMA_Init+0xd8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d80d      	bhi.n	8001ee4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fa98 	bl	8002400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e008      	b.n	8001ef6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2225      	movs	r2, #37	@ 0x25
 8001f00:	2101      	movs	r1, #1
 8001f02:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2224      	movs	r2, #36	@ 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	0018      	movs	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	bffdfff8 	.word	0xbffdfff8
 8001f1c:	ffff800f 	.word	0xffff800f

08001f20 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2317      	movs	r3, #23
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2224      	movs	r2, #36	@ 0x24
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_DMA_Start_IT+0x24>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e06f      	b.n	8002024 <HAL_DMA_Start_IT+0x104>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2224      	movs	r2, #36	@ 0x24
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2225      	movs	r2, #37	@ 0x25
 8001f50:	5c9b      	ldrb	r3, [r3, r2]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d157      	bne.n	8002008 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2225      	movs	r2, #37	@ 0x25
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	438a      	bics	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f9d3 	bl	8002328 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	210e      	movs	r1, #14
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e00f      	b.n	8001fbc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	438a      	bics	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	210a      	movs	r1, #10
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	@ 0x80
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d008      	beq.n	8001fdc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	0049      	lsls	r1, r1, #1
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0049      	lsls	r1, r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00a      	b.n	800201e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2280      	movs	r2, #128	@ 0x80
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2224      	movs	r2, #36	@ 0x24
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002016:	2317      	movs	r3, #23
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800201e:	2317      	movs	r3, #23
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b006      	add	sp, #24
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e050      	b.n	80020e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2225      	movs	r2, #37	@ 0x25
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d008      	beq.n	800205c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2204      	movs	r2, #4
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e041      	b.n	80020e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	210e      	movs	r1, #14
 8002068:	438a      	bics	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	491c      	ldr	r1, [pc, #112]	@ (80020e8 <HAL_DMA_Abort+0xbc>)
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2101      	movs	r1, #1
 8002088:	438a      	bics	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800208c:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_DMA_Abort+0xc0>)
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	221c      	movs	r2, #28
 8002096:	4013      	ands	r3, r2
 8002098:	2201      	movs	r2, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_DMA_Abort+0xc0>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020be:	490a      	ldr	r1, [pc, #40]	@ (80020e8 <HAL_DMA_Abort+0xbc>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2225      	movs	r2, #37	@ 0x25
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2224      	movs	r2, #36	@ 0x24
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	fffffeff 	.word	0xfffffeff
 80020ec:	40020000 	.word	0x40020000

080020f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	210f      	movs	r1, #15
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2225      	movs	r2, #37	@ 0x25
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d006      	beq.n	800211a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2204      	movs	r2, #4
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e049      	b.n	80021ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	210e      	movs	r1, #14
 8002126:	438a      	bics	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	438a      	bics	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	491d      	ldr	r1, [pc, #116]	@ (80021bc <HAL_DMA_Abort_IT+0xcc>)
 8002146:	400a      	ands	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800214a:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_DMA_Abort_IT+0xd0>)
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	221c      	movs	r2, #28
 8002154:	4013      	ands	r3, r2
 8002156:	2201      	movs	r2, #1
 8002158:	409a      	lsls	r2, r3
 800215a:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <HAL_DMA_Abort_IT+0xd0>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002168:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	490f      	ldr	r1, [pc, #60]	@ (80021bc <HAL_DMA_Abort_IT+0xcc>)
 800217e:	400a      	ands	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800218a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2225      	movs	r2, #37	@ 0x25
 8002190:	2101      	movs	r1, #1
 8002192:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	0010      	movs	r0, r2
 80021ac:	4798      	blx	r3
    }
  }
  return status;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	fffffeff 	.word	0xfffffeff
 80021c0:	40020000 	.word	0x40020000

080021c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80021cc:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	221c      	movs	r2, #28
 80021e0:	4013      	ands	r3, r2
 80021e2:	2204      	movs	r2, #4
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	d027      	beq.n	800223e <HAL_DMA_IRQHandler+0x7a>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2204      	movs	r2, #4
 80021f2:	4013      	ands	r3, r2
 80021f4:	d023      	beq.n	800223e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2220      	movs	r2, #32
 80021fe:	4013      	ands	r3, r2
 8002200:	d107      	bne.n	8002212 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2104      	movs	r1, #4
 800220e:	438a      	bics	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002212:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	221c      	movs	r2, #28
 800221c:	4013      	ands	r3, r2
 800221e:	2204      	movs	r2, #4
 8002220:	409a      	lsls	r2, r3
 8002222:	4b40      	ldr	r3, [pc, #256]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	2b00      	cmp	r3, #0
 800222e:	d100      	bne.n	8002232 <HAL_DMA_IRQHandler+0x6e>
 8002230:	e073      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	0010      	movs	r0, r2
 800223a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800223c:	e06d      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	221c      	movs	r2, #28
 8002244:	4013      	ands	r3, r2
 8002246:	2202      	movs	r2, #2
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	d02e      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xec>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d02a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	4013      	ands	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	210a      	movs	r1, #10
 8002272:	438a      	bics	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2225      	movs	r2, #37	@ 0x25
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	221c      	movs	r2, #28
 8002288:	4013      	ands	r3, r2
 800228a:	2202      	movs	r2, #2
 800228c:	409a      	lsls	r2, r3
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	@ 0x24
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03a      	beq.n	800231a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	0010      	movs	r0, r2
 80022ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022ae:	e034      	b.n	800231a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	221c      	movs	r2, #28
 80022b6:	4013      	ands	r3, r2
 80022b8:	2208      	movs	r2, #8
 80022ba:	409a      	lsls	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	d02b      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2208      	movs	r2, #8
 80022c8:	4013      	ands	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	210e      	movs	r1, #14
 80022d8:	438a      	bics	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	221c      	movs	r2, #28
 80022e6:	4013      	ands	r3, r2
 80022e8:	2201      	movs	r2, #1
 80022ea:	409a      	lsls	r2, r3
 80022ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_DMA_IRQHandler+0x160>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2225      	movs	r2, #37	@ 0x25
 80022fc:	2101      	movs	r1, #1
 80022fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	0010      	movs	r0, r2
 8002318:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46c0      	nop			@ (mov r8, r8)
}
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020000 	.word	0x40020000

08002328 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800233e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002350:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002352:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <DMA_SetConfig+0x7c>)
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	221c      	movs	r2, #28
 800235c:	4013      	ands	r3, r2
 800235e:	2201      	movs	r2, #1
 8002360:	409a      	lsls	r2, r3
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <DMA_SetConfig+0x7c>)
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d108      	bne.n	800238a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002388:	e007      	b.n	800239a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	40020000 	.word	0x40020000

080023a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	4a10      	ldr	r2, [pc, #64]	@ (80023f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023b8:	4694      	mov	ip, r2
 80023ba:	4463      	add	r3, ip
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	001a      	movs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	23ff      	movs	r3, #255	@ 0xff
 80023cc:	4013      	ands	r3, r2
 80023ce:	3b08      	subs	r3, #8
 80023d0:	2114      	movs	r1, #20
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fd feb2 	bl	800013c <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80023e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	221f      	movs	r2, #31
 80023e6:	4013      	ands	r3, r2
 80023e8:	2201      	movs	r2, #1
 80023ea:	409a      	lsls	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80023f0:	46c0      	nop			@ (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b004      	add	sp, #16
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	10008200 	.word	0x10008200
 80023fc:	40020880 	.word	0x40020880

08002400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	223f      	movs	r2, #63	@ 0x3f
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002416:	4694      	mov	ip, r2
 8002418:	4463      	add	r3, ip
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	001a      	movs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	4013      	ands	r3, r2
 8002430:	2201      	movs	r2, #1
 8002432:	409a      	lsls	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002438:	46c0      	nop			@ (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}
 8002440:	1000823f 	.word	0x1000823f
 8002444:	40020940 	.word	0x40020940

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e147      	b.n	80026e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4091      	lsls	r1, r2
 8002462:	000a      	movs	r2, r1
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <HAL_GPIO_Init+0x28>
 800246e:	e138      	b.n	80026e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	4013      	ands	r3, r2
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	4013      	ands	r3, r2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	43da      	mvns	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	2201      	movs	r2, #1
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d017      	beq.n	8002526 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	409a      	lsls	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	43da      	mvns	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2203      	movs	r2, #3
 800252c:	4013      	ands	r3, r2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d123      	bne.n	800257a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	58d3      	ldr	r3, [r2, r3]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2107      	movs	r1, #7
 800255e:	400b      	ands	r3, r1
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	08da      	lsrs	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3208      	adds	r2, #8
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	409a      	lsls	r2, r3
 8002588:	0013      	movs	r3, r2
 800258a:	43da      	mvns	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	401a      	ands	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	23c0      	movs	r3, #192	@ 0xc0
 80025b4:	029b      	lsls	r3, r3, #10
 80025b6:	4013      	ands	r3, r2
 80025b8:	d100      	bne.n	80025bc <HAL_GPIO_Init+0x174>
 80025ba:	e092      	b.n	80026e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025bc:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3318      	adds	r3, #24
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	589b      	ldr	r3, [r3, r2]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2203      	movs	r2, #3
 80025ce:	4013      	ands	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	220f      	movs	r2, #15
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	43da      	mvns	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	23a0      	movs	r3, #160	@ 0xa0
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1ca>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	@ (8002704 <HAL_GPIO_Init+0x2bc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1c6>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a44      	ldr	r2, [pc, #272]	@ (8002708 <HAL_GPIO_Init+0x2c0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1c2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a43      	ldr	r2, [pc, #268]	@ (800270c <HAL_GPIO_Init+0x2c4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1be>
 8002602:	2303      	movs	r3, #3
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 8002606:	2305      	movs	r3, #5
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x1cc>
 8002612:	2300      	movs	r3, #0
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	2103      	movs	r1, #3
 8002618:	400a      	ands	r2, r1
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	4093      	lsls	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002624:	4936      	ldr	r1, [pc, #216]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3318      	adds	r3, #24
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002632:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43da      	mvns	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	035b      	lsls	r3, r3, #13
 800264a:	4013      	ands	r3, r2
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002656:	4b2a      	ldr	r3, [pc, #168]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800265c:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43da      	mvns	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	039b      	lsls	r3, r3, #14
 8002674:	4013      	ands	r3, r2
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002680:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002686:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 8002688:	2384      	movs	r3, #132	@ 0x84
 800268a:	58d3      	ldr	r3, [r2, r3]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4013      	ands	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ac:	4914      	ldr	r1, [pc, #80]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026ae:	2284      	movs	r2, #132	@ 0x84
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026b4:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	58d3      	ldr	r3, [r2, r3]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43da      	mvns	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	025b      	lsls	r3, r3, #9
 80026ce:	4013      	ands	r3, r2
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026da:	4909      	ldr	r1, [pc, #36]	@ (8002700 <HAL_GPIO_Init+0x2b8>)
 80026dc:	2280      	movs	r2, #128	@ 0x80
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	40da      	lsrs	r2, r3
 80026f0:	1e13      	subs	r3, r2, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_GPIO_Init+0x2ae>
 80026f4:	e6b0      	b.n	8002458 <HAL_GPIO_Init+0x10>
  }
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021800 	.word	0x40021800
 8002704:	50000400 	.word	0x50000400
 8002708:	50000800 	.word	0x50000800
 800270c:	50000c00 	.word	0x50000c00

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	0008      	movs	r0, r1
 800271a:	0011      	movs	r1, r2
 800271c:	1cbb      	adds	r3, r7, #2
 800271e:	1c02      	adds	r2, r0, #0
 8002720:	801a      	strh	r2, [r3, #0]
 8002722:	1c7b      	adds	r3, r7, #1
 8002724:	1c0a      	adds	r2, r1, #0
 8002726:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002728:	1c7b      	adds	r3, r7, #1
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002730:	1cbb      	adds	r3, r7, #2
 8002732:	881a      	ldrh	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273a:	1cbb      	adds	r3, r7, #2
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800275a:	4013      	ands	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d11f      	bne.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	0013      	movs	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	189b      	adds	r3, r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4912      	ldr	r1, [pc, #72]	@ (80027c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800277e:	0018      	movs	r0, r3
 8002780:	f7fd fcdc 	bl	800013c <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278a:	e008      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e001      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e009      	b.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	401a      	ands	r2, r3
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d0ed      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b004      	add	sp, #16
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	40007000 	.word	0x40007000
 80027c0:	fffff9ff 	.word	0xfffff9ff
 80027c4:	2000020c 	.word	0x2000020c
 80027c8:	000f4240 	.word	0x000f4240

080027cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	23e0      	movs	r3, #224	@ 0xe0
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	4013      	ands	r3, r2
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e2fe      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d100      	bne.n	8002802 <HAL_RCC_OscConfig+0x1e>
 8002800:	e07c      	b.n	80028fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002802:	4bc3      	ldr	r3, [pc, #780]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280c:	4bc0      	ldr	r3, [pc, #768]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2203      	movs	r2, #3
 8002812:	4013      	ands	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b10      	cmp	r3, #16
 800281a:	d102      	bne.n	8002822 <HAL_RCC_OscConfig+0x3e>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d002      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4bb9      	ldr	r3, [pc, #740]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	029b      	lsls	r3, r3, #10
 8002830:	4013      	ands	r3, r2
 8002832:	d062      	beq.n	80028fa <HAL_RCC_OscConfig+0x116>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15e      	bne.n	80028fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e2d9      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x78>
 800284c:	4bb0      	ldr	r3, [pc, #704]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4baf      	ldr	r3, [pc, #700]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	0249      	lsls	r1, r1, #9
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e020      	b.n	800289e <HAL_RCC_OscConfig+0xba>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	23a0      	movs	r3, #160	@ 0xa0
 8002862:	02db      	lsls	r3, r3, #11
 8002864:	429a      	cmp	r2, r3
 8002866:	d10e      	bne.n	8002886 <HAL_RCC_OscConfig+0xa2>
 8002868:	4ba9      	ldr	r3, [pc, #676]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4ba8      	ldr	r3, [pc, #672]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	02c9      	lsls	r1, r1, #11
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4ba6      	ldr	r3, [pc, #664]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4ba5      	ldr	r3, [pc, #660]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800287c:	2180      	movs	r1, #128	@ 0x80
 800287e:	0249      	lsls	r1, r1, #9
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0xba>
 8002886:	4ba2      	ldr	r3, [pc, #648]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4ba1      	ldr	r3, [pc, #644]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800288c:	49a1      	ldr	r1, [pc, #644]	@ (8002b14 <HAL_RCC_OscConfig+0x330>)
 800288e:	400a      	ands	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	4b9f      	ldr	r3, [pc, #636]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b9e      	ldr	r3, [pc, #632]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002898:	499f      	ldr	r1, [pc, #636]	@ (8002b18 <HAL_RCC_OscConfig+0x334>)
 800289a:	400a      	ands	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d014      	beq.n	80028d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7ff f9c9 	bl	8001c3c <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f9c4 	bl	8001c3c <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	@ 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e298      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	4b93      	ldr	r3, [pc, #588]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	029b      	lsls	r3, r3, #10
 80028ca:	4013      	ands	r3, r2
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xcc>
 80028ce:	e015      	b.n	80028fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f9b4 	bl	8001c3c <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028da:	f7ff f9af 	bl	8001c3c <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	@ 0x64
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e283      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ec:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0xf6>
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d100      	bne.n	8002908 <HAL_RCC_OscConfig+0x124>
 8002906:	e099      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4b81      	ldr	r3, [pc, #516]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2238      	movs	r2, #56	@ 0x38
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002912:	4b7f      	ldr	r3, [pc, #508]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2203      	movs	r2, #3
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d102      	bne.n	8002928 <HAL_RCC_OscConfig+0x144>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d002      	beq.n	800292e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d135      	bne.n	800299a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292e:	4b78      	ldr	r3, [pc, #480]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	@ 0x80
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4013      	ands	r3, r2
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x162>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e256      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b72      	ldr	r3, [pc, #456]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a74      	ldr	r2, [pc, #464]	@ (8002b1c <HAL_RCC_OscConfig+0x338>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	4b6e      	ldr	r3, [pc, #440]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d112      	bne.n	8002988 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002962:	4b6b      	ldr	r3, [pc, #428]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a6e      	ldr	r2, [pc, #440]	@ (8002b20 <HAL_RCC_OscConfig+0x33c>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	4b67      	ldr	r3, [pc, #412]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002976:	4b66      	ldr	r3, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0adb      	lsrs	r3, r3, #11
 800297c:	2207      	movs	r2, #7
 800297e:	4013      	ands	r3, r2
 8002980:	4a68      	ldr	r2, [pc, #416]	@ (8002b24 <HAL_RCC_OscConfig+0x340>)
 8002982:	40da      	lsrs	r2, r3
 8002984:	4b68      	ldr	r3, [pc, #416]	@ (8002b28 <HAL_RCC_OscConfig+0x344>)
 8002986:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002988:	4b68      	ldr	r3, [pc, #416]	@ (8002b2c <HAL_RCC_OscConfig+0x348>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff f8f9 	bl	8001b84 <HAL_InitTick>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d051      	beq.n	8002a3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e22c      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d030      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b20 <HAL_RCC_OscConfig+0x33c>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029b6:	4b56      	ldr	r3, [pc, #344]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b55      	ldr	r3, [pc, #340]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0049      	lsls	r1, r1, #1
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff f93a 	bl	8001c3c <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7ff f935 	bl	8001c3c <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e209      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4b48      	ldr	r3, [pc, #288]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_RCC_OscConfig+0x338>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	021a      	lsls	r2, r3, #8
 80029fc:	4b44      	ldr	r3, [pc, #272]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a04:	4b42      	ldr	r3, [pc, #264]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	4949      	ldr	r1, [pc, #292]	@ (8002b30 <HAL_RCC_OscConfig+0x34c>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7ff f914 	bl	8001c3c <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7ff f90f 	bl	8001c3c <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1e3      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2c:	4b38      	ldr	r3, [pc, #224]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4013      	ands	r3, r2
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x236>
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	d047      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a46:	4b32      	ldr	r3, [pc, #200]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2238      	movs	r2, #56	@ 0x38
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b18      	cmp	r3, #24
 8002a50:	d10a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d138      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e1c5      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d019      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a74:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f8de 	bl	8001c3c <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a86:	f7ff f8d9 	bl	8001c3c <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1ad      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d0f1      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2a2>
 8002aa2:	e018      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	2101      	movs	r1, #1
 8002aac:	438a      	bics	r2, r1
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f8c4 	bl	8001c3c <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f8bf 	bl	8001c3c <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e193      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d1f1      	bne.n	8002aba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	d100      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2fe>
 8002ae0:	e0c6      	b.n	8002c70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2238      	movs	r2, #56	@ 0x38
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d11e      	bne.n	8002b34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x32c>)
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_RCC_OscConfig+0x31e>
 8002b00:	e0b6      	b.n	8002c70 <HAL_RCC_OscConfig+0x48c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <HAL_RCC_OscConfig+0x328>
 8002b0a:	e0b1      	b.n	8002c70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e171      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	fffeffff 	.word	0xfffeffff
 8002b18:	fffbffff 	.word	0xfffbffff
 8002b1c:	ffff80ff 	.word	0xffff80ff
 8002b20:	ffffc7ff 	.word	0xffffc7ff
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	2000020c 	.word	0x2000020c
 8002b2c:	20000210 	.word	0x20000210
 8002b30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b34:	4bb1      	ldr	r3, [pc, #708]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	055b      	lsls	r3, r3, #21
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x362>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d011      	beq.n	8002b6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4bac      	ldr	r3, [pc, #688]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002b4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b4e:	4bab      	ldr	r3, [pc, #684]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002b50:	2180      	movs	r1, #128	@ 0x80
 8002b52:	0549      	lsls	r1, r1, #21
 8002b54:	430a      	orrs	r2, r1
 8002b56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b58:	4ba8      	ldr	r3, [pc, #672]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	055b      	lsls	r3, r3, #21
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	4ba4      	ldr	r3, [pc, #656]	@ (8002e00 <HAL_RCC_OscConfig+0x61c>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4013      	ands	r3, r2
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8002e00 <HAL_RCC_OscConfig+0x61c>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8002e00 <HAL_RCC_OscConfig+0x61c>)
 8002b80:	2180      	movs	r1, #128	@ 0x80
 8002b82:	0049      	lsls	r1, r1, #1
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f858 	bl	8001c3c <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b92:	f7ff f853 	bl	8001c3c <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e127      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b96      	ldr	r3, [pc, #600]	@ (8002e00 <HAL_RCC_OscConfig+0x61c>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3e2>
 8002bb8:	4b90      	ldr	r3, [pc, #576]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bbc:	4b8f      	ldr	r3, [pc, #572]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bc4:	e01c      	b.n	8002c00 <HAL_RCC_OscConfig+0x41c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x404>
 8002bce:	4b8b      	ldr	r3, [pc, #556]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bd2:	4b8a      	ldr	r3, [pc, #552]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bda:	4b88      	ldr	r3, [pc, #544]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bde:	4b87      	ldr	r3, [pc, #540]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x41c>
 8002be8:	4b84      	ldr	r3, [pc, #528]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bec:	4b83      	ldr	r3, [pc, #524]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bf4:	4b81      	ldr	r3, [pc, #516]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bf8:	4b80      	ldr	r3, [pc, #512]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d014      	beq.n	8002c32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f818 	bl	8001c3c <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c10:	e009      	b.n	8002c26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff f813 	bl	8001c3c <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	4a79      	ldr	r2, [pc, #484]	@ (8002e04 <HAL_RCC_OscConfig+0x620>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0e6      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c26:	4b75      	ldr	r3, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x42e>
 8002c30:	e013      	b.n	8002c5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7ff f803 	bl	8001c3c <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3a:	e009      	b.n	8002c50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fffe 	bl	8001c3c <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	4a6f      	ldr	r2, [pc, #444]	@ (8002e04 <HAL_RCC_OscConfig+0x620>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0d1      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c54:	2202      	movs	r2, #2
 8002c56:	4013      	ands	r3, r2
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c5a:	231f      	movs	r3, #31
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b65      	ldr	r3, [pc, #404]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c68:	4b64      	ldr	r3, [pc, #400]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c6a:	4967      	ldr	r1, [pc, #412]	@ (8002e08 <HAL_RCC_OscConfig+0x624>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x496>
 8002c78:	e0bb      	b.n	8002df2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7a:	4b60      	ldr	r3, [pc, #384]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2238      	movs	r2, #56	@ 0x38
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d100      	bne.n	8002c88 <HAL_RCC_OscConfig+0x4a4>
 8002c86:	e07b      	b.n	8002d80 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d156      	bne.n	8002d3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b5a      	ldr	r3, [pc, #360]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b59      	ldr	r3, [pc, #356]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002c96:	495d      	ldr	r1, [pc, #372]	@ (8002e0c <HAL_RCC_OscConfig+0x628>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe ffce 	bl	8001c3c <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7fe ffc9 	bl	8001c3c <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e09d      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb8:	4b50      	ldr	r3, [pc, #320]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	049b      	lsls	r3, r3, #18
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a51      	ldr	r2, [pc, #324]	@ (8002e10 <HAL_RCC_OscConfig+0x62c>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	4b42      	ldr	r3, [pc, #264]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf8:	4b40      	ldr	r3, [pc, #256]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002cfe:	2180      	movs	r1, #128	@ 0x80
 8002d00:	0449      	lsls	r1, r1, #17
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d06:	4b3d      	ldr	r3, [pc, #244]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	0549      	lsls	r1, r1, #21
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe ff92 	bl	8001c3c <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe ff8d 	bl	8001c3c <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e061      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d30:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	049b      	lsls	r3, r3, #18
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x53a>
 8002d3c:	e059      	b.n	8002df2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d44:	4931      	ldr	r1, [pc, #196]	@ (8002e0c <HAL_RCC_OscConfig+0x628>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe ff77 	bl	8001c3c <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe ff72 	bl	8001c3c <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e046      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	049b      	lsls	r3, r3, #18
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	4b21      	ldr	r3, [pc, #132]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d78:	4926      	ldr	r1, [pc, #152]	@ (8002e14 <HAL_RCC_OscConfig+0x630>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	e038      	b.n	8002df2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e033      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x618>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2203      	movs	r2, #3
 8002d96:	401a      	ands	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d126      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2270      	movs	r2, #112	@ 0x70
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11f      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	23fe      	movs	r3, #254	@ 0xfe
 8002db2:	01db      	lsls	r3, r3, #7
 8002db4:	401a      	ands	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d116      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	23f8      	movs	r3, #248	@ 0xf8
 8002dc4:	039b      	lsls	r3, r3, #14
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d10e      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	23e0      	movs	r3, #224	@ 0xe0
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	0f5b      	lsrs	r3, r3, #29
 8002de4:	075a      	lsls	r2, r3, #29
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b008      	add	sp, #32
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	00001388 	.word	0x00001388
 8002e08:	efffffff 	.word	0xefffffff
 8002e0c:	feffffff 	.word	0xfeffffff
 8002e10:	11c1808c 	.word	0x11c1808c
 8002e14:	eefefffc 	.word	0xeefefffc

08002e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0e9      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b76      	ldr	r3, [pc, #472]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2207      	movs	r2, #7
 8002e32:	4013      	ands	r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d91e      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b73      	ldr	r3, [pc, #460]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2207      	movs	r2, #7
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	4b70      	ldr	r3, [pc, #448]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fef6 	bl	8001c3c <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e54:	e009      	b.n	8002e6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe fef1 	bl	8001c3c <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	4a6a      	ldr	r2, [pc, #424]	@ (800300c <HAL_RCC_ClockConfig+0x1f4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0ca      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e6a:	4b67      	ldr	r3, [pc, #412]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2207      	movs	r2, #7
 8002e70:	4013      	ands	r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d015      	beq.n	8002eae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d006      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e8c:	4b60      	ldr	r3, [pc, #384]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b5f      	ldr	r3, [pc, #380]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002e92:	21e0      	movs	r1, #224	@ 0xe0
 8002e94:	01c9      	lsls	r1, r1, #7
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003014 <HAL_RCC_ClockConfig+0x1fc>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b59      	ldr	r3, [pc, #356]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d057      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec0:	4b53      	ldr	r3, [pc, #332]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d12b      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e097      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	049b      	lsls	r3, r3, #18
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d11f      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e08b      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef0:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d113      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e07f      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f08:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d108      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e074      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b3e      	ldr	r3, [pc, #248]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e06d      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2207      	movs	r2, #7
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7fe fe80 	bl	8001c3c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	e009      	b.n	8002f56 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f42:	f7fe fe7b 	bl	8001c3c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <HAL_RCC_ClockConfig+0x1f4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e054      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2238      	movs	r2, #56	@ 0x38
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1ec      	bne.n	8002f42 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b27      	ldr	r3, [pc, #156]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d21e      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fe58 	bl	8001c3c <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f90:	e009      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f92:	f7fe fe53 	bl	8001c3c <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <HAL_RCC_ClockConfig+0x1f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e02c      	b.n	8003000 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2207      	movs	r2, #7
 8002fac:	4013      	ands	r3, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <HAL_RCC_ClockConfig+0x200>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fd2:	f000 f829 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fd6:	0001      	movs	r1, r0
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	220f      	movs	r2, #15
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_RCC_ClockConfig+0x204>)
 8002fe4:	0092      	lsls	r2, r2, #2
 8002fe6:	58d3      	ldr	r3, [r2, r3]
 8002fe8:	221f      	movs	r2, #31
 8002fea:	4013      	ands	r3, r2
 8002fec:	000a      	movs	r2, r1
 8002fee:	40da      	lsrs	r2, r3
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_ClockConfig+0x208>)
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_ClockConfig+0x20c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fe fdc3 	bl	8001b84 <HAL_InitTick>
 8002ffe:	0003      	movs	r3, r0
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40022000 	.word	0x40022000
 800300c:	00001388 	.word	0x00001388
 8003010:	40021000 	.word	0x40021000
 8003014:	fffff0ff 	.word	0xfffff0ff
 8003018:	ffff8fff 	.word	0xffff8fff
 800301c:	080060f0 	.word	0x080060f0
 8003020:	2000020c 	.word	0x2000020c
 8003024:	20000210 	.word	0x20000210

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302e:	4b3c      	ldr	r3, [pc, #240]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2238      	movs	r2, #56	@ 0x38
 8003034:	4013      	ands	r3, r2
 8003036:	d10f      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003038:	4b39      	ldr	r3, [pc, #228]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0adb      	lsrs	r3, r3, #11
 800303e:	2207      	movs	r2, #7
 8003040:	4013      	ands	r3, r2
 8003042:	2201      	movs	r2, #1
 8003044:	409a      	lsls	r2, r3
 8003046:	0013      	movs	r3, r2
 8003048:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	4835      	ldr	r0, [pc, #212]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xfc>)
 800304e:	f7fd f875 	bl	800013c <__udivsi3>
 8003052:	0003      	movs	r3, r0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	e05d      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003058:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2238      	movs	r2, #56	@ 0x38
 800305e:	4013      	ands	r3, r2
 8003060:	2b08      	cmp	r3, #8
 8003062:	d102      	bne.n	800306a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003064:	4b30      	ldr	r3, [pc, #192]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x100>)
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	e054      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306a:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2238      	movs	r2, #56	@ 0x38
 8003070:	4013      	ands	r3, r2
 8003072:	2b10      	cmp	r3, #16
 8003074:	d138      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003076:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2203      	movs	r2, #3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	2207      	movs	r2, #7
 8003088:	4013      	ands	r3, r2
 800308a:	3301      	adds	r3, #1
 800308c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d10d      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4824      	ldr	r0, [pc, #144]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x100>)
 8003098:	f7fd f850 	bl	800013c <__udivsi3>
 800309c:	0003      	movs	r3, r0
 800309e:	0019      	movs	r1, r3
 80030a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	227f      	movs	r2, #127	@ 0x7f
 80030a8:	4013      	ands	r3, r2
 80030aa:	434b      	muls	r3, r1
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e00d      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	481c      	ldr	r0, [pc, #112]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030b4:	f7fd f842 	bl	800013c <__udivsi3>
 80030b8:	0003      	movs	r3, r0
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	227f      	movs	r2, #127	@ 0x7f
 80030c4:	4013      	ands	r3, r2
 80030c6:	434b      	muls	r3, r1
 80030c8:	617b      	str	r3, [r7, #20]
        break;
 80030ca:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0f5b      	lsrs	r3, r3, #29
 80030d2:	2207      	movs	r2, #7
 80030d4:	4013      	ands	r3, r2
 80030d6:	3301      	adds	r3, #1
 80030d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	6978      	ldr	r0, [r7, #20]
 80030de:	f7fd f82d 	bl	800013c <__udivsi3>
 80030e2:	0003      	movs	r3, r0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e015      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2238      	movs	r2, #56	@ 0x38
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d103      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2238      	movs	r2, #56	@ 0x38
 8003102:	4013      	ands	r3, r2
 8003104:	2b18      	cmp	r3, #24
 8003106:	d103      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003108:	23fa      	movs	r3, #250	@ 0xfa
 800310a:	01db      	lsls	r3, r3, #7
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e001      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003114:	693b      	ldr	r3, [r7, #16]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	00f42400 	.word	0x00f42400
 8003128:	007a1200 	.word	0x007a1200

0800312c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b02      	ldr	r3, [pc, #8]	@ (800313c <HAL_RCC_GetHCLKFreq+0x10>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	2000020c 	.word	0x2000020c

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003144:	f7ff fff2 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003148:	0004      	movs	r4, r0
 800314a:	f7ff fb3f 	bl	80027cc <LL_RCC_GetAPB1Prescaler>
 800314e:	0003      	movs	r3, r0
 8003150:	0b1a      	lsrs	r2, r3, #12
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003154:	0092      	lsls	r2, r2, #2
 8003156:	58d3      	ldr	r3, [r2, r3]
 8003158:	221f      	movs	r2, #31
 800315a:	4013      	ands	r3, r2
 800315c:	40dc      	lsrs	r4, r3
 800315e:	0023      	movs	r3, r4
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	08006130 	.word	0x08006130

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003174:	2313      	movs	r3, #19
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800317c:	2312      	movs	r3, #18
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	4013      	ands	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003190:	e0a3      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2011      	movs	r0, #17
 8003194:	183b      	adds	r3, r7, r0
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4bc3      	ldr	r3, [pc, #780]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800319c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	055b      	lsls	r3, r3, #21
 80031a2:	4013      	ands	r3, r2
 80031a4:	d110      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4bc0      	ldr	r3, [pc, #768]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031aa:	4bbf      	ldr	r3, [pc, #764]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ac:	2180      	movs	r1, #128	@ 0x80
 80031ae:	0549      	lsls	r1, r1, #21
 80031b0:	430a      	orrs	r2, r1
 80031b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031b4:	4bbc      	ldr	r3, [pc, #752]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	055b      	lsls	r3, r3, #21
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c8:	4bb8      	ldr	r3, [pc, #736]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4bb7      	ldr	r3, [pc, #732]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031ce:	2180      	movs	r1, #128	@ 0x80
 80031d0:	0049      	lsls	r1, r1, #1
 80031d2:	430a      	orrs	r2, r1
 80031d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d6:	f7fe fd31 	bl	8001c3c <HAL_GetTick>
 80031da:	0003      	movs	r3, r0
 80031dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031de:	e00b      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e0:	f7fe fd2c 	bl	8001c3c <HAL_GetTick>
 80031e4:	0002      	movs	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d904      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80031ee:	2313      	movs	r3, #19
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2203      	movs	r2, #3
 80031f4:	701a      	strb	r2, [r3, #0]
        break;
 80031f6:	e005      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031f8:	4bac      	ldr	r3, [pc, #688]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d0ed      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003204:	2313      	movs	r3, #19
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d154      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800320e:	4ba6      	ldr	r3, [pc, #664]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003212:	23c0      	movs	r3, #192	@ 0xc0
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	429a      	cmp	r2, r3
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800322a:	4b9f      	ldr	r3, [pc, #636]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	4aa0      	ldr	r2, [pc, #640]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003234:	4b9c      	ldr	r3, [pc, #624]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003238:	4b9b      	ldr	r3, [pc, #620]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800323a:	2180      	movs	r1, #128	@ 0x80
 800323c:	0249      	lsls	r1, r1, #9
 800323e:	430a      	orrs	r2, r1
 8003240:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003242:	4b99      	ldr	r3, [pc, #612]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003246:	4b98      	ldr	r3, [pc, #608]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003248:	499a      	ldr	r1, [pc, #616]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800324a:	400a      	ands	r2, r1
 800324c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800324e:	4b96      	ldr	r3, [pc, #600]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d016      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fcee 	bl	8001c3c <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003264:	e00c      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fe fce9 	bl	8001c3c <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	4a91      	ldr	r2, [pc, #580]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d904      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003276:	2313      	movs	r3, #19
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2203      	movs	r2, #3
 800327c:	701a      	strb	r2, [r3, #0]
            break;
 800327e:	e004      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	4b89      	ldr	r3, [pc, #548]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	d0ed      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800328a:	2313      	movs	r3, #19
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003294:	4b84      	ldr	r3, [pc, #528]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	4a85      	ldr	r2, [pc, #532]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032a2:	4b81      	ldr	r3, [pc, #516]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a4:	430a      	orrs	r2, r1
 80032a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032a8:	e00c      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032aa:	2312      	movs	r3, #18
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2213      	movs	r2, #19
 80032b0:	18ba      	adds	r2, r7, r2
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e005      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	2312      	movs	r3, #18
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2213      	movs	r2, #19
 80032be:	18ba      	adds	r2, r7, r2
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c4:	2311      	movs	r3, #17
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b76      	ldr	r3, [pc, #472]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d2:	4b75      	ldr	r3, [pc, #468]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d4:	4979      	ldr	r1, [pc, #484]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e4:	4b70      	ldr	r3, [pc, #448]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	2203      	movs	r2, #3
 80032ea:	4393      	bics	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4b6d      	ldr	r3, [pc, #436]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2202      	movs	r2, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003302:	4b69      	ldr	r3, [pc, #420]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	220c      	movs	r2, #12
 8003308:	4393      	bics	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b65      	ldr	r3, [pc, #404]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2210      	movs	r2, #16
 800331c:	4013      	ands	r3, r2
 800331e:	d009      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003320:	4b61      	ldr	r3, [pc, #388]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003324:	4a66      	ldr	r2, [pc, #408]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003326:	4013      	ands	r3, r2
 8003328:	0019      	movs	r1, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	4b5e      	ldr	r3, [pc, #376]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003330:	430a      	orrs	r2, r1
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003340:	4b59      	ldr	r3, [pc, #356]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	4a5f      	ldr	r2, [pc, #380]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	4b56      	ldr	r3, [pc, #344]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003350:	430a      	orrs	r2, r1
 8003352:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4b51      	ldr	r3, [pc, #324]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	4a58      	ldr	r2, [pc, #352]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003366:	4013      	ands	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	4b4e      	ldr	r3, [pc, #312]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003370:	430a      	orrs	r2, r1
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	4013      	ands	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337e:	4b4a      	ldr	r3, [pc, #296]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003382:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003384:	4013      	ands	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	4b46      	ldr	r3, [pc, #280]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800338e:	430a      	orrs	r2, r1
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	01db      	lsls	r3, r3, #7
 800339a:	4013      	ands	r3, r2
 800339c:	d015      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339e:	4b42      	ldr	r3, [pc, #264]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	0899      	lsrs	r1, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	2380      	movs	r3, #128	@ 0x80
 80033b6:	05db      	lsls	r3, r3, #23
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033bc:	4b3a      	ldr	r3, [pc, #232]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b39      	ldr	r3, [pc, #228]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	0249      	lsls	r1, r1, #9
 80033c6:	430a      	orrs	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	031b      	lsls	r3, r3, #12
 80033d2:	4013      	ands	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d6:	4b34      	ldr	r3, [pc, #208]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	2240      	movs	r2, #64	@ 0x40
 80033dc:	4393      	bics	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e4:	4b30      	ldr	r3, [pc, #192]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	039b      	lsls	r3, r3, #14
 80033f2:	4013      	ands	r3, r2
 80033f4:	d016      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033f6:	4b2c      	ldr	r3, [pc, #176]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	4a35      	ldr	r2, [pc, #212]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003404:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003406:	430a      	orrs	r2, r1
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	03db      	lsls	r3, r3, #15
 8003412:	429a      	cmp	r2, r3
 8003414:	d106      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003416:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	0449      	lsls	r1, r1, #17
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	03db      	lsls	r3, r3, #15
 800342c:	4013      	ands	r3, r2
 800342e:	d016      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003434:	4a27      	ldr	r2, [pc, #156]	@ (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003440:	430a      	orrs	r2, r1
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	045b      	lsls	r3, r3, #17
 800344c:	429a      	cmp	r2, r3
 800344e:	d106      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003450:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003456:	2180      	movs	r1, #128	@ 0x80
 8003458:	0449      	lsls	r1, r1, #17
 800345a:	430a      	orrs	r2, r1
 800345c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4013      	ands	r3, r2
 8003468:	d016      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800346a:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800346c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003470:	4013      	ands	r3, r2
 8003472:	0019      	movs	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800347a:	430a      	orrs	r2, r1
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	429a      	cmp	r2, r3
 8003488:	d106      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800348a:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003490:	2180      	movs	r1, #128	@ 0x80
 8003492:	0249      	lsls	r1, r1, #9
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003498:	2312      	movs	r3, #18
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b006      	add	sp, #24
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	fffffcff 	.word	0xfffffcff
 80034b4:	fffeffff 	.word	0xfffeffff
 80034b8:	00001388 	.word	0x00001388
 80034bc:	efffffff 	.word	0xefffffff
 80034c0:	fffff3ff 	.word	0xfffff3ff
 80034c4:	fff3ffff 	.word	0xfff3ffff
 80034c8:	ffcfffff 	.word	0xffcfffff
 80034cc:	ffffcfff 	.word	0xffffcfff
 80034d0:	ffbfffff 	.word	0xffbfffff
 80034d4:	feffffff 	.word	0xfeffffff
 80034d8:	ffff3fff 	.word	0xffff3fff

080034dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e046      	b.n	800357c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2288      	movs	r2, #136	@ 0x88
 80034f2:	589b      	ldr	r3, [r3, r2]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d107      	bne.n	8003508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2284      	movs	r2, #132	@ 0x84
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0018      	movs	r0, r3
 8003504:	f7fd fdde 	bl	80010c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2288      	movs	r2, #136	@ 0x88
 800350c:	2124      	movs	r1, #36	@ 0x24
 800350e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2101      	movs	r1, #1
 800351c:	438a      	bics	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fe28 	bl	8004180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0018      	movs	r0, r3
 8003534:	f000 fb66 	bl	8003c04 <UART_SetConfig>
 8003538:	0003      	movs	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e01c      	b.n	800357c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	490d      	ldr	r1, [pc, #52]	@ (8003584 <HAL_UART_Init+0xa8>)
 800354e:	400a      	ands	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	212a      	movs	r1, #42	@ 0x2a
 800355e:	438a      	bics	r2, r1
 8003560:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 feb7 	bl	80042e8 <UART_CheckIdleState>
 800357a:	0003      	movs	r3, r0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	ffffb7ff 	.word	0xffffb7ff

08003588 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b0aa      	sub	sp, #168	@ 0xa8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	22a4      	movs	r2, #164	@ 0xa4
 8003598:	18b9      	adds	r1, r7, r2
 800359a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	20a0      	movs	r0, #160	@ 0xa0
 80035a4:	1839      	adds	r1, r7, r0
 80035a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	249c      	movs	r4, #156	@ 0x9c
 80035b0:	1939      	adds	r1, r7, r4
 80035b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035b4:	0011      	movs	r1, r2
 80035b6:	18bb      	adds	r3, r7, r2
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4aa2      	ldr	r2, [pc, #648]	@ (8003844 <HAL_UART_IRQHandler+0x2bc>)
 80035bc:	4013      	ands	r3, r2
 80035be:	2298      	movs	r2, #152	@ 0x98
 80035c0:	18bd      	adds	r5, r7, r2
 80035c2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80035c4:	18bb      	adds	r3, r7, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11a      	bne.n	8003602 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2220      	movs	r2, #32
 80035d2:	4013      	ands	r3, r2
 80035d4:	d015      	beq.n	8003602 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035d6:	183b      	adds	r3, r7, r0
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	4013      	ands	r3, r2
 80035de:	d105      	bne.n	80035ec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	055b      	lsls	r3, r3, #21
 80035e8:	4013      	ands	r3, r2
 80035ea:	d00a      	beq.n	8003602 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d100      	bne.n	80035f6 <HAL_UART_IRQHandler+0x6e>
 80035f4:	e2dc      	b.n	8003bb0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	0010      	movs	r0, r2
 80035fe:	4798      	blx	r3
      }
      return;
 8003600:	e2d6      	b.n	8003bb0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003602:	2398      	movs	r3, #152	@ 0x98
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d100      	bne.n	800360e <HAL_UART_IRQHandler+0x86>
 800360c:	e122      	b.n	8003854 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800360e:	239c      	movs	r3, #156	@ 0x9c
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a8c      	ldr	r2, [pc, #560]	@ (8003848 <HAL_UART_IRQHandler+0x2c0>)
 8003616:	4013      	ands	r3, r2
 8003618:	d106      	bne.n	8003628 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800361a:	23a0      	movs	r3, #160	@ 0xa0
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8a      	ldr	r2, [pc, #552]	@ (800384c <HAL_UART_IRQHandler+0x2c4>)
 8003622:	4013      	ands	r3, r2
 8003624:	d100      	bne.n	8003628 <HAL_UART_IRQHandler+0xa0>
 8003626:	e115      	b.n	8003854 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003628:	23a4      	movs	r3, #164	@ 0xa4
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d012      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
 8003634:	23a0      	movs	r3, #160	@ 0xa0
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4013      	ands	r3, r2
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2290      	movs	r2, #144	@ 0x90
 800364e:	589b      	ldr	r3, [r3, r2]
 8003650:	2201      	movs	r2, #1
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2190      	movs	r1, #144	@ 0x90
 8003658:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800365a:	23a4      	movs	r3, #164	@ 0xa4
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2202      	movs	r2, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d011      	beq.n	800368a <HAL_UART_IRQHandler+0x102>
 8003666:	239c      	movs	r3, #156	@ 0x9c
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	d00b      	beq.n	800368a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2202      	movs	r2, #2
 8003678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2290      	movs	r2, #144	@ 0x90
 800367e:	589b      	ldr	r3, [r3, r2]
 8003680:	2204      	movs	r2, #4
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2190      	movs	r1, #144	@ 0x90
 8003688:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800368a:	23a4      	movs	r3, #164	@ 0xa4
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	d011      	beq.n	80036ba <HAL_UART_IRQHandler+0x132>
 8003696:	239c      	movs	r3, #156	@ 0x9c
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	d00b      	beq.n	80036ba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2204      	movs	r2, #4
 80036a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2290      	movs	r2, #144	@ 0x90
 80036ae:	589b      	ldr	r3, [r3, r2]
 80036b0:	2202      	movs	r2, #2
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2190      	movs	r1, #144	@ 0x90
 80036b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ba:	23a4      	movs	r3, #164	@ 0xa4
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2208      	movs	r2, #8
 80036c2:	4013      	ands	r3, r2
 80036c4:	d017      	beq.n	80036f6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036c6:	23a0      	movs	r3, #160	@ 0xa0
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2220      	movs	r2, #32
 80036ce:	4013      	ands	r3, r2
 80036d0:	d105      	bne.n	80036de <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036d2:	239c      	movs	r3, #156	@ 0x9c
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003848 <HAL_UART_IRQHandler+0x2c0>)
 80036da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036dc:	d00b      	beq.n	80036f6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2208      	movs	r2, #8
 80036e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2290      	movs	r2, #144	@ 0x90
 80036ea:	589b      	ldr	r3, [r3, r2]
 80036ec:	2208      	movs	r2, #8
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2190      	movs	r1, #144	@ 0x90
 80036f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036f6:	23a4      	movs	r3, #164	@ 0xa4
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	4013      	ands	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_UART_IRQHandler+0x1a4>
 8003704:	23a0      	movs	r3, #160	@ 0xa0
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	04db      	lsls	r3, r3, #19
 800370e:	4013      	ands	r3, r2
 8003710:	d00c      	beq.n	800372c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2290      	movs	r2, #144	@ 0x90
 8003720:	589b      	ldr	r3, [r3, r2]
 8003722:	2220      	movs	r2, #32
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2190      	movs	r1, #144	@ 0x90
 800372a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2290      	movs	r2, #144	@ 0x90
 8003730:	589b      	ldr	r3, [r3, r2]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d100      	bne.n	8003738 <HAL_UART_IRQHandler+0x1b0>
 8003736:	e23d      	b.n	8003bb4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003738:	23a4      	movs	r3, #164	@ 0xa4
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2220      	movs	r2, #32
 8003740:	4013      	ands	r3, r2
 8003742:	d015      	beq.n	8003770 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003744:	23a0      	movs	r3, #160	@ 0xa0
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	4013      	ands	r3, r2
 800374e:	d106      	bne.n	800375e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003750:	239c      	movs	r3, #156	@ 0x9c
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	@ 0x80
 8003758:	055b      	lsls	r3, r3, #21
 800375a:	4013      	ands	r3, r2
 800375c:	d008      	beq.n	8003770 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	0010      	movs	r0, r2
 800376e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2290      	movs	r2, #144	@ 0x90
 8003774:	589b      	ldr	r3, [r3, r2]
 8003776:	2194      	movs	r1, #148	@ 0x94
 8003778:	187a      	adds	r2, r7, r1
 800377a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2240      	movs	r2, #64	@ 0x40
 8003784:	4013      	ands	r3, r2
 8003786:	2b40      	cmp	r3, #64	@ 0x40
 8003788:	d004      	beq.n	8003794 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800378a:	187b      	adds	r3, r7, r1
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2228      	movs	r2, #40	@ 0x28
 8003790:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003792:	d04c      	beq.n	800382e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 ffa6 	bl	80046e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2240      	movs	r2, #64	@ 0x40
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b40      	cmp	r3, #64	@ 0x40
 80037a8:	d13c      	bne.n	8003824 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037aa:	f3ef 8310 	mrs	r3, PRIMASK
 80037ae:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80037b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	2090      	movs	r0, #144	@ 0x90
 80037b4:	183a      	adds	r2, r7, r0
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	2301      	movs	r3, #1
 80037ba:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	438a      	bics	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	183b      	adds	r3, r7, r0
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	@ 0x80
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d016      	beq.n	800381a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2280      	movs	r2, #128	@ 0x80
 80037f0:	589b      	ldr	r3, [r3, r2]
 80037f2:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_UART_IRQHandler+0x2c8>)
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	589b      	ldr	r3, [r3, r2]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fe fc77 	bl	80020f0 <HAL_DMA_Abort_IT>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d01c      	beq.n	8003840 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	589b      	ldr	r3, [r3, r2]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	2180      	movs	r1, #128	@ 0x80
 8003812:	5852      	ldr	r2, [r2, r1]
 8003814:	0010      	movs	r0, r2
 8003816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e012      	b.n	8003840 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 f9e9 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003822:	e00d      	b.n	8003840 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f9e4 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e008      	b.n	8003840 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 f9df 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2290      	movs	r2, #144	@ 0x90
 800383a:	2100      	movs	r1, #0
 800383c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800383e:	e1b9      	b.n	8003bb4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	46c0      	nop			@ (mov r8, r8)
    return;
 8003842:	e1b7      	b.n	8003bb4 <HAL_UART_IRQHandler+0x62c>
 8003844:	0000080f 	.word	0x0000080f
 8003848:	10000001 	.word	0x10000001
 800384c:	04000120 	.word	0x04000120
 8003850:	080049ad 	.word	0x080049ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d000      	beq.n	800385e <HAL_UART_IRQHandler+0x2d6>
 800385c:	e13e      	b.n	8003adc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800385e:	23a4      	movs	r3, #164	@ 0xa4
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	4013      	ands	r3, r2
 8003868:	d100      	bne.n	800386c <HAL_UART_IRQHandler+0x2e4>
 800386a:	e137      	b.n	8003adc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800386c:	23a0      	movs	r3, #160	@ 0xa0
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	d100      	bne.n	800387a <HAL_UART_IRQHandler+0x2f2>
 8003878:	e130      	b.n	8003adc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2210      	movs	r2, #16
 8003880:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2240      	movs	r2, #64	@ 0x40
 800388a:	4013      	ands	r3, r2
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d000      	beq.n	8003892 <HAL_UART_IRQHandler+0x30a>
 8003890:	e0a4      	b.n	80039dc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2280      	movs	r2, #128	@ 0x80
 8003896:	589b      	ldr	r3, [r3, r2]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	217e      	movs	r1, #126	@ 0x7e
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d100      	bne.n	80038ac <HAL_UART_IRQHandler+0x324>
 80038aa:	e185      	b.n	8003bb8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	225c      	movs	r2, #92	@ 0x5c
 80038b0:	5a9b      	ldrh	r3, [r3, r2]
 80038b2:	187a      	adds	r2, r7, r1
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d300      	bcc.n	80038bc <HAL_UART_IRQHandler+0x334>
 80038ba:	e17d      	b.n	8003bb8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	187a      	adds	r2, r7, r1
 80038c0:	215e      	movs	r1, #94	@ 0x5e
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2280      	movs	r2, #128	@ 0x80
 80038ca:	589b      	ldr	r3, [r3, r2]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	d170      	bne.n	80039b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d6:	f3ef 8310 	mrs	r3, PRIMASK
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038e0:	2301      	movs	r3, #1
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	f383 8810 	msr	PRIMASK, r3
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	49b4      	ldr	r1, [pc, #720]	@ (8003bc8 <HAL_UART_IRQHandler+0x640>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	f383 8810 	msr	PRIMASK, r3
}
 8003906:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	677b      	str	r3, [r7, #116]	@ 0x74
 8003912:	2301      	movs	r3, #1
 8003914:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	438a      	bics	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003942:	673b      	str	r3, [r7, #112]	@ 0x70
 8003944:	2301      	movs	r3, #1
 8003946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2140      	movs	r1, #64	@ 0x40
 800395c:	438a      	bics	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003962:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	228c      	movs	r2, #140	@ 0x8c
 8003970:	2120      	movs	r1, #32
 8003972:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397a:	f3ef 8310 	mrs	r3, PRIMASK
 800397e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003984:	2301      	movs	r3, #1
 8003986:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2110      	movs	r1, #16
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2280      	movs	r2, #128	@ 0x80
 80039b0:	589b      	ldr	r3, [r3, r2]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fe fb3a 	bl	800202c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	225c      	movs	r2, #92	@ 0x5c
 80039c2:	5a9a      	ldrh	r2, [r3, r2]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	215e      	movs	r1, #94	@ 0x5e
 80039c8:	5a5b      	ldrh	r3, [r3, r1]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7fd fa8d 	bl	8000ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039da:	e0ed      	b.n	8003bb8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	225c      	movs	r2, #92	@ 0x5c
 80039e0:	5a99      	ldrh	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	225e      	movs	r2, #94	@ 0x5e
 80039e6:	5a9b      	ldrh	r3, [r3, r2]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	208e      	movs	r0, #142	@ 0x8e
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	1a8a      	subs	r2, r1, r2
 80039f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	225e      	movs	r2, #94	@ 0x5e
 80039f6:	5a9b      	ldrh	r3, [r3, r2]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d100      	bne.n	8003a00 <HAL_UART_IRQHandler+0x478>
 80039fe:	e0dd      	b.n	8003bbc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d100      	bne.n	8003a0a <HAL_UART_IRQHandler+0x482>
 8003a08:	e0d8      	b.n	8003bbc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a12:	2488      	movs	r4, #136	@ 0x88
 8003a14:	193a      	adds	r2, r7, r4
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4967      	ldr	r1, [pc, #412]	@ (8003bcc <HAL_UART_IRQHandler+0x644>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	193b      	adds	r3, r7, r4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a48:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a4a:	2484      	movs	r4, #132	@ 0x84
 8003a4c:	193a      	adds	r2, r7, r4
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	2301      	movs	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f383 8810 	msr	PRIMASK, r3
}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	495a      	ldr	r1, [pc, #360]	@ (8003bd0 <HAL_UART_IRQHandler+0x648>)
 8003a68:	400a      	ands	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	228c      	movs	r2, #140	@ 0x8c
 8003a7e:	2120      	movs	r1, #32
 8003a80:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a96:	2480      	movs	r4, #128	@ 0x80
 8003a98:	193a      	adds	r2, r7, r4
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2110      	movs	r1, #16
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0011      	movs	r1, r2
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fd fa0d 	bl	8000ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ada:	e06f      	b.n	8003bbc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003adc:	23a4      	movs	r3, #164	@ 0xa4
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	2380      	movs	r3, #128	@ 0x80
 8003ae4:	035b      	lsls	r3, r3, #13
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d010      	beq.n	8003b0c <HAL_UART_IRQHandler+0x584>
 8003aea:	239c      	movs	r3, #156	@ 0x9c
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	03db      	lsls	r3, r3, #15
 8003af4:	4013      	ands	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	0352      	lsls	r2, r2, #13
 8003b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 ff94 	bl	8004a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b0a:	e05a      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b0c:	23a4      	movs	r3, #164	@ 0xa4
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2280      	movs	r2, #128	@ 0x80
 8003b14:	4013      	ands	r3, r2
 8003b16:	d016      	beq.n	8003b46 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b18:	23a0      	movs	r3, #160	@ 0xa0
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2280      	movs	r2, #128	@ 0x80
 8003b20:	4013      	ands	r3, r2
 8003b22:	d106      	bne.n	8003b32 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b24:	239c      	movs	r3, #156	@ 0x9c
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d042      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	0010      	movs	r0, r2
 8003b42:	4798      	blx	r3
    }
    return;
 8003b44:	e03c      	b.n	8003bc0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b46:	23a4      	movs	r3, #164	@ 0xa4
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d00a      	beq.n	8003b68 <HAL_UART_IRQHandler+0x5e0>
 8003b52:	23a0      	movs	r3, #160	@ 0xa0
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2240      	movs	r2, #64	@ 0x40
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 ff3a 	bl	80049da <UART_EndTransmit_IT>
    return;
 8003b66:	e02c      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b68:	23a4      	movs	r3, #164	@ 0xa4
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	4013      	ands	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <HAL_UART_IRQHandler+0x606>
 8003b76:	23a0      	movs	r3, #160	@ 0xa0
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	4013      	ands	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 ff63 	bl	8004a52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b8c:	e019      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b8e:	23a4      	movs	r3, #164	@ 0xa4
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	045b      	lsls	r3, r3, #17
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d012      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
 8003b9c:	23a0      	movs	r3, #160	@ 0xa0
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da0d      	bge.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 ff4a 	bl	8004a42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bae:	e008      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	e006      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	e004      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	e002      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	e000      	b.n	8003bc2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003bc0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b02a      	add	sp, #168	@ 0xa8
 8003bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc8:	fffffeff 	.word	0xfffffeff
 8003bcc:	fffffedf 	.word	0xfffffedf
 8003bd0:	effffffe 	.word	0xeffffffe

08003bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b090      	sub	sp, #64	@ 0x40
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c0c:	231a      	movs	r3, #26
 8003c0e:	2220      	movs	r2, #32
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	19db      	adds	r3, r3, r7
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4aaf      	ldr	r2, [pc, #700]	@ (8003ef4 <UART_SetConfig+0x2f0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4aaa      	ldr	r2, [pc, #680]	@ (8003ef8 <UART_SetConfig+0x2f4>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	0018      	movs	r0, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	68d9      	ldr	r1, [r3, #12]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4aa4      	ldr	r2, [pc, #656]	@ (8003efc <UART_SetConfig+0x2f8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c76:	4313      	orrs	r3, r2
 8003c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a9f      	ldr	r2, [pc, #636]	@ (8003f00 <UART_SetConfig+0x2fc>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	220f      	movs	r2, #15
 8003c98:	4393      	bics	r3, r2
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a95      	ldr	r2, [pc, #596]	@ (8003f04 <UART_SetConfig+0x300>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d131      	bne.n	8003d18 <UART_SetConfig+0x114>
 8003cb4:	4b94      	ldr	r3, [pc, #592]	@ (8003f08 <UART_SetConfig+0x304>)
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	2203      	movs	r2, #3
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d01d      	beq.n	8003cfc <UART_SetConfig+0xf8>
 8003cc0:	d823      	bhi.n	8003d0a <UART_SetConfig+0x106>
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d00c      	beq.n	8003ce0 <UART_SetConfig+0xdc>
 8003cc6:	d820      	bhi.n	8003d0a <UART_SetConfig+0x106>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <UART_SetConfig+0xce>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d00e      	beq.n	8003cee <UART_SetConfig+0xea>
 8003cd0:	e01b      	b.n	8003d0a <UART_SetConfig+0x106>
 8003cd2:	231b      	movs	r3, #27
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	189b      	adds	r3, r3, r2
 8003cd8:	19db      	adds	r3, r3, r7
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e0b4      	b.n	8003e4a <UART_SetConfig+0x246>
 8003ce0:	231b      	movs	r3, #27
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	19db      	adds	r3, r3, r7
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e0ad      	b.n	8003e4a <UART_SetConfig+0x246>
 8003cee:	231b      	movs	r3, #27
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	189b      	adds	r3, r3, r2
 8003cf4:	19db      	adds	r3, r3, r7
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e0a6      	b.n	8003e4a <UART_SetConfig+0x246>
 8003cfc:	231b      	movs	r3, #27
 8003cfe:	2220      	movs	r2, #32
 8003d00:	189b      	adds	r3, r3, r2
 8003d02:	19db      	adds	r3, r3, r7
 8003d04:	2208      	movs	r2, #8
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e09f      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d0a:	231b      	movs	r3, #27
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	19db      	adds	r3, r3, r7
 8003d12:	2210      	movs	r2, #16
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e098      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7b      	ldr	r2, [pc, #492]	@ (8003f0c <UART_SetConfig+0x308>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d131      	bne.n	8003d86 <UART_SetConfig+0x182>
 8003d22:	4b79      	ldr	r3, [pc, #484]	@ (8003f08 <UART_SetConfig+0x304>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	220c      	movs	r2, #12
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d01d      	beq.n	8003d6a <UART_SetConfig+0x166>
 8003d2e:	d823      	bhi.n	8003d78 <UART_SetConfig+0x174>
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00c      	beq.n	8003d4e <UART_SetConfig+0x14a>
 8003d34:	d820      	bhi.n	8003d78 <UART_SetConfig+0x174>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0x13c>
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d00e      	beq.n	8003d5c <UART_SetConfig+0x158>
 8003d3e:	e01b      	b.n	8003d78 <UART_SetConfig+0x174>
 8003d40:	231b      	movs	r3, #27
 8003d42:	2220      	movs	r2, #32
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	19db      	adds	r3, r3, r7
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e07d      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d4e:	231b      	movs	r3, #27
 8003d50:	2220      	movs	r2, #32
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	2202      	movs	r2, #2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e076      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d5c:	231b      	movs	r3, #27
 8003d5e:	2220      	movs	r2, #32
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	19db      	adds	r3, r3, r7
 8003d64:	2204      	movs	r2, #4
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e06f      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d6a:	231b      	movs	r3, #27
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	19db      	adds	r3, r3, r7
 8003d72:	2208      	movs	r2, #8
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e068      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d78:	231b      	movs	r3, #27
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	2210      	movs	r2, #16
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e061      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a61      	ldr	r2, [pc, #388]	@ (8003f10 <UART_SetConfig+0x30c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <UART_SetConfig+0x19a>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e055      	b.n	8003e4a <UART_SetConfig+0x246>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f14 <UART_SetConfig+0x310>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d106      	bne.n	8003db6 <UART_SetConfig+0x1b2>
 8003da8:	231b      	movs	r3, #27
 8003daa:	2220      	movs	r2, #32
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e049      	b.n	8003e4a <UART_SetConfig+0x246>
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a50      	ldr	r2, [pc, #320]	@ (8003efc <UART_SetConfig+0x2f8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d13e      	bne.n	8003e3e <UART_SetConfig+0x23a>
 8003dc0:	4b51      	ldr	r3, [pc, #324]	@ (8003f08 <UART_SetConfig+0x304>)
 8003dc2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dc4:	23c0      	movs	r3, #192	@ 0xc0
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	22c0      	movs	r2, #192	@ 0xc0
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <UART_SetConfig+0x21e>
 8003dd2:	22c0      	movs	r2, #192	@ 0xc0
 8003dd4:	0112      	lsls	r2, r2, #4
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d82a      	bhi.n	8003e30 <UART_SetConfig+0x22c>
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	0112      	lsls	r2, r2, #4
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d011      	beq.n	8003e06 <UART_SetConfig+0x202>
 8003de2:	2280      	movs	r2, #128	@ 0x80
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d822      	bhi.n	8003e30 <UART_SetConfig+0x22c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <UART_SetConfig+0x1f4>
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <UART_SetConfig+0x210>
 8003df6:	e01b      	b.n	8003e30 <UART_SetConfig+0x22c>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	19db      	adds	r3, r3, r7
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	e021      	b.n	8003e4a <UART_SetConfig+0x246>
 8003e06:	231b      	movs	r3, #27
 8003e08:	2220      	movs	r2, #32
 8003e0a:	189b      	adds	r3, r3, r2
 8003e0c:	19db      	adds	r3, r3, r7
 8003e0e:	2202      	movs	r2, #2
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e01a      	b.n	8003e4a <UART_SetConfig+0x246>
 8003e14:	231b      	movs	r3, #27
 8003e16:	2220      	movs	r2, #32
 8003e18:	189b      	adds	r3, r3, r2
 8003e1a:	19db      	adds	r3, r3, r7
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e013      	b.n	8003e4a <UART_SetConfig+0x246>
 8003e22:	231b      	movs	r3, #27
 8003e24:	2220      	movs	r2, #32
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e00c      	b.n	8003e4a <UART_SetConfig+0x246>
 8003e30:	231b      	movs	r3, #27
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2210      	movs	r2, #16
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e005      	b.n	8003e4a <UART_SetConfig+0x246>
 8003e3e:	231b      	movs	r3, #27
 8003e40:	2220      	movs	r2, #32
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	2210      	movs	r2, #16
 8003e48:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003efc <UART_SetConfig+0x2f8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d000      	beq.n	8003e56 <UART_SetConfig+0x252>
 8003e54:	e0a9      	b.n	8003faa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e56:	231b      	movs	r3, #27
 8003e58:	2220      	movs	r2, #32
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d015      	beq.n	8003e90 <UART_SetConfig+0x28c>
 8003e64:	dc18      	bgt.n	8003e98 <UART_SetConfig+0x294>
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d00d      	beq.n	8003e86 <UART_SetConfig+0x282>
 8003e6a:	dc15      	bgt.n	8003e98 <UART_SetConfig+0x294>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <UART_SetConfig+0x272>
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d005      	beq.n	8003e80 <UART_SetConfig+0x27c>
 8003e74:	e010      	b.n	8003e98 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7ff f963 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e7e:	e014      	b.n	8003eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <UART_SetConfig+0x314>)
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e84:	e011      	b.n	8003eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7ff f8cf 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e8e:	e00c      	b.n	8003eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e96:	e008      	b.n	8003eaa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e9c:	231a      	movs	r3, #26
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	189b      	adds	r3, r3, r2
 8003ea2:	19db      	adds	r3, r3, r7
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
        break;
 8003ea8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d100      	bne.n	8003eb2 <UART_SetConfig+0x2ae>
 8003eb0:	e14b      	b.n	800414a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <UART_SetConfig+0x318>)
 8003eb8:	0052      	lsls	r2, r2, #1
 8003eba:	5ad3      	ldrh	r3, [r2, r3]
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ec0:	f7fc f93c 	bl	800013c <__udivsi3>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	0013      	movs	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d305      	bcc.n	8003ee4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d91d      	bls.n	8003f20 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003ee4:	231a      	movs	r3, #26
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e12b      	b.n	800414a <UART_SetConfig+0x546>
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	cfff69f3 	.word	0xcfff69f3
 8003ef8:	ffffcfff 	.word	0xffffcfff
 8003efc:	40008000 	.word	0x40008000
 8003f00:	11fff4ff 	.word	0x11fff4ff
 8003f04:	40013800 	.word	0x40013800
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40004c00 	.word	0x40004c00
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	08006150 	.word	0x08006150
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f2c:	4b92      	ldr	r3, [pc, #584]	@ (8004178 <UART_SetConfig+0x574>)
 8003f2e:	0052      	lsls	r2, r2, #1
 8003f30:	5ad3      	ldrh	r3, [r2, r3]
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	69b8      	ldr	r0, [r7, #24]
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	f7fc fa72 	bl	8000428 <__aeabi_uldivmod>
 8003f44:	0002      	movs	r2, r0
 8003f46:	000b      	movs	r3, r1
 8003f48:	0e11      	lsrs	r1, r2, #24
 8003f4a:	021d      	lsls	r5, r3, #8
 8003f4c:	430d      	orrs	r5, r1
 8003f4e:	0214      	lsls	r4, r2, #8
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	1900      	adds	r0, r0, r4
 8003f62:	4169      	adcs	r1, r5
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f7fc fa59 	bl	8000428 <__aeabi_uldivmod>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f80:	23c0      	movs	r3, #192	@ 0xc0
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d309      	bcc.n	8003f9c <UART_SetConfig+0x398>
 8003f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	035b      	lsls	r3, r3, #13
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d204      	bcs.n	8003f9c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	e0d6      	b.n	800414a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003f9c:	231a      	movs	r3, #26
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e0cf      	b.n	800414a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d000      	beq.n	8003fb8 <UART_SetConfig+0x3b4>
 8003fb6:	e070      	b.n	800409a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003fb8:	231b      	movs	r3, #27
 8003fba:	2220      	movs	r2, #32
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d015      	beq.n	8003ff2 <UART_SetConfig+0x3ee>
 8003fc6:	dc18      	bgt.n	8003ffa <UART_SetConfig+0x3f6>
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d00d      	beq.n	8003fe8 <UART_SetConfig+0x3e4>
 8003fcc:	dc15      	bgt.n	8003ffa <UART_SetConfig+0x3f6>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <UART_SetConfig+0x3d4>
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d005      	beq.n	8003fe2 <UART_SetConfig+0x3de>
 8003fd6:	e010      	b.n	8003ffa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7ff f8b2 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fe0:	e014      	b.n	800400c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe2:	4b66      	ldr	r3, [pc, #408]	@ (800417c <UART_SetConfig+0x578>)
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fe6:	e011      	b.n	800400c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe8:	f7ff f81e 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8003fec:	0003      	movs	r3, r0
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ff0:	e00c      	b.n	800400c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	2380      	movs	r3, #128	@ 0x80
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ff8:	e008      	b.n	800400c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003ffe:	231a      	movs	r3, #26
 8004000:	2220      	movs	r2, #32
 8004002:	189b      	adds	r3, r3, r2
 8004004:	19db      	adds	r3, r3, r7
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
        break;
 800400a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	2b00      	cmp	r3, #0
 8004010:	d100      	bne.n	8004014 <UART_SetConfig+0x410>
 8004012:	e09a      	b.n	800414a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004018:	4b57      	ldr	r3, [pc, #348]	@ (8004178 <UART_SetConfig+0x574>)
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	5ad3      	ldrh	r3, [r2, r3]
 800401e:	0019      	movs	r1, r3
 8004020:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004022:	f7fc f88b 	bl	800013c <__udivsi3>
 8004026:	0003      	movs	r3, r0
 8004028:	005a      	lsls	r2, r3, #1
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	18d2      	adds	r2, r2, r3
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7fc f87f 	bl	800013c <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d921      	bls.n	800408c <UART_SetConfig+0x488>
 8004048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	025b      	lsls	r3, r3, #9
 800404e:	429a      	cmp	r2, r3
 8004050:	d21c      	bcs.n	800408c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004054:	b29a      	uxth	r2, r3
 8004056:	200e      	movs	r0, #14
 8004058:	2420      	movs	r4, #32
 800405a:	1903      	adds	r3, r0, r4
 800405c:	19db      	adds	r3, r3, r7
 800405e:	210f      	movs	r1, #15
 8004060:	438a      	bics	r2, r1
 8004062:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	2207      	movs	r2, #7
 800406c:	4013      	ands	r3, r2
 800406e:	b299      	uxth	r1, r3
 8004070:	1903      	adds	r3, r0, r4
 8004072:	19db      	adds	r3, r3, r7
 8004074:	1902      	adds	r2, r0, r4
 8004076:	19d2      	adds	r2, r2, r7
 8004078:	8812      	ldrh	r2, [r2, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1902      	adds	r2, r0, r4
 8004084:	19d2      	adds	r2, r2, r7
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e05e      	b.n	800414a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800408c:	231a      	movs	r3, #26
 800408e:	2220      	movs	r2, #32
 8004090:	189b      	adds	r3, r3, r2
 8004092:	19db      	adds	r3, r3, r7
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e057      	b.n	800414a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800409a:	231b      	movs	r3, #27
 800409c:	2220      	movs	r2, #32
 800409e:	189b      	adds	r3, r3, r2
 80040a0:	19db      	adds	r3, r3, r7
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d015      	beq.n	80040d4 <UART_SetConfig+0x4d0>
 80040a8:	dc18      	bgt.n	80040dc <UART_SetConfig+0x4d8>
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d00d      	beq.n	80040ca <UART_SetConfig+0x4c6>
 80040ae:	dc15      	bgt.n	80040dc <UART_SetConfig+0x4d8>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <UART_SetConfig+0x4b6>
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d005      	beq.n	80040c4 <UART_SetConfig+0x4c0>
 80040b8:	e010      	b.n	80040dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ba:	f7ff f841 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 80040be:	0003      	movs	r3, r0
 80040c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040c2:	e014      	b.n	80040ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c4:	4b2d      	ldr	r3, [pc, #180]	@ (800417c <UART_SetConfig+0x578>)
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040c8:	e011      	b.n	80040ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ca:	f7fe ffad 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 80040ce:	0003      	movs	r3, r0
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040d2:	e00c      	b.n	80040ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040da:	e008      	b.n	80040ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040e0:	231a      	movs	r3, #26
 80040e2:	2220      	movs	r2, #32
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
        break;
 80040ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02a      	beq.n	800414a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004178 <UART_SetConfig+0x574>)
 80040fa:	0052      	lsls	r2, r2, #1
 80040fc:	5ad3      	ldrh	r3, [r2, r3]
 80040fe:	0019      	movs	r1, r3
 8004100:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004102:	f7fc f81b 	bl	800013c <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	001a      	movs	r2, r3
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	18d2      	adds	r2, r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0019      	movs	r1, r3
 8004118:	0010      	movs	r0, r2
 800411a:	f7fc f80f 	bl	800013c <__udivsi3>
 800411e:	0003      	movs	r3, r0
 8004120:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d90a      	bls.n	800413e <UART_SetConfig+0x53a>
 8004128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412a:	2380      	movs	r3, #128	@ 0x80
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	429a      	cmp	r2, r3
 8004130:	d205      	bcs.n	800413e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	b29a      	uxth	r2, r3
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800413e:	231a      	movs	r3, #26
 8004140:	2220      	movs	r2, #32
 8004142:	189b      	adds	r3, r3, r2
 8004144:	19db      	adds	r3, r3, r7
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	226a      	movs	r2, #106	@ 0x6a
 800414e:	2101      	movs	r1, #1
 8004150:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2268      	movs	r2, #104	@ 0x68
 8004156:	2101      	movs	r1, #1
 8004158:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	2200      	movs	r2, #0
 800415e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	2200      	movs	r2, #0
 8004164:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004166:	231a      	movs	r3, #26
 8004168:	2220      	movs	r2, #32
 800416a:	189b      	adds	r3, r3, r2
 800416c:	19db      	adds	r3, r3, r7
 800416e:	781b      	ldrb	r3, [r3, #0]
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	b010      	add	sp, #64	@ 0x40
 8004176:	bdb0      	pop	{r4, r5, r7, pc}
 8004178:	08006150 	.word	0x08006150
 800417c:	00f42400 	.word	0x00f42400

08004180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	2208      	movs	r2, #8
 800418e:	4013      	ands	r3, r2
 8004190:	d00b      	beq.n	80041aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a4a      	ldr	r2, [pc, #296]	@ (80042c4 <UART_AdvFeatureConfig+0x144>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	2201      	movs	r2, #1
 80041b0:	4013      	ands	r3, r2
 80041b2:	d00b      	beq.n	80041cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4a43      	ldr	r2, [pc, #268]	@ (80042c8 <UART_AdvFeatureConfig+0x148>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d00b      	beq.n	80041ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a3b      	ldr	r2, [pc, #236]	@ (80042cc <UART_AdvFeatureConfig+0x14c>)
 80041de:	4013      	ands	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	2204      	movs	r2, #4
 80041f4:	4013      	ands	r3, r2
 80041f6:	d00b      	beq.n	8004210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <UART_AdvFeatureConfig+0x150>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	2210      	movs	r2, #16
 8004216:	4013      	ands	r3, r2
 8004218:	d00b      	beq.n	8004232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a2c      	ldr	r2, [pc, #176]	@ (80042d4 <UART_AdvFeatureConfig+0x154>)
 8004222:	4013      	ands	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	2220      	movs	r2, #32
 8004238:	4013      	ands	r3, r2
 800423a:	d00b      	beq.n	8004254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <UART_AdvFeatureConfig+0x158>)
 8004244:	4013      	ands	r3, r2
 8004246:	0019      	movs	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	2240      	movs	r2, #64	@ 0x40
 800425a:	4013      	ands	r3, r2
 800425c:	d01d      	beq.n	800429a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a1d      	ldr	r2, [pc, #116]	@ (80042dc <UART_AdvFeatureConfig+0x15c>)
 8004266:	4013      	ands	r3, r2
 8004268:	0019      	movs	r1, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800427a:	2380      	movs	r3, #128	@ 0x80
 800427c:	035b      	lsls	r3, r3, #13
 800427e:	429a      	cmp	r2, r3
 8004280:	d10b      	bne.n	800429a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a15      	ldr	r2, [pc, #84]	@ (80042e0 <UART_AdvFeatureConfig+0x160>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	2280      	movs	r2, #128	@ 0x80
 80042a0:	4013      	ands	r3, r2
 80042a2:	d00b      	beq.n	80042bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a0e      	ldr	r2, [pc, #56]	@ (80042e4 <UART_AdvFeatureConfig+0x164>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	ffff7fff 	.word	0xffff7fff
 80042c8:	fffdffff 	.word	0xfffdffff
 80042cc:	fffeffff 	.word	0xfffeffff
 80042d0:	fffbffff 	.word	0xfffbffff
 80042d4:	ffffefff 	.word	0xffffefff
 80042d8:	ffffdfff 	.word	0xffffdfff
 80042dc:	ffefffff 	.word	0xffefffff
 80042e0:	ff9fffff 	.word	0xff9fffff
 80042e4:	fff7ffff 	.word	0xfff7ffff

080042e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b092      	sub	sp, #72	@ 0x48
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2290      	movs	r2, #144	@ 0x90
 80042f4:	2100      	movs	r1, #0
 80042f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f8:	f7fd fca0 	bl	8001c3c <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2208      	movs	r2, #8
 8004308:	4013      	ands	r3, r2
 800430a:	2b08      	cmp	r3, #8
 800430c:	d12d      	bne.n	800436a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	0391      	lsls	r1, r2, #14
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4a47      	ldr	r2, [pc, #284]	@ (8004434 <UART_CheckIdleState+0x14c>)
 8004318:	9200      	str	r2, [sp, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	f000 f88e 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d022      	beq.n	800436a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800432c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800432e:	2301      	movs	r3, #1
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2180      	movs	r1, #128	@ 0x80
 8004346:	438a      	bics	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2288      	movs	r2, #136	@ 0x88
 800435a:	2120      	movs	r1, #32
 800435c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2284      	movs	r2, #132	@ 0x84
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e060      	b.n	800442c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2204      	movs	r2, #4
 8004372:	4013      	ands	r3, r2
 8004374:	2b04      	cmp	r3, #4
 8004376:	d146      	bne.n	8004406 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	03d1      	lsls	r1, r2, #15
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <UART_CheckIdleState+0x14c>)
 8004382:	9200      	str	r2, [sp, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	f000 f859 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d03b      	beq.n	8004406 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	60fb      	str	r3, [r7, #12]
  return(result);
 8004394:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	2301      	movs	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4922      	ldr	r1, [pc, #136]	@ (8004438 <UART_CheckIdleState+0x150>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80043c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ca:	2301      	movs	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	438a      	bics	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	228c      	movs	r2, #140	@ 0x8c
 80043f6:	2120      	movs	r1, #32
 80043f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2284      	movs	r2, #132	@ 0x84
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e012      	b.n	800442c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2288      	movs	r2, #136	@ 0x88
 800440a:	2120      	movs	r1, #32
 800440c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	228c      	movs	r2, #140	@ 0x8c
 8004412:	2120      	movs	r1, #32
 8004414:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2284      	movs	r2, #132	@ 0x84
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b010      	add	sp, #64	@ 0x40
 8004432:	bd80      	pop	{r7, pc}
 8004434:	01ffffff 	.word	0x01ffffff
 8004438:	fffffedf 	.word	0xfffffedf

0800443c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	e051      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	3301      	adds	r3, #1
 8004452:	d04e      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fd fbf2 	bl	8001c3c <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e051      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2204      	movs	r2, #4
 8004476:	4013      	ands	r3, r2
 8004478:	d03b      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b80      	cmp	r3, #128	@ 0x80
 800447e:	d038      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d035      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2208      	movs	r2, #8
 800448e:	4013      	ands	r3, r2
 8004490:	2b08      	cmp	r3, #8
 8004492:	d111      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2208      	movs	r2, #8
 800449a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f922 	bl	80046e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2290      	movs	r2, #144	@ 0x90
 80044a8:	2108      	movs	r1, #8
 80044aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2284      	movs	r2, #132	@ 0x84
 80044b0:	2100      	movs	r1, #0
 80044b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e02c      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	2380      	movs	r3, #128	@ 0x80
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	401a      	ands	r2, r3
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d112      	bne.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2280      	movs	r2, #128	@ 0x80
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f905 	bl	80046e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2290      	movs	r2, #144	@ 0x90
 80044e2:	2120      	movs	r1, #32
 80044e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2284      	movs	r2, #132	@ 0x84
 80044ea:	2100      	movs	r1, #0
 80044ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	425a      	negs	r2, r3
 8004502:	4153      	adcs	r3, r2
 8004504:	b2db      	uxtb	r3, r3
 8004506:	001a      	movs	r2, r3
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d09e      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b004      	add	sp, #16
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b090      	sub	sp, #64	@ 0x40
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	1dbb      	adds	r3, r7, #6
 8004528:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1dba      	adds	r2, r7, #6
 8004534:	215c      	movs	r1, #92	@ 0x5c
 8004536:	8812      	ldrh	r2, [r2, #0]
 8004538:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2290      	movs	r2, #144	@ 0x90
 800453e:	2100      	movs	r1, #0
 8004540:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	228c      	movs	r2, #140	@ 0x8c
 8004546:	2122      	movs	r1, #34	@ 0x22
 8004548:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2280      	movs	r2, #128	@ 0x80
 800454e:	589b      	ldr	r3, [r3, r2]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02d      	beq.n	80045b0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2280      	movs	r2, #128	@ 0x80
 8004558:	589b      	ldr	r3, [r3, r2]
 800455a:	4a40      	ldr	r2, [pc, #256]	@ (800465c <UART_Start_Receive_DMA+0x140>)
 800455c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2280      	movs	r2, #128	@ 0x80
 8004562:	589b      	ldr	r3, [r3, r2]
 8004564:	4a3e      	ldr	r2, [pc, #248]	@ (8004660 <UART_Start_Receive_DMA+0x144>)
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	589b      	ldr	r3, [r3, r2]
 800456e:	4a3d      	ldr	r2, [pc, #244]	@ (8004664 <UART_Start_Receive_DMA+0x148>)
 8004570:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2280      	movs	r2, #128	@ 0x80
 8004576:	589b      	ldr	r3, [r3, r2]
 8004578:	2200      	movs	r2, #0
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2280      	movs	r2, #128	@ 0x80
 8004580:	5898      	ldr	r0, [r3, r2]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3324      	adds	r3, #36	@ 0x24
 8004588:	0019      	movs	r1, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	001a      	movs	r2, r3
 8004590:	1dbb      	adds	r3, r7, #6
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	f7fd fcc4 	bl	8001f20 <HAL_DMA_Start_IT>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d009      	beq.n	80045b0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2290      	movs	r2, #144	@ 0x90
 80045a0:	2110      	movs	r1, #16
 80045a2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	228c      	movs	r2, #140	@ 0x8c
 80045a8:	2120      	movs	r1, #32
 80045aa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e050      	b.n	8004652 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b8:	f3ef 8310 	mrs	r3, PRIMASK
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80045be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c2:	2301      	movs	r3, #1
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2180      	movs	r1, #128	@ 0x80
 80045da:	0049      	lsls	r1, r1, #1
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	613b      	str	r3, [r7, #16]
  return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f6:	2301      	movs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			@ (mov r8, r8)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	61fb      	str	r3, [r7, #28]
  return(result);
 8004624:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
 8004628:	2301      	movs	r3, #1
 800462a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2140      	movs	r1, #64	@ 0x40
 8004640:	430a      	orrs	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004646:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	0018      	movs	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	b010      	add	sp, #64	@ 0x40
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	080047b5 	.word	0x080047b5
 8004660:	080048e5 	.word	0x080048e5
 8004664:	08004927 	.word	0x08004927

08004668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	@ 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	60bb      	str	r3, [r7, #8]
  return(result);
 8004676:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
 800467a:	2301      	movs	r3, #1
 800467c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	21c0      	movs	r1, #192	@ 0xc0
 8004692:	438a      	bics	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	617b      	str	r3, [r7, #20]
  return(result);
 80046a8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	2301      	movs	r3, #1
 80046ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4908      	ldr	r1, [pc, #32]	@ (80046e4 <UART_EndTxTransfer+0x7c>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2288      	movs	r2, #136	@ 0x88
 80046d8:	2120      	movs	r1, #32
 80046da:	5099      	str	r1, [r3, r2]
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b00a      	add	sp, #40	@ 0x28
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	ff7fffff 	.word	0xff7fffff

080046e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08e      	sub	sp, #56	@ 0x38
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	617b      	str	r3, [r7, #20]
  return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fa:	2301      	movs	r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4926      	ldr	r1, [pc, #152]	@ (80047ac <UART_EndRxTransfer+0xc4>)
 8004712:	400a      	ands	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8310 	mrs	r3, PRIMASK
 8004726:	623b      	str	r3, [r7, #32]
  return(result);
 8004728:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800472a:	633b      	str	r3, [r7, #48]	@ 0x30
 800472c:	2301      	movs	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	f383 8810 	msr	PRIMASK, r3
}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	491b      	ldr	r1, [pc, #108]	@ (80047b0 <UART_EndRxTransfer+0xc8>)
 8004744:	400a      	ands	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d118      	bne.n	800478e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475c:	f3ef 8310 	mrs	r3, PRIMASK
 8004760:	60bb      	str	r3, [r7, #8]
  return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004766:	2301      	movs	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			@ (mov r8, r8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2110      	movs	r1, #16
 800477e:	438a      	bics	r2, r1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f383 8810 	msr	PRIMASK, r3
}
 800478c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	228c      	movs	r2, #140	@ 0x8c
 8004792:	2120      	movs	r1, #32
 8004794:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b00e      	add	sp, #56	@ 0x38
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	fffffedf 	.word	0xfffffedf
 80047b0:	effffffe 	.word	0xeffffffe

080047b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b094      	sub	sp, #80	@ 0x50
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2220      	movs	r2, #32
 80047ca:	4013      	ands	r3, r2
 80047cc:	d16f      	bne.n	80048ae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80047ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d0:	225e      	movs	r2, #94	@ 0x5e
 80047d2:	2100      	movs	r1, #0
 80047d4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	61bb      	str	r3, [r7, #24]
  return(result);
 80047dc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e0:	2301      	movs	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	493a      	ldr	r1, [pc, #232]	@ (80048e0 <UART_DMAReceiveCplt+0x12c>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8310 	mrs	r3, PRIMASK
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	647b      	str	r3, [r7, #68]	@ 0x44
 8004812:	2301      	movs	r3, #1
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	438a      	bics	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483a:	f3ef 8310 	mrs	r3, PRIMASK
 800483e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004842:	643b      	str	r3, [r7, #64]	@ 0x40
 8004844:	2301      	movs	r3, #1
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484a:	f383 8810 	msr	PRIMASK, r3
}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2140      	movs	r1, #64	@ 0x40
 800485c:	438a      	bics	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004862:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004866:	f383 8810 	msr	PRIMASK, r3
}
 800486a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800486c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486e:	228c      	movs	r2, #140	@ 0x8c
 8004870:	2120      	movs	r1, #32
 8004872:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d118      	bne.n	80048ae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487c:	f3ef 8310 	mrs	r3, PRIMASK
 8004880:	60fb      	str	r3, [r7, #12]
  return(result);
 8004882:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004886:	2301      	movs	r3, #1
 8004888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f383 8810 	msr	PRIMASK, r3
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2110      	movs	r1, #16
 800489e:	438a      	bics	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b0:	2200      	movs	r2, #0
 80048b2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d108      	bne.n	80048ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048be:	225c      	movs	r2, #92	@ 0x5c
 80048c0:	5a9a      	ldrh	r2, [r3, r2]
 80048c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c4:	0011      	movs	r1, r2
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fc fb14 	bl	8000ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048cc:	e003      	b.n	80048d6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80048ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fc fb3b 	bl	8000f4c <HAL_UART_RxCpltCallback>
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b014      	add	sp, #80	@ 0x50
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	fffffeff 	.word	0xfffffeff

080048e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10a      	bne.n	8004916 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	225c      	movs	r2, #92	@ 0x5c
 8004904:	5a9b      	ldrh	r3, [r3, r2]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7fc faf0 	bl	8000ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004914:	e003      	b.n	800491e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff f963 	bl	8003be4 <HAL_UART_RxHalfCpltCallback>
}
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b004      	add	sp, #16
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2288      	movs	r2, #136	@ 0x88
 8004938:	589b      	ldr	r3, [r3, r2]
 800493a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	228c      	movs	r2, #140	@ 0x8c
 8004940:	589b      	ldr	r3, [r3, r2]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2280      	movs	r2, #128	@ 0x80
 800494c:	4013      	ands	r3, r2
 800494e:	2b80      	cmp	r3, #128	@ 0x80
 8004950:	d10a      	bne.n	8004968 <UART_DMAError+0x42>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b21      	cmp	r3, #33	@ 0x21
 8004956:	d107      	bne.n	8004968 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2256      	movs	r2, #86	@ 0x56
 800495c:	2100      	movs	r1, #0
 800495e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff fe80 	bl	8004668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2240      	movs	r2, #64	@ 0x40
 8004970:	4013      	ands	r3, r2
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d10a      	bne.n	800498c <UART_DMAError+0x66>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b22      	cmp	r3, #34	@ 0x22
 800497a:	d107      	bne.n	800498c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	225e      	movs	r2, #94	@ 0x5e
 8004980:	2100      	movs	r1, #0
 8004982:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff feae 	bl	80046e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2290      	movs	r2, #144	@ 0x90
 8004990:	589b      	ldr	r3, [r3, r2]
 8004992:	2210      	movs	r2, #16
 8004994:	431a      	orrs	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2190      	movs	r1, #144	@ 0x90
 800499a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	0018      	movs	r0, r3
 80049a0:	f7ff f928 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b006      	add	sp, #24
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	225e      	movs	r2, #94	@ 0x5e
 80049be:	2100      	movs	r1, #0
 80049c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2256      	movs	r2, #86	@ 0x56
 80049c6:	2100      	movs	r1, #0
 80049c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff f911 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e2:	f3ef 8310 	mrs	r3, PRIMASK
 80049e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80049e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	2301      	movs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2140      	movs	r1, #64	@ 0x40
 8004a04:	438a      	bics	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f383 8810 	msr	PRIMASK, r3
}
 8004a12:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2288      	movs	r2, #136	@ 0x88
 8004a18:	2120      	movs	r1, #32
 8004a1a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff f8d5 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b006      	add	sp, #24
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b002      	add	sp, #8
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2284      	movs	r2, #132	@ 0x84
 8004a70:	5c9b      	ldrb	r3, [r3, r2]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e027      	b.n	8004aca <HAL_UARTEx_DisableFifoMode+0x66>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2284      	movs	r2, #132	@ 0x84
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2288      	movs	r2, #136	@ 0x88
 8004a86:	2124      	movs	r1, #36	@ 0x24
 8004a88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	438a      	bics	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2288      	movs	r2, #136	@ 0x88
 8004abc:	2120      	movs	r1, #32
 8004abe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2284      	movs	r2, #132	@ 0x84
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	0018      	movs	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b004      	add	sp, #16
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	dfffffff 	.word	0xdfffffff

08004ad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2284      	movs	r2, #132	@ 0x84
 8004ae6:	5c9b      	ldrb	r3, [r3, r2]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e02e      	b.n	8004b4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2284      	movs	r2, #132	@ 0x84
 8004af4:	2101      	movs	r1, #1
 8004af6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2288      	movs	r2, #136	@ 0x88
 8004afc:	2124      	movs	r1, #36	@ 0x24
 8004afe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	438a      	bics	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	08d9      	lsrs	r1, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f8bc 	bl	8004cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2288      	movs	r2, #136	@ 0x88
 8004b40:	2120      	movs	r1, #32
 8004b42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2284      	movs	r2, #132	@ 0x84
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2284      	movs	r2, #132	@ 0x84
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e02f      	b.n	8004bd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2284      	movs	r2, #132	@ 0x84
 8004b74:	2101      	movs	r1, #1
 8004b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2288      	movs	r2, #136	@ 0x88
 8004b7c:	2124      	movs	r1, #36	@ 0x24
 8004b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	438a      	bics	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 f87b 	bl	8004cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2288      	movs	r2, #136	@ 0x88
 8004bc2:	2120      	movs	r1, #32
 8004bc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2284      	movs	r2, #132	@ 0x84
 8004bca:	2100      	movs	r1, #0
 8004bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b004      	add	sp, #16
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	f1ffffff 	.word	0xf1ffffff

08004bdc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bdc:	b5b0      	push	{r4, r5, r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	228c      	movs	r2, #140	@ 0x8c
 8004bee:	589b      	ldr	r3, [r3, r2]
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d156      	bne.n	8004ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004bfa:	1dbb      	adds	r3, r7, #6
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e04e      	b.n	8004ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	015b      	lsls	r3, r3, #5
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d109      	bne.n	8004c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d001      	beq.n	8004c26 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e03e      	b.n	8004ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c32:	2527      	movs	r5, #39	@ 0x27
 8004c34:	197c      	adds	r4, r7, r5
 8004c36:	1dbb      	adds	r3, r7, #6
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f7ff fc6c 	bl	800451c <UART_Start_Receive_DMA>
 8004c44:	0003      	movs	r3, r0
 8004c46:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c48:	197b      	adds	r3, r7, r5
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d124      	bne.n	8004c9a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d11c      	bne.n	8004c92 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	617b      	str	r3, [r7, #20]
  return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2110      	movs	r1, #16
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	e003      	b.n	8004c9a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c92:	2327      	movs	r3, #39	@ 0x27
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004c9a:	2327      	movs	r3, #39	@ 0x27
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	e000      	b.n	8004ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b00a      	add	sp, #40	@ 0x28
 8004caa:	bdb0      	pop	{r4, r5, r7, pc}

08004cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d108      	bne.n	8004cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	226a      	movs	r2, #106	@ 0x6a
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2268      	movs	r2, #104	@ 0x68
 8004cc8:	2101      	movs	r1, #1
 8004cca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ccc:	e043      	b.n	8004d56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cce:	260f      	movs	r6, #15
 8004cd0:	19bb      	adds	r3, r7, r6
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cd6:	200e      	movs	r0, #14
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	2208      	movs	r2, #8
 8004cdc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	0e5b      	lsrs	r3, r3, #25
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	240d      	movs	r4, #13
 8004cea:	193b      	adds	r3, r7, r4
 8004cec:	2107      	movs	r1, #7
 8004cee:	400a      	ands	r2, r1
 8004cf0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	0f5b      	lsrs	r3, r3, #29
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	250c      	movs	r5, #12
 8004cfe:	197b      	adds	r3, r7, r5
 8004d00:	2107      	movs	r1, #7
 8004d02:	400a      	ands	r2, r1
 8004d04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	197a      	adds	r2, r7, r5
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	4914      	ldr	r1, [pc, #80]	@ (8004d60 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d10:	5c8a      	ldrb	r2, [r1, r2]
 8004d12:	435a      	muls	r2, r3
 8004d14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d16:	197b      	adds	r3, r7, r5
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d1e:	0019      	movs	r1, r3
 8004d20:	f7fb fa96 	bl	8000250 <__divsi3>
 8004d24:	0003      	movs	r3, r0
 8004d26:	b299      	uxth	r1, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	226a      	movs	r2, #106	@ 0x6a
 8004d2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d2e:	19bb      	adds	r3, r7, r6
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	193a      	adds	r2, r7, r4
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	490a      	ldr	r1, [pc, #40]	@ (8004d60 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d38:	5c8a      	ldrb	r2, [r1, r2]
 8004d3a:	435a      	muls	r2, r3
 8004d3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4a08      	ldr	r2, [pc, #32]	@ (8004d64 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d46:	0019      	movs	r1, r3
 8004d48:	f7fb fa82 	bl	8000250 <__divsi3>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	b299      	uxth	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2268      	movs	r2, #104	@ 0x68
 8004d54:	5299      	strh	r1, [r3, r2]
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b005      	add	sp, #20
 8004d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	08006168 	.word	0x08006168
 8004d64:	08006170 	.word	0x08006170

08004d68 <_strtoul_l.constprop.0>:
 8004d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6a:	001e      	movs	r6, r3
 8004d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e68 <_strtoul_l.constprop.0+0x100>)
 8004d6e:	0017      	movs	r7, r2
 8004d70:	000c      	movs	r4, r1
 8004d72:	469c      	mov	ip, r3
 8004d74:	2208      	movs	r2, #8
 8004d76:	b085      	sub	sp, #20
 8004d78:	9003      	str	r0, [sp, #12]
 8004d7a:	9100      	str	r1, [sp, #0]
 8004d7c:	0023      	movs	r3, r4
 8004d7e:	4661      	mov	r1, ip
 8004d80:	781d      	ldrb	r5, [r3, #0]
 8004d82:	3401      	adds	r4, #1
 8004d84:	5d48      	ldrb	r0, [r1, r5]
 8004d86:	0001      	movs	r1, r0
 8004d88:	4011      	ands	r1, r2
 8004d8a:	4210      	tst	r0, r2
 8004d8c:	d1f6      	bne.n	8004d7c <_strtoul_l.constprop.0+0x14>
 8004d8e:	2d2d      	cmp	r5, #45	@ 0x2d
 8004d90:	d137      	bne.n	8004e02 <_strtoul_l.constprop.0+0x9a>
 8004d92:	7825      	ldrb	r5, [r4, #0]
 8004d94:	1c9c      	adds	r4, r3, #2
 8004d96:	2301      	movs	r3, #1
 8004d98:	9302      	str	r3, [sp, #8]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	0033      	movs	r3, r6
 8004d9e:	4393      	bics	r3, r2
 8004da0:	d109      	bne.n	8004db6 <_strtoul_l.constprop.0+0x4e>
 8004da2:	2d30      	cmp	r5, #48	@ 0x30
 8004da4:	d133      	bne.n	8004e0e <_strtoul_l.constprop.0+0xa6>
 8004da6:	2120      	movs	r1, #32
 8004da8:	7823      	ldrb	r3, [r4, #0]
 8004daa:	438b      	bics	r3, r1
 8004dac:	2b58      	cmp	r3, #88	@ 0x58
 8004dae:	d12e      	bne.n	8004e0e <_strtoul_l.constprop.0+0xa6>
 8004db0:	0016      	movs	r6, r2
 8004db2:	7865      	ldrb	r5, [r4, #1]
 8004db4:	3402      	adds	r4, #2
 8004db6:	2001      	movs	r0, #1
 8004db8:	0031      	movs	r1, r6
 8004dba:	4240      	negs	r0, r0
 8004dbc:	f7fb f9be 	bl	800013c <__udivsi3>
 8004dc0:	9001      	str	r0, [sp, #4]
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	0031      	movs	r1, r6
 8004dc6:	4240      	negs	r0, r0
 8004dc8:	f7fb fa3e 	bl	8000248 <__aeabi_uidivmod>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2201      	movs	r2, #1
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	4694      	mov	ip, r2
 8004dd4:	002a      	movs	r2, r5
 8004dd6:	3a30      	subs	r2, #48	@ 0x30
 8004dd8:	2a09      	cmp	r2, #9
 8004dda:	d81f      	bhi.n	8004e1c <_strtoul_l.constprop.0+0xb4>
 8004ddc:	0015      	movs	r5, r2
 8004dde:	42ae      	cmp	r6, r5
 8004de0:	dd2b      	ble.n	8004e3a <_strtoul_l.constprop.0+0xd2>
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	d00a      	beq.n	8004dfc <_strtoul_l.constprop.0+0x94>
 8004de6:	2301      	movs	r3, #1
 8004de8:	9a01      	ldr	r2, [sp, #4]
 8004dea:	425b      	negs	r3, r3
 8004dec:	4282      	cmp	r2, r0
 8004dee:	d305      	bcc.n	8004dfc <_strtoul_l.constprop.0+0x94>
 8004df0:	d101      	bne.n	8004df6 <_strtoul_l.constprop.0+0x8e>
 8004df2:	42a9      	cmp	r1, r5
 8004df4:	db1e      	blt.n	8004e34 <_strtoul_l.constprop.0+0xcc>
 8004df6:	4663      	mov	r3, ip
 8004df8:	4370      	muls	r0, r6
 8004dfa:	1828      	adds	r0, r5, r0
 8004dfc:	7825      	ldrb	r5, [r4, #0]
 8004dfe:	3401      	adds	r4, #1
 8004e00:	e7e8      	b.n	8004dd4 <_strtoul_l.constprop.0+0x6c>
 8004e02:	9102      	str	r1, [sp, #8]
 8004e04:	2d2b      	cmp	r5, #43	@ 0x2b
 8004e06:	d1c8      	bne.n	8004d9a <_strtoul_l.constprop.0+0x32>
 8004e08:	7825      	ldrb	r5, [r4, #0]
 8004e0a:	1c9c      	adds	r4, r3, #2
 8004e0c:	e7c5      	b.n	8004d9a <_strtoul_l.constprop.0+0x32>
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d1d1      	bne.n	8004db6 <_strtoul_l.constprop.0+0x4e>
 8004e12:	3608      	adds	r6, #8
 8004e14:	2d30      	cmp	r5, #48	@ 0x30
 8004e16:	d0ce      	beq.n	8004db6 <_strtoul_l.constprop.0+0x4e>
 8004e18:	3602      	adds	r6, #2
 8004e1a:	e7cc      	b.n	8004db6 <_strtoul_l.constprop.0+0x4e>
 8004e1c:	002a      	movs	r2, r5
 8004e1e:	3a41      	subs	r2, #65	@ 0x41
 8004e20:	2a19      	cmp	r2, #25
 8004e22:	d801      	bhi.n	8004e28 <_strtoul_l.constprop.0+0xc0>
 8004e24:	3d37      	subs	r5, #55	@ 0x37
 8004e26:	e7da      	b.n	8004dde <_strtoul_l.constprop.0+0x76>
 8004e28:	002a      	movs	r2, r5
 8004e2a:	3a61      	subs	r2, #97	@ 0x61
 8004e2c:	2a19      	cmp	r2, #25
 8004e2e:	d804      	bhi.n	8004e3a <_strtoul_l.constprop.0+0xd2>
 8004e30:	3d57      	subs	r5, #87	@ 0x57
 8004e32:	e7d4      	b.n	8004dde <_strtoul_l.constprop.0+0x76>
 8004e34:	2301      	movs	r3, #1
 8004e36:	425b      	negs	r3, r3
 8004e38:	e7e0      	b.n	8004dfc <_strtoul_l.constprop.0+0x94>
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	d107      	bne.n	8004e4e <_strtoul_l.constprop.0+0xe6>
 8004e3e:	2222      	movs	r2, #34	@ 0x22
 8004e40:	9903      	ldr	r1, [sp, #12]
 8004e42:	0018      	movs	r0, r3
 8004e44:	600a      	str	r2, [r1, #0]
 8004e46:	2f00      	cmp	r7, #0
 8004e48:	d109      	bne.n	8004e5e <_strtoul_l.constprop.0+0xf6>
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	9a02      	ldr	r2, [sp, #8]
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d000      	beq.n	8004e56 <_strtoul_l.constprop.0+0xee>
 8004e54:	4240      	negs	r0, r0
 8004e56:	2f00      	cmp	r7, #0
 8004e58:	d0f7      	beq.n	8004e4a <_strtoul_l.constprop.0+0xe2>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <_strtoul_l.constprop.0+0xfa>
 8004e5e:	1e63      	subs	r3, r4, #1
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	9b00      	ldr	r3, [sp, #0]
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	e7f0      	b.n	8004e4a <_strtoul_l.constprop.0+0xe2>
 8004e68:	08006179 	.word	0x08006179

08004e6c <strtoul>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4c04      	ldr	r4, [pc, #16]	@ (8004e80 <strtoul+0x14>)
 8004e70:	0013      	movs	r3, r2
 8004e72:	000a      	movs	r2, r1
 8004e74:	0001      	movs	r1, r0
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	f7ff ff76 	bl	8004d68 <_strtoul_l.constprop.0>
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	20000224 	.word	0x20000224

08004e84 <std>:
 8004e84:	2300      	movs	r3, #0
 8004e86:	b510      	push	{r4, lr}
 8004e88:	0004      	movs	r4, r0
 8004e8a:	6003      	str	r3, [r0, #0]
 8004e8c:	6043      	str	r3, [r0, #4]
 8004e8e:	6083      	str	r3, [r0, #8]
 8004e90:	8181      	strh	r1, [r0, #12]
 8004e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e94:	81c2      	strh	r2, [r0, #14]
 8004e96:	6103      	str	r3, [r0, #16]
 8004e98:	6143      	str	r3, [r0, #20]
 8004e9a:	6183      	str	r3, [r0, #24]
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	305c      	adds	r0, #92	@ 0x5c
 8004ea2:	f000 fac5 	bl	8005430 <memset>
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <std+0x50>)
 8004ea8:	6224      	str	r4, [r4, #32]
 8004eaa:	6263      	str	r3, [r4, #36]	@ 0x24
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <std+0x54>)
 8004eae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <std+0x58>)
 8004eb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <std+0x5c>)
 8004eb6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <std+0x60>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	d005      	beq.n	8004eca <std+0x46>
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <std+0x64>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	d002      	beq.n	8004eca <std+0x46>
 8004ec4:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <std+0x68>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	d103      	bne.n	8004ed2 <std+0x4e>
 8004eca:	0020      	movs	r0, r4
 8004ecc:	3058      	adds	r0, #88	@ 0x58
 8004ece:	f000 fb3f 	bl	8005550 <__retarget_lock_init_recursive>
 8004ed2:	bd10      	pop	{r4, pc}
 8004ed4:	08005259 	.word	0x08005259
 8004ed8:	08005281 	.word	0x08005281
 8004edc:	080052b9 	.word	0x080052b9
 8004ee0:	080052e5 	.word	0x080052e5
 8004ee4:	20001194 	.word	0x20001194
 8004ee8:	200011fc 	.word	0x200011fc
 8004eec:	20001264 	.word	0x20001264

08004ef0 <stdio_exit_handler>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4a03      	ldr	r2, [pc, #12]	@ (8004f00 <stdio_exit_handler+0x10>)
 8004ef4:	4903      	ldr	r1, [pc, #12]	@ (8004f04 <stdio_exit_handler+0x14>)
 8004ef6:	4804      	ldr	r0, [pc, #16]	@ (8004f08 <stdio_exit_handler+0x18>)
 8004ef8:	f000 f86c 	bl	8004fd4 <_fwalk_sglue>
 8004efc:	bd10      	pop	{r4, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	20000218 	.word	0x20000218
 8004f04:	08005e05 	.word	0x08005e05
 8004f08:	20000228 	.word	0x20000228

08004f0c <cleanup_stdio>:
 8004f0c:	6841      	ldr	r1, [r0, #4]
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <cleanup_stdio+0x30>)
 8004f10:	b510      	push	{r4, lr}
 8004f12:	0004      	movs	r4, r0
 8004f14:	4299      	cmp	r1, r3
 8004f16:	d001      	beq.n	8004f1c <cleanup_stdio+0x10>
 8004f18:	f000 ff74 	bl	8005e04 <_fflush_r>
 8004f1c:	68a1      	ldr	r1, [r4, #8]
 8004f1e:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <cleanup_stdio+0x34>)
 8004f20:	4299      	cmp	r1, r3
 8004f22:	d002      	beq.n	8004f2a <cleanup_stdio+0x1e>
 8004f24:	0020      	movs	r0, r4
 8004f26:	f000 ff6d 	bl	8005e04 <_fflush_r>
 8004f2a:	68e1      	ldr	r1, [r4, #12]
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <cleanup_stdio+0x38>)
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	d002      	beq.n	8004f38 <cleanup_stdio+0x2c>
 8004f32:	0020      	movs	r0, r4
 8004f34:	f000 ff66 	bl	8005e04 <_fflush_r>
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	20001194 	.word	0x20001194
 8004f40:	200011fc 	.word	0x200011fc
 8004f44:	20001264 	.word	0x20001264

08004f48 <global_stdio_init.part.0>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <global_stdio_init.part.0+0x28>)
 8004f4c:	4a09      	ldr	r2, [pc, #36]	@ (8004f74 <global_stdio_init.part.0+0x2c>)
 8004f4e:	2104      	movs	r1, #4
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4809      	ldr	r0, [pc, #36]	@ (8004f78 <global_stdio_init.part.0+0x30>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	f7ff ff95 	bl	8004e84 <std>
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	2109      	movs	r1, #9
 8004f5e:	4807      	ldr	r0, [pc, #28]	@ (8004f7c <global_stdio_init.part.0+0x34>)
 8004f60:	f7ff ff90 	bl	8004e84 <std>
 8004f64:	2202      	movs	r2, #2
 8004f66:	2112      	movs	r1, #18
 8004f68:	4805      	ldr	r0, [pc, #20]	@ (8004f80 <global_stdio_init.part.0+0x38>)
 8004f6a:	f7ff ff8b 	bl	8004e84 <std>
 8004f6e:	bd10      	pop	{r4, pc}
 8004f70:	200012cc 	.word	0x200012cc
 8004f74:	08004ef1 	.word	0x08004ef1
 8004f78:	20001194 	.word	0x20001194
 8004f7c:	200011fc 	.word	0x200011fc
 8004f80:	20001264 	.word	0x20001264

08004f84 <__sfp_lock_acquire>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	4802      	ldr	r0, [pc, #8]	@ (8004f90 <__sfp_lock_acquire+0xc>)
 8004f88:	f000 fae3 	bl	8005552 <__retarget_lock_acquire_recursive>
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	200012d5 	.word	0x200012d5

08004f94 <__sfp_lock_release>:
 8004f94:	b510      	push	{r4, lr}
 8004f96:	4802      	ldr	r0, [pc, #8]	@ (8004fa0 <__sfp_lock_release+0xc>)
 8004f98:	f000 fadc 	bl	8005554 <__retarget_lock_release_recursive>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	200012d5 	.word	0x200012d5

08004fa4 <__sinit>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	0004      	movs	r4, r0
 8004fa8:	f7ff ffec 	bl	8004f84 <__sfp_lock_acquire>
 8004fac:	6a23      	ldr	r3, [r4, #32]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <__sinit+0x14>
 8004fb2:	f7ff ffef 	bl	8004f94 <__sfp_lock_release>
 8004fb6:	bd10      	pop	{r4, pc}
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <__sinit+0x28>)
 8004fba:	6223      	str	r3, [r4, #32]
 8004fbc:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <__sinit+0x2c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f6      	bne.n	8004fb2 <__sinit+0xe>
 8004fc4:	f7ff ffc0 	bl	8004f48 <global_stdio_init.part.0>
 8004fc8:	e7f3      	b.n	8004fb2 <__sinit+0xe>
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	08004f0d 	.word	0x08004f0d
 8004fd0:	200012cc 	.word	0x200012cc

08004fd4 <_fwalk_sglue>:
 8004fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd6:	0014      	movs	r4, r2
 8004fd8:	2600      	movs	r6, #0
 8004fda:	9000      	str	r0, [sp, #0]
 8004fdc:	9101      	str	r1, [sp, #4]
 8004fde:	68a5      	ldr	r5, [r4, #8]
 8004fe0:	6867      	ldr	r7, [r4, #4]
 8004fe2:	3f01      	subs	r7, #1
 8004fe4:	d504      	bpl.n	8004ff0 <_fwalk_sglue+0x1c>
 8004fe6:	6824      	ldr	r4, [r4, #0]
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	d1f8      	bne.n	8004fde <_fwalk_sglue+0xa>
 8004fec:	0030      	movs	r0, r6
 8004fee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ff0:	89ab      	ldrh	r3, [r5, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d908      	bls.n	8005008 <_fwalk_sglue+0x34>
 8004ff6:	220e      	movs	r2, #14
 8004ff8:	5eab      	ldrsh	r3, [r5, r2]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	d004      	beq.n	8005008 <_fwalk_sglue+0x34>
 8004ffe:	0029      	movs	r1, r5
 8005000:	9800      	ldr	r0, [sp, #0]
 8005002:	9b01      	ldr	r3, [sp, #4]
 8005004:	4798      	blx	r3
 8005006:	4306      	orrs	r6, r0
 8005008:	3568      	adds	r5, #104	@ 0x68
 800500a:	e7ea      	b.n	8004fe2 <_fwalk_sglue+0xe>

0800500c <iprintf>:
 800500c:	b40f      	push	{r0, r1, r2, r3}
 800500e:	b507      	push	{r0, r1, r2, lr}
 8005010:	4905      	ldr	r1, [pc, #20]	@ (8005028 <iprintf+0x1c>)
 8005012:	ab04      	add	r3, sp, #16
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	cb04      	ldmia	r3!, {r2}
 8005018:	6881      	ldr	r1, [r0, #8]
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	f000 fbd2 	bl	80057c4 <_vfiprintf_r>
 8005020:	b003      	add	sp, #12
 8005022:	bc08      	pop	{r3}
 8005024:	b004      	add	sp, #16
 8005026:	4718      	bx	r3
 8005028:	20000224 	.word	0x20000224

0800502c <_puts_r>:
 800502c:	6a03      	ldr	r3, [r0, #32]
 800502e:	b570      	push	{r4, r5, r6, lr}
 8005030:	0005      	movs	r5, r0
 8005032:	000e      	movs	r6, r1
 8005034:	6884      	ldr	r4, [r0, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <_puts_r+0x12>
 800503a:	f7ff ffb3 	bl	8004fa4 <__sinit>
 800503e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005040:	07db      	lsls	r3, r3, #31
 8005042:	d405      	bmi.n	8005050 <_puts_r+0x24>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	059b      	lsls	r3, r3, #22
 8005048:	d402      	bmi.n	8005050 <_puts_r+0x24>
 800504a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800504c:	f000 fa81 	bl	8005552 <__retarget_lock_acquire_recursive>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	071b      	lsls	r3, r3, #28
 8005054:	d502      	bpl.n	800505c <_puts_r+0x30>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11f      	bne.n	800509c <_puts_r+0x70>
 800505c:	0021      	movs	r1, r4
 800505e:	0028      	movs	r0, r5
 8005060:	f000 f988 	bl	8005374 <__swsetup_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	d019      	beq.n	800509c <_puts_r+0x70>
 8005068:	2501      	movs	r5, #1
 800506a:	426d      	negs	r5, r5
 800506c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d405      	bmi.n	800507e <_puts_r+0x52>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	059b      	lsls	r3, r3, #22
 8005076:	d402      	bmi.n	800507e <_puts_r+0x52>
 8005078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800507a:	f000 fa6b 	bl	8005554 <__retarget_lock_release_recursive>
 800507e:	0028      	movs	r0, r5
 8005080:	bd70      	pop	{r4, r5, r6, pc}
 8005082:	3601      	adds	r6, #1
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da04      	bge.n	8005094 <_puts_r+0x68>
 800508a:	69a2      	ldr	r2, [r4, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	dc16      	bgt.n	80050be <_puts_r+0x92>
 8005090:	290a      	cmp	r1, #10
 8005092:	d014      	beq.n	80050be <_puts_r+0x92>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	7019      	strb	r1, [r3, #0]
 800509c:	68a3      	ldr	r3, [r4, #8]
 800509e:	7831      	ldrb	r1, [r6, #0]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	2900      	cmp	r1, #0
 80050a4:	d1ed      	bne.n	8005082 <_puts_r+0x56>
 80050a6:	60a3      	str	r3, [r4, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	da0f      	bge.n	80050cc <_puts_r+0xa0>
 80050ac:	0022      	movs	r2, r4
 80050ae:	0028      	movs	r0, r5
 80050b0:	310a      	adds	r1, #10
 80050b2:	f000 f91d 	bl	80052f0 <__swbuf_r>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d0d6      	beq.n	8005068 <_puts_r+0x3c>
 80050ba:	250a      	movs	r5, #10
 80050bc:	e7d6      	b.n	800506c <_puts_r+0x40>
 80050be:	0022      	movs	r2, r4
 80050c0:	0028      	movs	r0, r5
 80050c2:	f000 f915 	bl	80052f0 <__swbuf_r>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d1e8      	bne.n	800509c <_puts_r+0x70>
 80050ca:	e7cd      	b.n	8005068 <_puts_r+0x3c>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	220a      	movs	r2, #10
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e7f0      	b.n	80050ba <_puts_r+0x8e>

080050d8 <puts>:
 80050d8:	b510      	push	{r4, lr}
 80050da:	4b03      	ldr	r3, [pc, #12]	@ (80050e8 <puts+0x10>)
 80050dc:	0001      	movs	r1, r0
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	f7ff ffa4 	bl	800502c <_puts_r>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	20000224 	.word	0x20000224

080050ec <setvbuf>:
 80050ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ee:	001d      	movs	r5, r3
 80050f0:	4b57      	ldr	r3, [pc, #348]	@ (8005250 <setvbuf+0x164>)
 80050f2:	b085      	sub	sp, #20
 80050f4:	681e      	ldr	r6, [r3, #0]
 80050f6:	0004      	movs	r4, r0
 80050f8:	000f      	movs	r7, r1
 80050fa:	9200      	str	r2, [sp, #0]
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d005      	beq.n	800510c <setvbuf+0x20>
 8005100:	6a33      	ldr	r3, [r6, #32]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <setvbuf+0x20>
 8005106:	0030      	movs	r0, r6
 8005108:	f7ff ff4c 	bl	8004fa4 <__sinit>
 800510c:	9b00      	ldr	r3, [sp, #0]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d005      	beq.n	800511e <setvbuf+0x32>
 8005112:	2b01      	cmp	r3, #1
 8005114:	d900      	bls.n	8005118 <setvbuf+0x2c>
 8005116:	e097      	b.n	8005248 <setvbuf+0x15c>
 8005118:	2d00      	cmp	r5, #0
 800511a:	da00      	bge.n	800511e <setvbuf+0x32>
 800511c:	e094      	b.n	8005248 <setvbuf+0x15c>
 800511e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005120:	07db      	lsls	r3, r3, #31
 8005122:	d405      	bmi.n	8005130 <setvbuf+0x44>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	059b      	lsls	r3, r3, #22
 8005128:	d402      	bmi.n	8005130 <setvbuf+0x44>
 800512a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512c:	f000 fa11 	bl	8005552 <__retarget_lock_acquire_recursive>
 8005130:	0021      	movs	r1, r4
 8005132:	0030      	movs	r0, r6
 8005134:	f000 fe66 	bl	8005e04 <_fflush_r>
 8005138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800513a:	2900      	cmp	r1, #0
 800513c:	d008      	beq.n	8005150 <setvbuf+0x64>
 800513e:	0023      	movs	r3, r4
 8005140:	3344      	adds	r3, #68	@ 0x44
 8005142:	4299      	cmp	r1, r3
 8005144:	d002      	beq.n	800514c <setvbuf+0x60>
 8005146:	0030      	movs	r0, r6
 8005148:	f000 fa0e 	bl	8005568 <_free_r>
 800514c:	2300      	movs	r3, #0
 800514e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005150:	2300      	movs	r3, #0
 8005152:	61a3      	str	r3, [r4, #24]
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	061b      	lsls	r3, r3, #24
 800515a:	d503      	bpl.n	8005164 <setvbuf+0x78>
 800515c:	0030      	movs	r0, r6
 800515e:	6921      	ldr	r1, [r4, #16]
 8005160:	f000 fa02 	bl	8005568 <_free_r>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	4a3b      	ldr	r2, [pc, #236]	@ (8005254 <setvbuf+0x168>)
 8005168:	4013      	ands	r3, r2
 800516a:	81a3      	strh	r3, [r4, #12]
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d060      	beq.n	8005234 <setvbuf+0x148>
 8005172:	ab03      	add	r3, sp, #12
 8005174:	0021      	movs	r1, r4
 8005176:	0030      	movs	r0, r6
 8005178:	aa02      	add	r2, sp, #8
 800517a:	f000 fe6f 	bl	8005e5c <__swhatbuf_r>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	4303      	orrs	r3, r0
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	2d00      	cmp	r5, #0
 8005186:	d124      	bne.n	80051d2 <setvbuf+0xe6>
 8005188:	9d02      	ldr	r5, [sp, #8]
 800518a:	0028      	movs	r0, r5
 800518c:	f000 fa36 	bl	80055fc <malloc>
 8005190:	9501      	str	r5, [sp, #4]
 8005192:	1e07      	subs	r7, r0, #0
 8005194:	d148      	bne.n	8005228 <setvbuf+0x13c>
 8005196:	9b02      	ldr	r3, [sp, #8]
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	42ab      	cmp	r3, r5
 800519c:	d13f      	bne.n	800521e <setvbuf+0x132>
 800519e:	2501      	movs	r5, #1
 80051a0:	426d      	negs	r5, r5
 80051a2:	220c      	movs	r2, #12
 80051a4:	5ea3      	ldrsh	r3, [r4, r2]
 80051a6:	2202      	movs	r2, #2
 80051a8:	431a      	orrs	r2, r3
 80051aa:	81a2      	strh	r2, [r4, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	60a2      	str	r2, [r4, #8]
 80051b0:	0022      	movs	r2, r4
 80051b2:	3247      	adds	r2, #71	@ 0x47
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	6122      	str	r2, [r4, #16]
 80051b8:	2201      	movs	r2, #1
 80051ba:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80051bc:	6162      	str	r2, [r4, #20]
 80051be:	4211      	tst	r1, r2
 80051c0:	d104      	bne.n	80051cc <setvbuf+0xe0>
 80051c2:	059b      	lsls	r3, r3, #22
 80051c4:	d402      	bmi.n	80051cc <setvbuf+0xe0>
 80051c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051c8:	f000 f9c4 	bl	8005554 <__retarget_lock_release_recursive>
 80051cc:	0028      	movs	r0, r5
 80051ce:	b005      	add	sp, #20
 80051d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d2:	2f00      	cmp	r7, #0
 80051d4:	d0d9      	beq.n	800518a <setvbuf+0x9e>
 80051d6:	6a33      	ldr	r3, [r6, #32]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <setvbuf+0xf6>
 80051dc:	0030      	movs	r0, r6
 80051de:	f7ff fee1 	bl	8004fa4 <__sinit>
 80051e2:	9b00      	ldr	r3, [sp, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d103      	bne.n	80051f0 <setvbuf+0x104>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	9a00      	ldr	r2, [sp, #0]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	81a2      	strh	r2, [r4, #12]
 80051f0:	220c      	movs	r2, #12
 80051f2:	5ea3      	ldrsh	r3, [r4, r2]
 80051f4:	2208      	movs	r2, #8
 80051f6:	0019      	movs	r1, r3
 80051f8:	6027      	str	r7, [r4, #0]
 80051fa:	6127      	str	r7, [r4, #16]
 80051fc:	6165      	str	r5, [r4, #20]
 80051fe:	4011      	ands	r1, r2
 8005200:	4213      	tst	r3, r2
 8005202:	d01b      	beq.n	800523c <setvbuf+0x150>
 8005204:	07da      	lsls	r2, r3, #31
 8005206:	d517      	bpl.n	8005238 <setvbuf+0x14c>
 8005208:	2200      	movs	r2, #0
 800520a:	426d      	negs	r5, r5
 800520c:	60a2      	str	r2, [r4, #8]
 800520e:	61a5      	str	r5, [r4, #24]
 8005210:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005212:	07d2      	lsls	r2, r2, #31
 8005214:	d401      	bmi.n	800521a <setvbuf+0x12e>
 8005216:	059b      	lsls	r3, r3, #22
 8005218:	d512      	bpl.n	8005240 <setvbuf+0x154>
 800521a:	2500      	movs	r5, #0
 800521c:	e7d6      	b.n	80051cc <setvbuf+0xe0>
 800521e:	9801      	ldr	r0, [sp, #4]
 8005220:	f000 f9ec 	bl	80055fc <malloc>
 8005224:	1e07      	subs	r7, r0, #0
 8005226:	d0ba      	beq.n	800519e <setvbuf+0xb2>
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	89a2      	ldrh	r2, [r4, #12]
 800522c:	9d01      	ldr	r5, [sp, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	e7d0      	b.n	80051d6 <setvbuf+0xea>
 8005234:	2500      	movs	r5, #0
 8005236:	e7b4      	b.n	80051a2 <setvbuf+0xb6>
 8005238:	60a5      	str	r5, [r4, #8]
 800523a:	e7e9      	b.n	8005210 <setvbuf+0x124>
 800523c:	60a1      	str	r1, [r4, #8]
 800523e:	e7e7      	b.n	8005210 <setvbuf+0x124>
 8005240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005242:	f000 f987 	bl	8005554 <__retarget_lock_release_recursive>
 8005246:	e7e8      	b.n	800521a <setvbuf+0x12e>
 8005248:	2501      	movs	r5, #1
 800524a:	426d      	negs	r5, r5
 800524c:	e7be      	b.n	80051cc <setvbuf+0xe0>
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	20000224 	.word	0x20000224
 8005254:	fffff35c 	.word	0xfffff35c

08005258 <__sread>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	000c      	movs	r4, r1
 800525c:	250e      	movs	r5, #14
 800525e:	5f49      	ldrsh	r1, [r1, r5]
 8005260:	f000 f938 	bl	80054d4 <_read_r>
 8005264:	2800      	cmp	r0, #0
 8005266:	db03      	blt.n	8005270 <__sread+0x18>
 8005268:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800526a:	181b      	adds	r3, r3, r0
 800526c:	6563      	str	r3, [r4, #84]	@ 0x54
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	4a02      	ldr	r2, [pc, #8]	@ (800527c <__sread+0x24>)
 8005274:	4013      	ands	r3, r2
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	e7f9      	b.n	800526e <__sread+0x16>
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	ffffefff 	.word	0xffffefff

08005280 <__swrite>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	001f      	movs	r7, r3
 8005284:	898b      	ldrh	r3, [r1, #12]
 8005286:	0005      	movs	r5, r0
 8005288:	000c      	movs	r4, r1
 800528a:	0016      	movs	r6, r2
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	d505      	bpl.n	800529c <__swrite+0x1c>
 8005290:	230e      	movs	r3, #14
 8005292:	5ec9      	ldrsh	r1, [r1, r3]
 8005294:	2200      	movs	r2, #0
 8005296:	2302      	movs	r3, #2
 8005298:	f000 f908 	bl	80054ac <_lseek_r>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	4a05      	ldr	r2, [pc, #20]	@ (80052b4 <__swrite+0x34>)
 80052a0:	0028      	movs	r0, r5
 80052a2:	4013      	ands	r3, r2
 80052a4:	81a3      	strh	r3, [r4, #12]
 80052a6:	0032      	movs	r2, r6
 80052a8:	230e      	movs	r3, #14
 80052aa:	5ee1      	ldrsh	r1, [r4, r3]
 80052ac:	003b      	movs	r3, r7
 80052ae:	f7fb fbb8 	bl	8000a22 <_write_r>
 80052b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b4:	ffffefff 	.word	0xffffefff

080052b8 <__sseek>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	000c      	movs	r4, r1
 80052bc:	250e      	movs	r5, #14
 80052be:	5f49      	ldrsh	r1, [r1, r5]
 80052c0:	f000 f8f4 	bl	80054ac <_lseek_r>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	1c42      	adds	r2, r0, #1
 80052c8:	d103      	bne.n	80052d2 <__sseek+0x1a>
 80052ca:	4a05      	ldr	r2, [pc, #20]	@ (80052e0 <__sseek+0x28>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	2280      	movs	r2, #128	@ 0x80
 80052d4:	0152      	lsls	r2, r2, #5
 80052d6:	4313      	orrs	r3, r2
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	6560      	str	r0, [r4, #84]	@ 0x54
 80052dc:	e7f8      	b.n	80052d0 <__sseek+0x18>
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	ffffefff 	.word	0xffffefff

080052e4 <__sclose>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	230e      	movs	r3, #14
 80052e8:	5ec9      	ldrsh	r1, [r1, r3]
 80052ea:	f000 f8cd 	bl	8005488 <_close_r>
 80052ee:	bd10      	pop	{r4, pc}

080052f0 <__swbuf_r>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	0006      	movs	r6, r0
 80052f4:	000d      	movs	r5, r1
 80052f6:	0014      	movs	r4, r2
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d004      	beq.n	8005306 <__swbuf_r+0x16>
 80052fc:	6a03      	ldr	r3, [r0, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <__swbuf_r+0x16>
 8005302:	f7ff fe4f 	bl	8004fa4 <__sinit>
 8005306:	69a3      	ldr	r3, [r4, #24]
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	071b      	lsls	r3, r3, #28
 800530e:	d502      	bpl.n	8005316 <__swbuf_r+0x26>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <__swbuf_r+0x3a>
 8005316:	0021      	movs	r1, r4
 8005318:	0030      	movs	r0, r6
 800531a:	f000 f82b 	bl	8005374 <__swsetup_r>
 800531e:	2800      	cmp	r0, #0
 8005320:	d003      	beq.n	800532a <__swbuf_r+0x3a>
 8005322:	2501      	movs	r5, #1
 8005324:	426d      	negs	r5, r5
 8005326:	0028      	movs	r0, r5
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	b2ef      	uxtb	r7, r5
 8005330:	1ac0      	subs	r0, r0, r3
 8005332:	6963      	ldr	r3, [r4, #20]
 8005334:	b2ed      	uxtb	r5, r5
 8005336:	4283      	cmp	r3, r0
 8005338:	dc05      	bgt.n	8005346 <__swbuf_r+0x56>
 800533a:	0021      	movs	r1, r4
 800533c:	0030      	movs	r0, r6
 800533e:	f000 fd61 	bl	8005e04 <_fflush_r>
 8005342:	2800      	cmp	r0, #0
 8005344:	d1ed      	bne.n	8005322 <__swbuf_r+0x32>
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	3001      	adds	r0, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	60a3      	str	r3, [r4, #8]
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	6022      	str	r2, [r4, #0]
 8005354:	701f      	strb	r7, [r3, #0]
 8005356:	6963      	ldr	r3, [r4, #20]
 8005358:	4283      	cmp	r3, r0
 800535a:	d004      	beq.n	8005366 <__swbuf_r+0x76>
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	07db      	lsls	r3, r3, #31
 8005360:	d5e1      	bpl.n	8005326 <__swbuf_r+0x36>
 8005362:	2d0a      	cmp	r5, #10
 8005364:	d1df      	bne.n	8005326 <__swbuf_r+0x36>
 8005366:	0021      	movs	r1, r4
 8005368:	0030      	movs	r0, r6
 800536a:	f000 fd4b 	bl	8005e04 <_fflush_r>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0d9      	beq.n	8005326 <__swbuf_r+0x36>
 8005372:	e7d6      	b.n	8005322 <__swbuf_r+0x32>

08005374 <__swsetup_r>:
 8005374:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <__swsetup_r+0xb8>)
 8005376:	b570      	push	{r4, r5, r6, lr}
 8005378:	0005      	movs	r5, r0
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	000c      	movs	r4, r1
 800537e:	2800      	cmp	r0, #0
 8005380:	d004      	beq.n	800538c <__swsetup_r+0x18>
 8005382:	6a03      	ldr	r3, [r0, #32]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <__swsetup_r+0x18>
 8005388:	f7ff fe0c 	bl	8004fa4 <__sinit>
 800538c:	230c      	movs	r3, #12
 800538e:	5ee2      	ldrsh	r2, [r4, r3]
 8005390:	0713      	lsls	r3, r2, #28
 8005392:	d423      	bmi.n	80053dc <__swsetup_r+0x68>
 8005394:	06d3      	lsls	r3, r2, #27
 8005396:	d407      	bmi.n	80053a8 <__swsetup_r+0x34>
 8005398:	2309      	movs	r3, #9
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	2340      	movs	r3, #64	@ 0x40
 800539e:	2001      	movs	r0, #1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	4240      	negs	r0, r0
 80053a6:	e03a      	b.n	800541e <__swsetup_r+0xaa>
 80053a8:	0752      	lsls	r2, r2, #29
 80053aa:	d513      	bpl.n	80053d4 <__swsetup_r+0x60>
 80053ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d008      	beq.n	80053c4 <__swsetup_r+0x50>
 80053b2:	0023      	movs	r3, r4
 80053b4:	3344      	adds	r3, #68	@ 0x44
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d002      	beq.n	80053c0 <__swsetup_r+0x4c>
 80053ba:	0028      	movs	r0, r5
 80053bc:	f000 f8d4 	bl	8005568 <_free_r>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80053c4:	2224      	movs	r2, #36	@ 0x24
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	4393      	bics	r3, r2
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6923      	ldr	r3, [r4, #16]
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	2308      	movs	r3, #8
 80053d6:	89a2      	ldrh	r2, [r4, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <__swsetup_r+0x86>
 80053e2:	21a0      	movs	r1, #160	@ 0xa0
 80053e4:	2280      	movs	r2, #128	@ 0x80
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	0089      	lsls	r1, r1, #2
 80053ea:	0092      	lsls	r2, r2, #2
 80053ec:	400b      	ands	r3, r1
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <__swsetup_r+0x86>
 80053f2:	0021      	movs	r1, r4
 80053f4:	0028      	movs	r0, r5
 80053f6:	f000 fd5b 	bl	8005eb0 <__smakebuf_r>
 80053fa:	230c      	movs	r3, #12
 80053fc:	5ee2      	ldrsh	r2, [r4, r3]
 80053fe:	2101      	movs	r1, #1
 8005400:	0013      	movs	r3, r2
 8005402:	400b      	ands	r3, r1
 8005404:	420a      	tst	r2, r1
 8005406:	d00b      	beq.n	8005420 <__swsetup_r+0xac>
 8005408:	2300      	movs	r3, #0
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	6963      	ldr	r3, [r4, #20]
 800540e:	425b      	negs	r3, r3
 8005410:	61a3      	str	r3, [r4, #24]
 8005412:	2000      	movs	r0, #0
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	4283      	cmp	r3, r0
 8005418:	d101      	bne.n	800541e <__swsetup_r+0xaa>
 800541a:	0613      	lsls	r3, r2, #24
 800541c:	d4be      	bmi.n	800539c <__swsetup_r+0x28>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	0791      	lsls	r1, r2, #30
 8005422:	d400      	bmi.n	8005426 <__swsetup_r+0xb2>
 8005424:	6963      	ldr	r3, [r4, #20]
 8005426:	60a3      	str	r3, [r4, #8]
 8005428:	e7f3      	b.n	8005412 <__swsetup_r+0x9e>
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	20000224 	.word	0x20000224

08005430 <memset>:
 8005430:	0003      	movs	r3, r0
 8005432:	1882      	adds	r2, r0, r2
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	7019      	strb	r1, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <strchr>:
 8005440:	b2c9      	uxtb	r1, r1
 8005442:	7803      	ldrb	r3, [r0, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <strchr+0x12>
 8005448:	428b      	cmp	r3, r1
 800544a:	d100      	bne.n	800544e <strchr+0xe>
 800544c:	4770      	bx	lr
 800544e:	3001      	adds	r0, #1
 8005450:	e7f7      	b.n	8005442 <strchr+0x2>
 8005452:	424b      	negs	r3, r1
 8005454:	4159      	adcs	r1, r3
 8005456:	4249      	negs	r1, r1
 8005458:	4008      	ands	r0, r1
 800545a:	e7f7      	b.n	800544c <strchr+0xc>

0800545c <strstr>:
 800545c:	780a      	ldrb	r2, [r1, #0]
 800545e:	b530      	push	{r4, r5, lr}
 8005460:	2a00      	cmp	r2, #0
 8005462:	d10c      	bne.n	800547e <strstr+0x22>
 8005464:	bd30      	pop	{r4, r5, pc}
 8005466:	429a      	cmp	r2, r3
 8005468:	d108      	bne.n	800547c <strstr+0x20>
 800546a:	2301      	movs	r3, #1
 800546c:	5ccc      	ldrb	r4, [r1, r3]
 800546e:	2c00      	cmp	r4, #0
 8005470:	d0f8      	beq.n	8005464 <strstr+0x8>
 8005472:	5cc5      	ldrb	r5, [r0, r3]
 8005474:	42a5      	cmp	r5, r4
 8005476:	d101      	bne.n	800547c <strstr+0x20>
 8005478:	3301      	adds	r3, #1
 800547a:	e7f7      	b.n	800546c <strstr+0x10>
 800547c:	3001      	adds	r0, #1
 800547e:	7803      	ldrb	r3, [r0, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f0      	bne.n	8005466 <strstr+0xa>
 8005484:	0018      	movs	r0, r3
 8005486:	e7ed      	b.n	8005464 <strstr+0x8>

08005488 <_close_r>:
 8005488:	2300      	movs	r3, #0
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	4d06      	ldr	r5, [pc, #24]	@ (80054a8 <_close_r+0x20>)
 800548e:	0004      	movs	r4, r0
 8005490:	0008      	movs	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fcc5 	bl	8000e22 <_close>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d103      	bne.n	80054a4 <_close_r+0x1c>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d000      	beq.n	80054a4 <_close_r+0x1c>
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	200012d0 	.word	0x200012d0

080054ac <_lseek_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	0004      	movs	r4, r0
 80054b0:	0008      	movs	r0, r1
 80054b2:	0011      	movs	r1, r2
 80054b4:	001a      	movs	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	4d05      	ldr	r5, [pc, #20]	@ (80054d0 <_lseek_r+0x24>)
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fb fcd2 	bl	8000e64 <_lseek>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d103      	bne.n	80054cc <_lseek_r+0x20>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d000      	beq.n	80054cc <_lseek_r+0x20>
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	200012d0 	.word	0x200012d0

080054d4 <_read_r>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	0004      	movs	r4, r0
 80054d8:	0008      	movs	r0, r1
 80054da:	0011      	movs	r1, r2
 80054dc:	001a      	movs	r2, r3
 80054de:	2300      	movs	r3, #0
 80054e0:	4d05      	ldr	r5, [pc, #20]	@ (80054f8 <_read_r+0x24>)
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fb fc80 	bl	8000de8 <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d103      	bne.n	80054f4 <_read_r+0x20>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d000      	beq.n	80054f4 <_read_r+0x20>
 80054f2:	6023      	str	r3, [r4, #0]
 80054f4:	bd70      	pop	{r4, r5, r6, pc}
 80054f6:	46c0      	nop			@ (mov r8, r8)
 80054f8:	200012d0 	.word	0x200012d0

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	@ (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	20000224 	.word	0x20000224

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	2600      	movs	r6, #0
 800550c:	4c0c      	ldr	r4, [pc, #48]	@ (8005540 <__libc_init_array+0x38>)
 800550e:	4d0d      	ldr	r5, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	2600      	movs	r6, #0
 800551a:	f000 fd4d 	bl	8005fb8 <_init>
 800551e:	4c0a      	ldr	r4, [pc, #40]	@ (8005548 <__libc_init_array+0x40>)
 8005520:	4d0a      	ldr	r5, [pc, #40]	@ (800554c <__libc_init_array+0x44>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	00b3      	lsls	r3, r6, #2
 800552e:	58eb      	ldr	r3, [r5, r3]
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	00b3      	lsls	r3, r6, #2
 8005538:	58eb      	ldr	r3, [r5, r3]
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	080062b4 	.word	0x080062b4
 8005544:	080062b4 	.word	0x080062b4
 8005548:	080062b8 	.word	0x080062b8
 800554c:	080062b4 	.word	0x080062b4

08005550 <__retarget_lock_init_recursive>:
 8005550:	4770      	bx	lr

08005552 <__retarget_lock_acquire_recursive>:
 8005552:	4770      	bx	lr

08005554 <__retarget_lock_release_recursive>:
 8005554:	4770      	bx	lr

08005556 <memcpy>:
 8005556:	2300      	movs	r3, #0
 8005558:	b510      	push	{r4, lr}
 800555a:	429a      	cmp	r2, r3
 800555c:	d100      	bne.n	8005560 <memcpy+0xa>
 800555e:	bd10      	pop	{r4, pc}
 8005560:	5ccc      	ldrb	r4, [r1, r3]
 8005562:	54c4      	strb	r4, [r0, r3]
 8005564:	3301      	adds	r3, #1
 8005566:	e7f8      	b.n	800555a <memcpy+0x4>

08005568 <_free_r>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	0005      	movs	r5, r0
 800556c:	1e0c      	subs	r4, r1, #0
 800556e:	d010      	beq.n	8005592 <_free_r+0x2a>
 8005570:	3c04      	subs	r4, #4
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da00      	bge.n	800557a <_free_r+0x12>
 8005578:	18e4      	adds	r4, r4, r3
 800557a:	0028      	movs	r0, r5
 800557c:	f000 f8ea 	bl	8005754 <__malloc_lock>
 8005580:	4a1d      	ldr	r2, [pc, #116]	@ (80055f8 <_free_r+0x90>)
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <_free_r+0x2c>
 8005588:	6063      	str	r3, [r4, #4]
 800558a:	6014      	str	r4, [r2, #0]
 800558c:	0028      	movs	r0, r5
 800558e:	f000 f8e9 	bl	8005764 <__malloc_unlock>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	42a3      	cmp	r3, r4
 8005596:	d908      	bls.n	80055aa <_free_r+0x42>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428b      	cmp	r3, r1
 800559e:	d1f3      	bne.n	8005588 <_free_r+0x20>
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	1809      	adds	r1, r1, r0
 80055a6:	6021      	str	r1, [r4, #0]
 80055a8:	e7ee      	b.n	8005588 <_free_r+0x20>
 80055aa:	001a      	movs	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <_free_r+0x4e>
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	d9f9      	bls.n	80055aa <_free_r+0x42>
 80055b6:	6811      	ldr	r1, [r2, #0]
 80055b8:	1850      	adds	r0, r2, r1
 80055ba:	42a0      	cmp	r0, r4
 80055bc:	d10b      	bne.n	80055d6 <_free_r+0x6e>
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1809      	adds	r1, r1, r0
 80055c2:	1850      	adds	r0, r2, r1
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	4283      	cmp	r3, r0
 80055c8:	d1e0      	bne.n	800558c <_free_r+0x24>
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	1841      	adds	r1, r0, r1
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	6053      	str	r3, [r2, #4]
 80055d4:	e7da      	b.n	800558c <_free_r+0x24>
 80055d6:	42a0      	cmp	r0, r4
 80055d8:	d902      	bls.n	80055e0 <_free_r+0x78>
 80055da:	230c      	movs	r3, #12
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	e7d5      	b.n	800558c <_free_r+0x24>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	1821      	adds	r1, r4, r0
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d103      	bne.n	80055f0 <_free_r+0x88>
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	1809      	adds	r1, r1, r0
 80055ee:	6021      	str	r1, [r4, #0]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6054      	str	r4, [r2, #4]
 80055f4:	e7ca      	b.n	800558c <_free_r+0x24>
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	200012dc 	.word	0x200012dc

080055fc <malloc>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4b03      	ldr	r3, [pc, #12]	@ (800560c <malloc+0x10>)
 8005600:	0001      	movs	r1, r0
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	f000 f826 	bl	8005654 <_malloc_r>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	20000224 	.word	0x20000224

08005610 <sbrk_aligned>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	4e0f      	ldr	r6, [pc, #60]	@ (8005650 <sbrk_aligned+0x40>)
 8005614:	000d      	movs	r5, r1
 8005616:	6831      	ldr	r1, [r6, #0]
 8005618:	0004      	movs	r4, r0
 800561a:	2900      	cmp	r1, #0
 800561c:	d102      	bne.n	8005624 <sbrk_aligned+0x14>
 800561e:	f000 fcad 	bl	8005f7c <_sbrk_r>
 8005622:	6030      	str	r0, [r6, #0]
 8005624:	0029      	movs	r1, r5
 8005626:	0020      	movs	r0, r4
 8005628:	f000 fca8 	bl	8005f7c <_sbrk_r>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d103      	bne.n	8005638 <sbrk_aligned+0x28>
 8005630:	2501      	movs	r5, #1
 8005632:	426d      	negs	r5, r5
 8005634:	0028      	movs	r0, r5
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	2303      	movs	r3, #3
 800563a:	1cc5      	adds	r5, r0, #3
 800563c:	439d      	bics	r5, r3
 800563e:	42a8      	cmp	r0, r5
 8005640:	d0f8      	beq.n	8005634 <sbrk_aligned+0x24>
 8005642:	1a29      	subs	r1, r5, r0
 8005644:	0020      	movs	r0, r4
 8005646:	f000 fc99 	bl	8005f7c <_sbrk_r>
 800564a:	3001      	adds	r0, #1
 800564c:	d1f2      	bne.n	8005634 <sbrk_aligned+0x24>
 800564e:	e7ef      	b.n	8005630 <sbrk_aligned+0x20>
 8005650:	200012d8 	.word	0x200012d8

08005654 <_malloc_r>:
 8005654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005656:	2203      	movs	r2, #3
 8005658:	1ccb      	adds	r3, r1, #3
 800565a:	4393      	bics	r3, r2
 800565c:	3308      	adds	r3, #8
 800565e:	0005      	movs	r5, r0
 8005660:	001f      	movs	r7, r3
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d234      	bcs.n	80056d0 <_malloc_r+0x7c>
 8005666:	270c      	movs	r7, #12
 8005668:	42b9      	cmp	r1, r7
 800566a:	d833      	bhi.n	80056d4 <_malloc_r+0x80>
 800566c:	0028      	movs	r0, r5
 800566e:	f000 f871 	bl	8005754 <__malloc_lock>
 8005672:	4e37      	ldr	r6, [pc, #220]	@ (8005750 <_malloc_r+0xfc>)
 8005674:	6833      	ldr	r3, [r6, #0]
 8005676:	001c      	movs	r4, r3
 8005678:	2c00      	cmp	r4, #0
 800567a:	d12f      	bne.n	80056dc <_malloc_r+0x88>
 800567c:	0039      	movs	r1, r7
 800567e:	0028      	movs	r0, r5
 8005680:	f7ff ffc6 	bl	8005610 <sbrk_aligned>
 8005684:	0004      	movs	r4, r0
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d15f      	bne.n	800574a <_malloc_r+0xf6>
 800568a:	6834      	ldr	r4, [r6, #0]
 800568c:	9400      	str	r4, [sp, #0]
 800568e:	9b00      	ldr	r3, [sp, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d14a      	bne.n	800572a <_malloc_r+0xd6>
 8005694:	2c00      	cmp	r4, #0
 8005696:	d052      	beq.n	800573e <_malloc_r+0xea>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	0028      	movs	r0, r5
 800569c:	18e3      	adds	r3, r4, r3
 800569e:	9900      	ldr	r1, [sp, #0]
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	f000 fc6b 	bl	8005f7c <_sbrk_r>
 80056a6:	9b01      	ldr	r3, [sp, #4]
 80056a8:	4283      	cmp	r3, r0
 80056aa:	d148      	bne.n	800573e <_malloc_r+0xea>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	0028      	movs	r0, r5
 80056b0:	1aff      	subs	r7, r7, r3
 80056b2:	0039      	movs	r1, r7
 80056b4:	f7ff ffac 	bl	8005610 <sbrk_aligned>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d040      	beq.n	800573e <_malloc_r+0xea>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	19db      	adds	r3, r3, r7
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	6833      	ldr	r3, [r6, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d133      	bne.n	8005732 <_malloc_r+0xde>
 80056ca:	9b00      	ldr	r3, [sp, #0]
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	e019      	b.n	8005704 <_malloc_r+0xb0>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dac9      	bge.n	8005668 <_malloc_r+0x14>
 80056d4:	230c      	movs	r3, #12
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	2000      	movs	r0, #0
 80056da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	1bc9      	subs	r1, r1, r7
 80056e0:	d420      	bmi.n	8005724 <_malloc_r+0xd0>
 80056e2:	290b      	cmp	r1, #11
 80056e4:	d90a      	bls.n	80056fc <_malloc_r+0xa8>
 80056e6:	19e2      	adds	r2, r4, r7
 80056e8:	6027      	str	r7, [r4, #0]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	d104      	bne.n	80056f8 <_malloc_r+0xa4>
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	6011      	str	r1, [r2, #0]
 80056f4:	6053      	str	r3, [r2, #4]
 80056f6:	e005      	b.n	8005704 <_malloc_r+0xb0>
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	e7f9      	b.n	80056f0 <_malloc_r+0x9c>
 80056fc:	6862      	ldr	r2, [r4, #4]
 80056fe:	42a3      	cmp	r3, r4
 8005700:	d10e      	bne.n	8005720 <_malloc_r+0xcc>
 8005702:	6032      	str	r2, [r6, #0]
 8005704:	0028      	movs	r0, r5
 8005706:	f000 f82d 	bl	8005764 <__malloc_unlock>
 800570a:	0020      	movs	r0, r4
 800570c:	2207      	movs	r2, #7
 800570e:	300b      	adds	r0, #11
 8005710:	1d23      	adds	r3, r4, #4
 8005712:	4390      	bics	r0, r2
 8005714:	1ac2      	subs	r2, r0, r3
 8005716:	4298      	cmp	r0, r3
 8005718:	d0df      	beq.n	80056da <_malloc_r+0x86>
 800571a:	1a1b      	subs	r3, r3, r0
 800571c:	50a3      	str	r3, [r4, r2]
 800571e:	e7dc      	b.n	80056da <_malloc_r+0x86>
 8005720:	605a      	str	r2, [r3, #4]
 8005722:	e7ef      	b.n	8005704 <_malloc_r+0xb0>
 8005724:	0023      	movs	r3, r4
 8005726:	6864      	ldr	r4, [r4, #4]
 8005728:	e7a6      	b.n	8005678 <_malloc_r+0x24>
 800572a:	9c00      	ldr	r4, [sp, #0]
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	e7ad      	b.n	800568e <_malloc_r+0x3a>
 8005732:	001a      	movs	r2, r3
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	42a3      	cmp	r3, r4
 8005738:	d1fb      	bne.n	8005732 <_malloc_r+0xde>
 800573a:	2300      	movs	r3, #0
 800573c:	e7da      	b.n	80056f4 <_malloc_r+0xa0>
 800573e:	230c      	movs	r3, #12
 8005740:	0028      	movs	r0, r5
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f000 f80e 	bl	8005764 <__malloc_unlock>
 8005748:	e7c6      	b.n	80056d8 <_malloc_r+0x84>
 800574a:	6007      	str	r7, [r0, #0]
 800574c:	e7da      	b.n	8005704 <_malloc_r+0xb0>
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	200012dc 	.word	0x200012dc

08005754 <__malloc_lock>:
 8005754:	b510      	push	{r4, lr}
 8005756:	4802      	ldr	r0, [pc, #8]	@ (8005760 <__malloc_lock+0xc>)
 8005758:	f7ff fefb 	bl	8005552 <__retarget_lock_acquire_recursive>
 800575c:	bd10      	pop	{r4, pc}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	200012d4 	.word	0x200012d4

08005764 <__malloc_unlock>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4802      	ldr	r0, [pc, #8]	@ (8005770 <__malloc_unlock+0xc>)
 8005768:	f7ff fef4 	bl	8005554 <__retarget_lock_release_recursive>
 800576c:	bd10      	pop	{r4, pc}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	200012d4 	.word	0x200012d4

08005774 <__sfputc_r>:
 8005774:	6893      	ldr	r3, [r2, #8]
 8005776:	b510      	push	{r4, lr}
 8005778:	3b01      	subs	r3, #1
 800577a:	6093      	str	r3, [r2, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	da04      	bge.n	800578a <__sfputc_r+0x16>
 8005780:	6994      	ldr	r4, [r2, #24]
 8005782:	42a3      	cmp	r3, r4
 8005784:	db07      	blt.n	8005796 <__sfputc_r+0x22>
 8005786:	290a      	cmp	r1, #10
 8005788:	d005      	beq.n	8005796 <__sfputc_r+0x22>
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	1c58      	adds	r0, r3, #1
 800578e:	6010      	str	r0, [r2, #0]
 8005790:	7019      	strb	r1, [r3, #0]
 8005792:	0008      	movs	r0, r1
 8005794:	bd10      	pop	{r4, pc}
 8005796:	f7ff fdab 	bl	80052f0 <__swbuf_r>
 800579a:	0001      	movs	r1, r0
 800579c:	e7f9      	b.n	8005792 <__sfputc_r+0x1e>

0800579e <__sfputs_r>:
 800579e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a0:	0006      	movs	r6, r0
 80057a2:	000f      	movs	r7, r1
 80057a4:	0014      	movs	r4, r2
 80057a6:	18d5      	adds	r5, r2, r3
 80057a8:	42ac      	cmp	r4, r5
 80057aa:	d101      	bne.n	80057b0 <__sfputs_r+0x12>
 80057ac:	2000      	movs	r0, #0
 80057ae:	e007      	b.n	80057c0 <__sfputs_r+0x22>
 80057b0:	7821      	ldrb	r1, [r4, #0]
 80057b2:	003a      	movs	r2, r7
 80057b4:	0030      	movs	r0, r6
 80057b6:	f7ff ffdd 	bl	8005774 <__sfputc_r>
 80057ba:	3401      	adds	r4, #1
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d1f3      	bne.n	80057a8 <__sfputs_r+0xa>
 80057c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057c4 <_vfiprintf_r>:
 80057c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c6:	b0a1      	sub	sp, #132	@ 0x84
 80057c8:	000f      	movs	r7, r1
 80057ca:	0015      	movs	r5, r2
 80057cc:	001e      	movs	r6, r3
 80057ce:	9003      	str	r0, [sp, #12]
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d004      	beq.n	80057de <_vfiprintf_r+0x1a>
 80057d4:	6a03      	ldr	r3, [r0, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <_vfiprintf_r+0x1a>
 80057da:	f7ff fbe3 	bl	8004fa4 <__sinit>
 80057de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e0:	07db      	lsls	r3, r3, #31
 80057e2:	d405      	bmi.n	80057f0 <_vfiprintf_r+0x2c>
 80057e4:	89bb      	ldrh	r3, [r7, #12]
 80057e6:	059b      	lsls	r3, r3, #22
 80057e8:	d402      	bmi.n	80057f0 <_vfiprintf_r+0x2c>
 80057ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80057ec:	f7ff feb1 	bl	8005552 <__retarget_lock_acquire_recursive>
 80057f0:	89bb      	ldrh	r3, [r7, #12]
 80057f2:	071b      	lsls	r3, r3, #28
 80057f4:	d502      	bpl.n	80057fc <_vfiprintf_r+0x38>
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d113      	bne.n	8005824 <_vfiprintf_r+0x60>
 80057fc:	0039      	movs	r1, r7
 80057fe:	9803      	ldr	r0, [sp, #12]
 8005800:	f7ff fdb8 	bl	8005374 <__swsetup_r>
 8005804:	2800      	cmp	r0, #0
 8005806:	d00d      	beq.n	8005824 <_vfiprintf_r+0x60>
 8005808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d503      	bpl.n	8005816 <_vfiprintf_r+0x52>
 800580e:	2001      	movs	r0, #1
 8005810:	4240      	negs	r0, r0
 8005812:	b021      	add	sp, #132	@ 0x84
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	89bb      	ldrh	r3, [r7, #12]
 8005818:	059b      	lsls	r3, r3, #22
 800581a:	d4f8      	bmi.n	800580e <_vfiprintf_r+0x4a>
 800581c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800581e:	f7ff fe99 	bl	8005554 <__retarget_lock_release_recursive>
 8005822:	e7f4      	b.n	800580e <_vfiprintf_r+0x4a>
 8005824:	2300      	movs	r3, #0
 8005826:	ac08      	add	r4, sp, #32
 8005828:	6163      	str	r3, [r4, #20]
 800582a:	3320      	adds	r3, #32
 800582c:	7663      	strb	r3, [r4, #25]
 800582e:	3310      	adds	r3, #16
 8005830:	76a3      	strb	r3, [r4, #26]
 8005832:	9607      	str	r6, [sp, #28]
 8005834:	002e      	movs	r6, r5
 8005836:	7833      	ldrb	r3, [r6, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <_vfiprintf_r+0x7c>
 800583c:	2b25      	cmp	r3, #37	@ 0x25
 800583e:	d148      	bne.n	80058d2 <_vfiprintf_r+0x10e>
 8005840:	1b73      	subs	r3, r6, r5
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	42ae      	cmp	r6, r5
 8005846:	d00b      	beq.n	8005860 <_vfiprintf_r+0x9c>
 8005848:	002a      	movs	r2, r5
 800584a:	0039      	movs	r1, r7
 800584c:	9803      	ldr	r0, [sp, #12]
 800584e:	f7ff ffa6 	bl	800579e <__sfputs_r>
 8005852:	3001      	adds	r0, #1
 8005854:	d100      	bne.n	8005858 <_vfiprintf_r+0x94>
 8005856:	e0ae      	b.n	80059b6 <_vfiprintf_r+0x1f2>
 8005858:	6963      	ldr	r3, [r4, #20]
 800585a:	9a05      	ldr	r2, [sp, #20]
 800585c:	189b      	adds	r3, r3, r2
 800585e:	6163      	str	r3, [r4, #20]
 8005860:	7833      	ldrb	r3, [r6, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d100      	bne.n	8005868 <_vfiprintf_r+0xa4>
 8005866:	e0a6      	b.n	80059b6 <_vfiprintf_r+0x1f2>
 8005868:	2201      	movs	r2, #1
 800586a:	2300      	movs	r3, #0
 800586c:	4252      	negs	r2, r2
 800586e:	6062      	str	r2, [r4, #4]
 8005870:	a904      	add	r1, sp, #16
 8005872:	3254      	adds	r2, #84	@ 0x54
 8005874:	1852      	adds	r2, r2, r1
 8005876:	1c75      	adds	r5, r6, #1
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	60e3      	str	r3, [r4, #12]
 800587c:	60a3      	str	r3, [r4, #8]
 800587e:	7013      	strb	r3, [r2, #0]
 8005880:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005882:	4b59      	ldr	r3, [pc, #356]	@ (80059e8 <_vfiprintf_r+0x224>)
 8005884:	2205      	movs	r2, #5
 8005886:	0018      	movs	r0, r3
 8005888:	7829      	ldrb	r1, [r5, #0]
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	f000 fb88 	bl	8005fa0 <memchr>
 8005890:	1c6e      	adds	r6, r5, #1
 8005892:	2800      	cmp	r0, #0
 8005894:	d11f      	bne.n	80058d6 <_vfiprintf_r+0x112>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	06d3      	lsls	r3, r2, #27
 800589a:	d504      	bpl.n	80058a6 <_vfiprintf_r+0xe2>
 800589c:	2353      	movs	r3, #83	@ 0x53
 800589e:	a904      	add	r1, sp, #16
 80058a0:	185b      	adds	r3, r3, r1
 80058a2:	2120      	movs	r1, #32
 80058a4:	7019      	strb	r1, [r3, #0]
 80058a6:	0713      	lsls	r3, r2, #28
 80058a8:	d504      	bpl.n	80058b4 <_vfiprintf_r+0xf0>
 80058aa:	2353      	movs	r3, #83	@ 0x53
 80058ac:	a904      	add	r1, sp, #16
 80058ae:	185b      	adds	r3, r3, r1
 80058b0:	212b      	movs	r1, #43	@ 0x2b
 80058b2:	7019      	strb	r1, [r3, #0]
 80058b4:	782b      	ldrb	r3, [r5, #0]
 80058b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b8:	d016      	beq.n	80058e8 <_vfiprintf_r+0x124>
 80058ba:	002e      	movs	r6, r5
 80058bc:	2100      	movs	r1, #0
 80058be:	200a      	movs	r0, #10
 80058c0:	68e3      	ldr	r3, [r4, #12]
 80058c2:	7832      	ldrb	r2, [r6, #0]
 80058c4:	1c75      	adds	r5, r6, #1
 80058c6:	3a30      	subs	r2, #48	@ 0x30
 80058c8:	2a09      	cmp	r2, #9
 80058ca:	d950      	bls.n	800596e <_vfiprintf_r+0x1aa>
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d111      	bne.n	80058f4 <_vfiprintf_r+0x130>
 80058d0:	e017      	b.n	8005902 <_vfiprintf_r+0x13e>
 80058d2:	3601      	adds	r6, #1
 80058d4:	e7af      	b.n	8005836 <_vfiprintf_r+0x72>
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	1ac0      	subs	r0, r0, r3
 80058dc:	2301      	movs	r3, #1
 80058de:	4083      	lsls	r3, r0
 80058e0:	4313      	orrs	r3, r2
 80058e2:	0035      	movs	r5, r6
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	e7cc      	b.n	8005882 <_vfiprintf_r+0xbe>
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	1d19      	adds	r1, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9107      	str	r1, [sp, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db01      	blt.n	80058f8 <_vfiprintf_r+0x134>
 80058f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f6:	e004      	b.n	8005902 <_vfiprintf_r+0x13e>
 80058f8:	425b      	negs	r3, r3
 80058fa:	60e3      	str	r3, [r4, #12]
 80058fc:	2302      	movs	r3, #2
 80058fe:	4313      	orrs	r3, r2
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	7833      	ldrb	r3, [r6, #0]
 8005904:	2b2e      	cmp	r3, #46	@ 0x2e
 8005906:	d10c      	bne.n	8005922 <_vfiprintf_r+0x15e>
 8005908:	7873      	ldrb	r3, [r6, #1]
 800590a:	2b2a      	cmp	r3, #42	@ 0x2a
 800590c:	d134      	bne.n	8005978 <_vfiprintf_r+0x1b4>
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	3602      	adds	r6, #2
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	9207      	str	r2, [sp, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	da01      	bge.n	8005920 <_vfiprintf_r+0x15c>
 800591c:	2301      	movs	r3, #1
 800591e:	425b      	negs	r3, r3
 8005920:	9309      	str	r3, [sp, #36]	@ 0x24
 8005922:	4d32      	ldr	r5, [pc, #200]	@ (80059ec <_vfiprintf_r+0x228>)
 8005924:	2203      	movs	r2, #3
 8005926:	0028      	movs	r0, r5
 8005928:	7831      	ldrb	r1, [r6, #0]
 800592a:	f000 fb39 	bl	8005fa0 <memchr>
 800592e:	2800      	cmp	r0, #0
 8005930:	d006      	beq.n	8005940 <_vfiprintf_r+0x17c>
 8005932:	2340      	movs	r3, #64	@ 0x40
 8005934:	1b40      	subs	r0, r0, r5
 8005936:	4083      	lsls	r3, r0
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	3601      	adds	r6, #1
 800593c:	4313      	orrs	r3, r2
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	7831      	ldrb	r1, [r6, #0]
 8005942:	2206      	movs	r2, #6
 8005944:	482a      	ldr	r0, [pc, #168]	@ (80059f0 <_vfiprintf_r+0x22c>)
 8005946:	1c75      	adds	r5, r6, #1
 8005948:	7621      	strb	r1, [r4, #24]
 800594a:	f000 fb29 	bl	8005fa0 <memchr>
 800594e:	2800      	cmp	r0, #0
 8005950:	d040      	beq.n	80059d4 <_vfiprintf_r+0x210>
 8005952:	4b28      	ldr	r3, [pc, #160]	@ (80059f4 <_vfiprintf_r+0x230>)
 8005954:	2b00      	cmp	r3, #0
 8005956:	d122      	bne.n	800599e <_vfiprintf_r+0x1da>
 8005958:	2207      	movs	r2, #7
 800595a:	9b07      	ldr	r3, [sp, #28]
 800595c:	3307      	adds	r3, #7
 800595e:	4393      	bics	r3, r2
 8005960:	3308      	adds	r3, #8
 8005962:	9307      	str	r3, [sp, #28]
 8005964:	6963      	ldr	r3, [r4, #20]
 8005966:	9a04      	ldr	r2, [sp, #16]
 8005968:	189b      	adds	r3, r3, r2
 800596a:	6163      	str	r3, [r4, #20]
 800596c:	e762      	b.n	8005834 <_vfiprintf_r+0x70>
 800596e:	4343      	muls	r3, r0
 8005970:	002e      	movs	r6, r5
 8005972:	2101      	movs	r1, #1
 8005974:	189b      	adds	r3, r3, r2
 8005976:	e7a4      	b.n	80058c2 <_vfiprintf_r+0xfe>
 8005978:	2300      	movs	r3, #0
 800597a:	200a      	movs	r0, #10
 800597c:	0019      	movs	r1, r3
 800597e:	3601      	adds	r6, #1
 8005980:	6063      	str	r3, [r4, #4]
 8005982:	7832      	ldrb	r2, [r6, #0]
 8005984:	1c75      	adds	r5, r6, #1
 8005986:	3a30      	subs	r2, #48	@ 0x30
 8005988:	2a09      	cmp	r2, #9
 800598a:	d903      	bls.n	8005994 <_vfiprintf_r+0x1d0>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0c8      	beq.n	8005922 <_vfiprintf_r+0x15e>
 8005990:	9109      	str	r1, [sp, #36]	@ 0x24
 8005992:	e7c6      	b.n	8005922 <_vfiprintf_r+0x15e>
 8005994:	4341      	muls	r1, r0
 8005996:	002e      	movs	r6, r5
 8005998:	2301      	movs	r3, #1
 800599a:	1889      	adds	r1, r1, r2
 800599c:	e7f1      	b.n	8005982 <_vfiprintf_r+0x1be>
 800599e:	aa07      	add	r2, sp, #28
 80059a0:	9200      	str	r2, [sp, #0]
 80059a2:	0021      	movs	r1, r4
 80059a4:	003a      	movs	r2, r7
 80059a6:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <_vfiprintf_r+0x234>)
 80059a8:	9803      	ldr	r0, [sp, #12]
 80059aa:	e000      	b.n	80059ae <_vfiprintf_r+0x1ea>
 80059ac:	bf00      	nop
 80059ae:	9004      	str	r0, [sp, #16]
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	3301      	adds	r3, #1
 80059b4:	d1d6      	bne.n	8005964 <_vfiprintf_r+0x1a0>
 80059b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059b8:	07db      	lsls	r3, r3, #31
 80059ba:	d405      	bmi.n	80059c8 <_vfiprintf_r+0x204>
 80059bc:	89bb      	ldrh	r3, [r7, #12]
 80059be:	059b      	lsls	r3, r3, #22
 80059c0:	d402      	bmi.n	80059c8 <_vfiprintf_r+0x204>
 80059c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80059c4:	f7ff fdc6 	bl	8005554 <__retarget_lock_release_recursive>
 80059c8:	89bb      	ldrh	r3, [r7, #12]
 80059ca:	065b      	lsls	r3, r3, #25
 80059cc:	d500      	bpl.n	80059d0 <_vfiprintf_r+0x20c>
 80059ce:	e71e      	b.n	800580e <_vfiprintf_r+0x4a>
 80059d0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80059d2:	e71e      	b.n	8005812 <_vfiprintf_r+0x4e>
 80059d4:	aa07      	add	r2, sp, #28
 80059d6:	9200      	str	r2, [sp, #0]
 80059d8:	0021      	movs	r1, r4
 80059da:	003a      	movs	r2, r7
 80059dc:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <_vfiprintf_r+0x234>)
 80059de:	9803      	ldr	r0, [sp, #12]
 80059e0:	f000 f87c 	bl	8005adc <_printf_i>
 80059e4:	e7e3      	b.n	80059ae <_vfiprintf_r+0x1ea>
 80059e6:	46c0      	nop			@ (mov r8, r8)
 80059e8:	08006279 	.word	0x08006279
 80059ec:	0800627f 	.word	0x0800627f
 80059f0:	08006283 	.word	0x08006283
 80059f4:	00000000 	.word	0x00000000
 80059f8:	0800579f 	.word	0x0800579f

080059fc <_printf_common>:
 80059fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059fe:	0016      	movs	r6, r2
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	688a      	ldr	r2, [r1, #8]
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	000c      	movs	r4, r1
 8005a08:	9000      	str	r0, [sp, #0]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	da00      	bge.n	8005a10 <_printf_common+0x14>
 8005a0e:	0013      	movs	r3, r2
 8005a10:	0022      	movs	r2, r4
 8005a12:	6033      	str	r3, [r6, #0]
 8005a14:	3243      	adds	r2, #67	@ 0x43
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	2a00      	cmp	r2, #0
 8005a1a:	d001      	beq.n	8005a20 <_printf_common+0x24>
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	069b      	lsls	r3, r3, #26
 8005a24:	d502      	bpl.n	8005a2c <_printf_common+0x30>
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	3302      	adds	r3, #2
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	2306      	movs	r3, #6
 8005a30:	0015      	movs	r5, r2
 8005a32:	401d      	ands	r5, r3
 8005a34:	421a      	tst	r2, r3
 8005a36:	d027      	beq.n	8005a88 <_printf_common+0x8c>
 8005a38:	0023      	movs	r3, r4
 8005a3a:	3343      	adds	r3, #67	@ 0x43
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	1e5a      	subs	r2, r3, #1
 8005a40:	4193      	sbcs	r3, r2
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	0692      	lsls	r2, r2, #26
 8005a46:	d430      	bmi.n	8005aaa <_printf_common+0xae>
 8005a48:	0022      	movs	r2, r4
 8005a4a:	9901      	ldr	r1, [sp, #4]
 8005a4c:	9800      	ldr	r0, [sp, #0]
 8005a4e:	9d08      	ldr	r5, [sp, #32]
 8005a50:	3243      	adds	r2, #67	@ 0x43
 8005a52:	47a8      	blx	r5
 8005a54:	3001      	adds	r0, #1
 8005a56:	d025      	beq.n	8005aa4 <_printf_common+0xa8>
 8005a58:	2206      	movs	r2, #6
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d105      	bne.n	8005a70 <_printf_common+0x74>
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	68e5      	ldr	r5, [r4, #12]
 8005a68:	1aed      	subs	r5, r5, r3
 8005a6a:	43eb      	mvns	r3, r5
 8005a6c:	17db      	asrs	r3, r3, #31
 8005a6e:	401d      	ands	r5, r3
 8005a70:	68a3      	ldr	r3, [r4, #8]
 8005a72:	6922      	ldr	r2, [r4, #16]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	dd01      	ble.n	8005a7c <_printf_common+0x80>
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	18ed      	adds	r5, r5, r3
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42b5      	cmp	r5, r6
 8005a80:	d120      	bne.n	8005ac4 <_printf_common+0xc8>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e010      	b.n	8005aa8 <_printf_common+0xac>
 8005a86:	3501      	adds	r5, #1
 8005a88:	68e3      	ldr	r3, [r4, #12]
 8005a8a:	6832      	ldr	r2, [r6, #0]
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	42ab      	cmp	r3, r5
 8005a90:	ddd2      	ble.n	8005a38 <_printf_common+0x3c>
 8005a92:	0022      	movs	r2, r4
 8005a94:	2301      	movs	r3, #1
 8005a96:	9901      	ldr	r1, [sp, #4]
 8005a98:	9800      	ldr	r0, [sp, #0]
 8005a9a:	9f08      	ldr	r7, [sp, #32]
 8005a9c:	3219      	adds	r2, #25
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d1f0      	bne.n	8005a86 <_printf_common+0x8a>
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	4240      	negs	r0, r0
 8005aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aaa:	2030      	movs	r0, #48	@ 0x30
 8005aac:	18e1      	adds	r1, r4, r3
 8005aae:	3143      	adds	r1, #67	@ 0x43
 8005ab0:	7008      	strb	r0, [r1, #0]
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	3145      	adds	r1, #69	@ 0x45
 8005ab8:	7809      	ldrb	r1, [r1, #0]
 8005aba:	18a2      	adds	r2, r4, r2
 8005abc:	3243      	adds	r2, #67	@ 0x43
 8005abe:	3302      	adds	r3, #2
 8005ac0:	7011      	strb	r1, [r2, #0]
 8005ac2:	e7c1      	b.n	8005a48 <_printf_common+0x4c>
 8005ac4:	0022      	movs	r2, r4
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	9901      	ldr	r1, [sp, #4]
 8005aca:	9800      	ldr	r0, [sp, #0]
 8005acc:	9f08      	ldr	r7, [sp, #32]
 8005ace:	321a      	adds	r2, #26
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0e6      	beq.n	8005aa4 <_printf_common+0xa8>
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7d1      	b.n	8005a7e <_printf_common+0x82>
	...

08005adc <_printf_i>:
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	b08b      	sub	sp, #44	@ 0x2c
 8005ae0:	9206      	str	r2, [sp, #24]
 8005ae2:	000a      	movs	r2, r1
 8005ae4:	3243      	adds	r2, #67	@ 0x43
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	9005      	str	r0, [sp, #20]
 8005aea:	9203      	str	r2, [sp, #12]
 8005aec:	7e0a      	ldrb	r2, [r1, #24]
 8005aee:	000c      	movs	r4, r1
 8005af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005af2:	2a78      	cmp	r2, #120	@ 0x78
 8005af4:	d809      	bhi.n	8005b0a <_printf_i+0x2e>
 8005af6:	2a62      	cmp	r2, #98	@ 0x62
 8005af8:	d80b      	bhi.n	8005b12 <_printf_i+0x36>
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d100      	bne.n	8005b00 <_printf_i+0x24>
 8005afe:	e0bc      	b.n	8005c7a <_printf_i+0x19e>
 8005b00:	497b      	ldr	r1, [pc, #492]	@ (8005cf0 <_printf_i+0x214>)
 8005b02:	9104      	str	r1, [sp, #16]
 8005b04:	2a58      	cmp	r2, #88	@ 0x58
 8005b06:	d100      	bne.n	8005b0a <_printf_i+0x2e>
 8005b08:	e090      	b.n	8005c2c <_printf_i+0x150>
 8005b0a:	0025      	movs	r5, r4
 8005b0c:	3542      	adds	r5, #66	@ 0x42
 8005b0e:	702a      	strb	r2, [r5, #0]
 8005b10:	e022      	b.n	8005b58 <_printf_i+0x7c>
 8005b12:	0010      	movs	r0, r2
 8005b14:	3863      	subs	r0, #99	@ 0x63
 8005b16:	2815      	cmp	r0, #21
 8005b18:	d8f7      	bhi.n	8005b0a <_printf_i+0x2e>
 8005b1a:	f7fa fb05 	bl	8000128 <__gnu_thumb1_case_shi>
 8005b1e:	0016      	.short	0x0016
 8005b20:	fff6001f 	.word	0xfff6001f
 8005b24:	fff6fff6 	.word	0xfff6fff6
 8005b28:	001ffff6 	.word	0x001ffff6
 8005b2c:	fff6fff6 	.word	0xfff6fff6
 8005b30:	fff6fff6 	.word	0xfff6fff6
 8005b34:	003600a1 	.word	0x003600a1
 8005b38:	fff60080 	.word	0xfff60080
 8005b3c:	00b2fff6 	.word	0x00b2fff6
 8005b40:	0036fff6 	.word	0x0036fff6
 8005b44:	fff6fff6 	.word	0xfff6fff6
 8005b48:	0084      	.short	0x0084
 8005b4a:	0025      	movs	r5, r4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	3542      	adds	r5, #66	@ 0x42
 8005b50:	1d11      	adds	r1, r2, #4
 8005b52:	6019      	str	r1, [r3, #0]
 8005b54:	6813      	ldr	r3, [r2, #0]
 8005b56:	702b      	strb	r3, [r5, #0]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0a0      	b.n	8005c9e <_printf_i+0x1c2>
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	6809      	ldr	r1, [r1, #0]
 8005b60:	1d02      	adds	r2, r0, #4
 8005b62:	060d      	lsls	r5, r1, #24
 8005b64:	d50b      	bpl.n	8005b7e <_printf_i+0xa2>
 8005b66:	6806      	ldr	r6, [r0, #0]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	da03      	bge.n	8005b76 <_printf_i+0x9a>
 8005b6e:	232d      	movs	r3, #45	@ 0x2d
 8005b70:	9a03      	ldr	r2, [sp, #12]
 8005b72:	4276      	negs	r6, r6
 8005b74:	7013      	strb	r3, [r2, #0]
 8005b76:	4b5e      	ldr	r3, [pc, #376]	@ (8005cf0 <_printf_i+0x214>)
 8005b78:	270a      	movs	r7, #10
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	e018      	b.n	8005bb0 <_printf_i+0xd4>
 8005b7e:	6806      	ldr	r6, [r0, #0]
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	0649      	lsls	r1, r1, #25
 8005b84:	d5f1      	bpl.n	8005b6a <_printf_i+0x8e>
 8005b86:	b236      	sxth	r6, r6
 8005b88:	e7ef      	b.n	8005b6a <_printf_i+0x8e>
 8005b8a:	6808      	ldr	r0, [r1, #0]
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	c940      	ldmia	r1!, {r6}
 8005b90:	0605      	lsls	r5, r0, #24
 8005b92:	d402      	bmi.n	8005b9a <_printf_i+0xbe>
 8005b94:	0640      	lsls	r0, r0, #25
 8005b96:	d500      	bpl.n	8005b9a <_printf_i+0xbe>
 8005b98:	b2b6      	uxth	r6, r6
 8005b9a:	6019      	str	r1, [r3, #0]
 8005b9c:	4b54      	ldr	r3, [pc, #336]	@ (8005cf0 <_printf_i+0x214>)
 8005b9e:	270a      	movs	r7, #10
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	2a6f      	cmp	r2, #111	@ 0x6f
 8005ba4:	d100      	bne.n	8005ba8 <_printf_i+0xcc>
 8005ba6:	3f02      	subs	r7, #2
 8005ba8:	0023      	movs	r3, r4
 8005baa:	2200      	movs	r2, #0
 8005bac:	3343      	adds	r3, #67	@ 0x43
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	db03      	blt.n	8005bc0 <_printf_i+0xe4>
 8005bb8:	2104      	movs	r1, #4
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	6022      	str	r2, [r4, #0]
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	d102      	bne.n	8005bca <_printf_i+0xee>
 8005bc4:	9d03      	ldr	r5, [sp, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00c      	beq.n	8005be4 <_printf_i+0x108>
 8005bca:	9d03      	ldr	r5, [sp, #12]
 8005bcc:	0030      	movs	r0, r6
 8005bce:	0039      	movs	r1, r7
 8005bd0:	f7fa fb3a 	bl	8000248 <__aeabi_uidivmod>
 8005bd4:	9b04      	ldr	r3, [sp, #16]
 8005bd6:	3d01      	subs	r5, #1
 8005bd8:	5c5b      	ldrb	r3, [r3, r1]
 8005bda:	702b      	strb	r3, [r5, #0]
 8005bdc:	0033      	movs	r3, r6
 8005bde:	0006      	movs	r6, r0
 8005be0:	429f      	cmp	r7, r3
 8005be2:	d9f3      	bls.n	8005bcc <_printf_i+0xf0>
 8005be4:	2f08      	cmp	r7, #8
 8005be6:	d109      	bne.n	8005bfc <_printf_i+0x120>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	07db      	lsls	r3, r3, #31
 8005bec:	d506      	bpl.n	8005bfc <_printf_i+0x120>
 8005bee:	6862      	ldr	r2, [r4, #4]
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	dc02      	bgt.n	8005bfc <_printf_i+0x120>
 8005bf6:	2330      	movs	r3, #48	@ 0x30
 8005bf8:	3d01      	subs	r5, #1
 8005bfa:	702b      	strb	r3, [r5, #0]
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	1b5b      	subs	r3, r3, r5
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	9b07      	ldr	r3, [sp, #28]
 8005c04:	0021      	movs	r1, r4
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	9805      	ldr	r0, [sp, #20]
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	aa09      	add	r2, sp, #36	@ 0x24
 8005c0e:	f7ff fef5 	bl	80059fc <_printf_common>
 8005c12:	3001      	adds	r0, #1
 8005c14:	d148      	bne.n	8005ca8 <_printf_i+0x1cc>
 8005c16:	2001      	movs	r0, #1
 8005c18:	4240      	negs	r0, r0
 8005c1a:	b00b      	add	sp, #44	@ 0x2c
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1e:	2220      	movs	r2, #32
 8005c20:	6809      	ldr	r1, [r1, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	2278      	movs	r2, #120	@ 0x78
 8005c28:	4932      	ldr	r1, [pc, #200]	@ (8005cf4 <_printf_i+0x218>)
 8005c2a:	9104      	str	r1, [sp, #16]
 8005c2c:	0021      	movs	r1, r4
 8005c2e:	3145      	adds	r1, #69	@ 0x45
 8005c30:	700a      	strb	r2, [r1, #0]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	6822      	ldr	r2, [r4, #0]
 8005c36:	c940      	ldmia	r1!, {r6}
 8005c38:	0610      	lsls	r0, r2, #24
 8005c3a:	d402      	bmi.n	8005c42 <_printf_i+0x166>
 8005c3c:	0650      	lsls	r0, r2, #25
 8005c3e:	d500      	bpl.n	8005c42 <_printf_i+0x166>
 8005c40:	b2b6      	uxth	r6, r6
 8005c42:	6019      	str	r1, [r3, #0]
 8005c44:	07d3      	lsls	r3, r2, #31
 8005c46:	d502      	bpl.n	8005c4e <_printf_i+0x172>
 8005c48:	2320      	movs	r3, #32
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	d001      	beq.n	8005c56 <_printf_i+0x17a>
 8005c52:	2710      	movs	r7, #16
 8005c54:	e7a8      	b.n	8005ba8 <_printf_i+0xcc>
 8005c56:	2220      	movs	r2, #32
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4393      	bics	r3, r2
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	e7f8      	b.n	8005c52 <_printf_i+0x176>
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	680d      	ldr	r5, [r1, #0]
 8005c64:	1d10      	adds	r0, r2, #4
 8005c66:	6949      	ldr	r1, [r1, #20]
 8005c68:	6018      	str	r0, [r3, #0]
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	062e      	lsls	r6, r5, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0x198>
 8005c70:	6019      	str	r1, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0x19e>
 8005c74:	066d      	lsls	r5, r5, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0x194>
 8005c78:	8019      	strh	r1, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9d03      	ldr	r5, [sp, #12]
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	e7bf      	b.n	8005c02 <_printf_i+0x126>
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	1d11      	adds	r1, r2, #4
 8005c86:	6019      	str	r1, [r3, #0]
 8005c88:	6815      	ldr	r5, [r2, #0]
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	0028      	movs	r0, r5
 8005c8e:	6862      	ldr	r2, [r4, #4]
 8005c90:	f000 f986 	bl	8005fa0 <memchr>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d001      	beq.n	8005c9c <_printf_i+0x1c0>
 8005c98:	1b40      	subs	r0, r0, r5
 8005c9a:	6060      	str	r0, [r4, #4]
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	7013      	strb	r3, [r2, #0]
 8005ca6:	e7ac      	b.n	8005c02 <_printf_i+0x126>
 8005ca8:	002a      	movs	r2, r5
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	9906      	ldr	r1, [sp, #24]
 8005cae:	9805      	ldr	r0, [sp, #20]
 8005cb0:	9d07      	ldr	r5, [sp, #28]
 8005cb2:	47a8      	blx	r5
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d0ae      	beq.n	8005c16 <_printf_i+0x13a>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	079b      	lsls	r3, r3, #30
 8005cbc:	d415      	bmi.n	8005cea <_printf_i+0x20e>
 8005cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc0:	68e0      	ldr	r0, [r4, #12]
 8005cc2:	4298      	cmp	r0, r3
 8005cc4:	daa9      	bge.n	8005c1a <_printf_i+0x13e>
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	e7a7      	b.n	8005c1a <_printf_i+0x13e>
 8005cca:	0022      	movs	r2, r4
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9906      	ldr	r1, [sp, #24]
 8005cd0:	9805      	ldr	r0, [sp, #20]
 8005cd2:	9e07      	ldr	r6, [sp, #28]
 8005cd4:	3219      	adds	r2, #25
 8005cd6:	47b0      	blx	r6
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d09c      	beq.n	8005c16 <_printf_i+0x13a>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dcf0      	bgt.n	8005cca <_printf_i+0x1ee>
 8005ce8:	e7e9      	b.n	8005cbe <_printf_i+0x1e2>
 8005cea:	2500      	movs	r5, #0
 8005cec:	e7f7      	b.n	8005cde <_printf_i+0x202>
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	0800628a 	.word	0x0800628a
 8005cf4:	0800629b 	.word	0x0800629b

08005cf8 <__sflush_r>:
 8005cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cfa:	220c      	movs	r2, #12
 8005cfc:	5e8b      	ldrsh	r3, [r1, r2]
 8005cfe:	0005      	movs	r5, r0
 8005d00:	000c      	movs	r4, r1
 8005d02:	071a      	lsls	r2, r3, #28
 8005d04:	d456      	bmi.n	8005db4 <__sflush_r+0xbc>
 8005d06:	684a      	ldr	r2, [r1, #4]
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	dc02      	bgt.n	8005d12 <__sflush_r+0x1a>
 8005d0c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	dd4e      	ble.n	8005db0 <__sflush_r+0xb8>
 8005d12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005d14:	2f00      	cmp	r7, #0
 8005d16:	d04b      	beq.n	8005db0 <__sflush_r+0xb8>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2080      	movs	r0, #128	@ 0x80
 8005d1c:	682e      	ldr	r6, [r5, #0]
 8005d1e:	602a      	str	r2, [r5, #0]
 8005d20:	001a      	movs	r2, r3
 8005d22:	0140      	lsls	r0, r0, #5
 8005d24:	6a21      	ldr	r1, [r4, #32]
 8005d26:	4002      	ands	r2, r0
 8005d28:	4203      	tst	r3, r0
 8005d2a:	d033      	beq.n	8005d94 <__sflush_r+0x9c>
 8005d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	075b      	lsls	r3, r3, #29
 8005d32:	d506      	bpl.n	8005d42 <__sflush_r+0x4a>
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <__sflush_r+0x4a>
 8005d3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	0028      	movs	r0, r5
 8005d46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005d48:	6a21      	ldr	r1, [r4, #32]
 8005d4a:	47b8      	blx	r7
 8005d4c:	89a2      	ldrh	r2, [r4, #12]
 8005d4e:	1c43      	adds	r3, r0, #1
 8005d50:	d106      	bne.n	8005d60 <__sflush_r+0x68>
 8005d52:	6829      	ldr	r1, [r5, #0]
 8005d54:	291d      	cmp	r1, #29
 8005d56:	d846      	bhi.n	8005de6 <__sflush_r+0xee>
 8005d58:	4b29      	ldr	r3, [pc, #164]	@ (8005e00 <__sflush_r+0x108>)
 8005d5a:	410b      	asrs	r3, r1
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d442      	bmi.n	8005de6 <__sflush_r+0xee>
 8005d60:	2300      	movs	r3, #0
 8005d62:	6063      	str	r3, [r4, #4]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	04d2      	lsls	r2, r2, #19
 8005d6a:	d505      	bpl.n	8005d78 <__sflush_r+0x80>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <__sflush_r+0x7e>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d100      	bne.n	8005d78 <__sflush_r+0x80>
 8005d76:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d7a:	602e      	str	r6, [r5, #0]
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d017      	beq.n	8005db0 <__sflush_r+0xb8>
 8005d80:	0023      	movs	r3, r4
 8005d82:	3344      	adds	r3, #68	@ 0x44
 8005d84:	4299      	cmp	r1, r3
 8005d86:	d002      	beq.n	8005d8e <__sflush_r+0x96>
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f7ff fbed 	bl	8005568 <_free_r>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d92:	e00d      	b.n	8005db0 <__sflush_r+0xb8>
 8005d94:	2301      	movs	r3, #1
 8005d96:	0028      	movs	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	0002      	movs	r2, r0
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d1c6      	bne.n	8005d2e <__sflush_r+0x36>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0c3      	beq.n	8005d2e <__sflush_r+0x36>
 8005da6:	2b1d      	cmp	r3, #29
 8005da8:	d001      	beq.n	8005dae <__sflush_r+0xb6>
 8005daa:	2b16      	cmp	r3, #22
 8005dac:	d11a      	bne.n	8005de4 <__sflush_r+0xec>
 8005dae:	602e      	str	r6, [r5, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	e01e      	b.n	8005df2 <__sflush_r+0xfa>
 8005db4:	690e      	ldr	r6, [r1, #16]
 8005db6:	2e00      	cmp	r6, #0
 8005db8:	d0fa      	beq.n	8005db0 <__sflush_r+0xb8>
 8005dba:	680f      	ldr	r7, [r1, #0]
 8005dbc:	600e      	str	r6, [r1, #0]
 8005dbe:	1bba      	subs	r2, r7, r6
 8005dc0:	9201      	str	r2, [sp, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	079b      	lsls	r3, r3, #30
 8005dc6:	d100      	bne.n	8005dca <__sflush_r+0xd2>
 8005dc8:	694a      	ldr	r2, [r1, #20]
 8005dca:	60a2      	str	r2, [r4, #8]
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	ddee      	ble.n	8005db0 <__sflush_r+0xb8>
 8005dd2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005dd4:	0032      	movs	r2, r6
 8005dd6:	001f      	movs	r7, r3
 8005dd8:	0028      	movs	r0, r5
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	6a21      	ldr	r1, [r4, #32]
 8005dde:	47b8      	blx	r7
 8005de0:	2800      	cmp	r0, #0
 8005de2:	dc07      	bgt.n	8005df4 <__sflush_r+0xfc>
 8005de4:	89a2      	ldrh	r2, [r4, #12]
 8005de6:	2340      	movs	r3, #64	@ 0x40
 8005de8:	2001      	movs	r0, #1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	4240      	negs	r0, r0
 8005df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	1836      	adds	r6, r6, r0
 8005df8:	1a1b      	subs	r3, r3, r0
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	e7e6      	b.n	8005dcc <__sflush_r+0xd4>
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	dfbffffe 	.word	0xdfbffffe

08005e04 <_fflush_r>:
 8005e04:	690b      	ldr	r3, [r1, #16]
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	0005      	movs	r5, r0
 8005e0a:	000c      	movs	r4, r1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <_fflush_r+0x12>
 8005e10:	2500      	movs	r5, #0
 8005e12:	0028      	movs	r0, r5
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d004      	beq.n	8005e24 <_fflush_r+0x20>
 8005e1a:	6a03      	ldr	r3, [r0, #32]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <_fflush_r+0x20>
 8005e20:	f7ff f8c0 	bl	8004fa4 <__sinit>
 8005e24:	220c      	movs	r2, #12
 8005e26:	5ea3      	ldrsh	r3, [r4, r2]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f1      	beq.n	8005e10 <_fflush_r+0xc>
 8005e2c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e2e:	07d2      	lsls	r2, r2, #31
 8005e30:	d404      	bmi.n	8005e3c <_fflush_r+0x38>
 8005e32:	059b      	lsls	r3, r3, #22
 8005e34:	d402      	bmi.n	8005e3c <_fflush_r+0x38>
 8005e36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e38:	f7ff fb8b 	bl	8005552 <__retarget_lock_acquire_recursive>
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	0021      	movs	r1, r4
 8005e40:	f7ff ff5a 	bl	8005cf8 <__sflush_r>
 8005e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e46:	0005      	movs	r5, r0
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d4e2      	bmi.n	8005e12 <_fflush_r+0xe>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	059b      	lsls	r3, r3, #22
 8005e50:	d4df      	bmi.n	8005e12 <_fflush_r+0xe>
 8005e52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e54:	f7ff fb7e 	bl	8005554 <__retarget_lock_release_recursive>
 8005e58:	e7db      	b.n	8005e12 <_fflush_r+0xe>
	...

08005e5c <__swhatbuf_r>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	000e      	movs	r6, r1
 8005e60:	001d      	movs	r5, r3
 8005e62:	230e      	movs	r3, #14
 8005e64:	5ec9      	ldrsh	r1, [r1, r3]
 8005e66:	0014      	movs	r4, r2
 8005e68:	b096      	sub	sp, #88	@ 0x58
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	da0c      	bge.n	8005e88 <__swhatbuf_r+0x2c>
 8005e6e:	89b2      	ldrh	r2, [r6, #12]
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	0011      	movs	r1, r2
 8005e74:	4019      	ands	r1, r3
 8005e76:	421a      	tst	r2, r3
 8005e78:	d114      	bne.n	8005ea4 <__swhatbuf_r+0x48>
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	2000      	movs	r0, #0
 8005e80:	6029      	str	r1, [r5, #0]
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	b016      	add	sp, #88	@ 0x58
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	466a      	mov	r2, sp
 8005e8a:	f000 f853 	bl	8005f34 <_fstat_r>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	dbed      	blt.n	8005e6e <__swhatbuf_r+0x12>
 8005e92:	23f0      	movs	r3, #240	@ 0xf0
 8005e94:	9901      	ldr	r1, [sp, #4]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	4019      	ands	r1, r3
 8005e9a:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <__swhatbuf_r+0x50>)
 8005e9c:	18c9      	adds	r1, r1, r3
 8005e9e:	424b      	negs	r3, r1
 8005ea0:	4159      	adcs	r1, r3
 8005ea2:	e7ea      	b.n	8005e7a <__swhatbuf_r+0x1e>
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	2340      	movs	r3, #64	@ 0x40
 8005ea8:	e7e9      	b.n	8005e7e <__swhatbuf_r+0x22>
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	ffffe000 	.word	0xffffe000

08005eb0 <__smakebuf_r>:
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	2602      	movs	r6, #2
 8005eb4:	898b      	ldrh	r3, [r1, #12]
 8005eb6:	0005      	movs	r5, r0
 8005eb8:	000c      	movs	r4, r1
 8005eba:	b085      	sub	sp, #20
 8005ebc:	4233      	tst	r3, r6
 8005ebe:	d007      	beq.n	8005ed0 <__smakebuf_r+0x20>
 8005ec0:	0023      	movs	r3, r4
 8005ec2:	3347      	adds	r3, #71	@ 0x47
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	2301      	movs	r3, #1
 8005eca:	6163      	str	r3, [r4, #20]
 8005ecc:	b005      	add	sp, #20
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	aa02      	add	r2, sp, #8
 8005ed4:	f7ff ffc2 	bl	8005e5c <__swhatbuf_r>
 8005ed8:	9f02      	ldr	r7, [sp, #8]
 8005eda:	9001      	str	r0, [sp, #4]
 8005edc:	0039      	movs	r1, r7
 8005ede:	0028      	movs	r0, r5
 8005ee0:	f7ff fbb8 	bl	8005654 <_malloc_r>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d108      	bne.n	8005efa <__smakebuf_r+0x4a>
 8005ee8:	220c      	movs	r2, #12
 8005eea:	5ea3      	ldrsh	r3, [r4, r2]
 8005eec:	059a      	lsls	r2, r3, #22
 8005eee:	d4ed      	bmi.n	8005ecc <__smakebuf_r+0x1c>
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4393      	bics	r3, r2
 8005ef4:	431e      	orrs	r6, r3
 8005ef6:	81a6      	strh	r6, [r4, #12]
 8005ef8:	e7e2      	b.n	8005ec0 <__smakebuf_r+0x10>
 8005efa:	2380      	movs	r3, #128	@ 0x80
 8005efc:	89a2      	ldrh	r2, [r4, #12]
 8005efe:	6020      	str	r0, [r4, #0]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	6120      	str	r0, [r4, #16]
 8005f08:	6167      	str	r7, [r4, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <__smakebuf_r+0x78>
 8005f0e:	0028      	movs	r0, r5
 8005f10:	230e      	movs	r3, #14
 8005f12:	5ee1      	ldrsh	r1, [r4, r3]
 8005f14:	f000 f820 	bl	8005f58 <_isatty_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d005      	beq.n	8005f28 <__smakebuf_r+0x78>
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	89a2      	ldrh	r2, [r4, #12]
 8005f20:	439a      	bics	r2, r3
 8005f22:	3b02      	subs	r3, #2
 8005f24:	4313      	orrs	r3, r2
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	9a01      	ldr	r2, [sp, #4]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	e7cc      	b.n	8005ecc <__smakebuf_r+0x1c>
	...

08005f34 <_fstat_r>:
 8005f34:	2300      	movs	r3, #0
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	4d06      	ldr	r5, [pc, #24]	@ (8005f54 <_fstat_r+0x20>)
 8005f3a:	0004      	movs	r4, r0
 8005f3c:	0008      	movs	r0, r1
 8005f3e:	0011      	movs	r1, r2
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	f7fa ff78 	bl	8000e36 <_fstat>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d103      	bne.n	8005f52 <_fstat_r+0x1e>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d000      	beq.n	8005f52 <_fstat_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	200012d0 	.word	0x200012d0

08005f58 <_isatty_r>:
 8005f58:	2300      	movs	r3, #0
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	4d06      	ldr	r5, [pc, #24]	@ (8005f78 <_isatty_r+0x20>)
 8005f5e:	0004      	movs	r4, r0
 8005f60:	0008      	movs	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fa ff75 	bl	8000e52 <_isatty>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d103      	bne.n	8005f74 <_isatty_r+0x1c>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d000      	beq.n	8005f74 <_isatty_r+0x1c>
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	200012d0 	.word	0x200012d0

08005f7c <_sbrk_r>:
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	4d06      	ldr	r5, [pc, #24]	@ (8005f9c <_sbrk_r+0x20>)
 8005f82:	0004      	movs	r4, r0
 8005f84:	0008      	movs	r0, r1
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	f7fa ff78 	bl	8000e7c <_sbrk>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_sbrk_r+0x1c>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d000      	beq.n	8005f98 <_sbrk_r+0x1c>
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	200012d0 	.word	0x200012d0

08005fa0 <memchr>:
 8005fa0:	b2c9      	uxtb	r1, r1
 8005fa2:	1882      	adds	r2, r0, r2
 8005fa4:	4290      	cmp	r0, r2
 8005fa6:	d101      	bne.n	8005fac <memchr+0xc>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	4770      	bx	lr
 8005fac:	7803      	ldrb	r3, [r0, #0]
 8005fae:	428b      	cmp	r3, r1
 8005fb0:	d0fb      	beq.n	8005faa <memchr+0xa>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	e7f6      	b.n	8005fa4 <memchr+0x4>
	...

08005fb8 <_init>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr

08005fc4 <_fini>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr
