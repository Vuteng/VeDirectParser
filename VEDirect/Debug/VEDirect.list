
VEDirect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003b38  08003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c10  08003c10  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c18  08003c18  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  2000000c  08003c2c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08003c2c  00005868  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1c6  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002710  00000000  00000000  000121fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00014910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d9  00000000  00000000  000154c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f9f  00000000  00000000  00015d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f638  00000000  00000000  0002fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d136  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc4a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002860  00000000  00000000  000dc4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000ded4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003b20 	.word	0x08003b20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003b20 	.word	0x08003b20

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fa09 	bl	8003a44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 ffdc 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2220      	movs	r2, #32
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	23a0      	movs	r3, #160	@ 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fe64 	bl	8001378 <HAL_GPIO_Init>

}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b009      	add	sp, #36	@ 0x24
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006c4:	f3ef 8310 	mrs	r3, PRIMASK
 80006c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80006ca:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f383 8810 	msr	PRIMASK, r3
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2220      	movs	r2, #32
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	f383 8810 	msr	PRIMASK, r3
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b006      	add	sp, #24
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int counter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fcfd 	bl	8001104 <HAL_Init>

 
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f80f 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f7ff ff85 	bl	800061c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000712:	f000 fbdd 	bl	8000ed0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000716:	f000 fb8d 	bl	8000e34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 LL_USART_EnableIT_RXNE(USART3);
 800071a:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <main+0x2c>)
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ffcd 	bl	80006bc <LL_USART_EnableIT_RXNE_RXFNE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Continuously check if a complete frame is ready for processing
	  process_frame();
 8000722:	f000 f84b 	bl	80007bc <process_frame>
 8000726:	e7fc      	b.n	8000722 <main+0x26>
 8000728:	40004800 	.word	0x40004800

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b093      	sub	sp, #76	@ 0x4c
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2410      	movs	r4, #16
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2338      	movs	r3, #56	@ 0x38
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f003 f981 	bl	8003a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000742:	003b      	movs	r3, r7
 8000744:	0018      	movs	r0, r3
 8000746:	2310      	movs	r3, #16
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 f97a 	bl	8003a44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 ff91 	bl	800167c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2240      	movs	r2, #64	@ 0x40
 8000772:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	f000 ffc9 	bl	8001714 <HAL_RCC_OscConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000786:	f000 f86f 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	003b      	movs	r3, r7
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a2:	003b      	movs	r3, r7
 80007a4:	2100      	movs	r1, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 face 	bl	8001d48 <HAL_RCC_ClockConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007b0:	f000 f85a 	bl	8000868 <Error_Handler>
  }
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b013      	add	sp, #76	@ 0x4c
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <process_frame>:

/* USER CODE BEGIN 4 */

void process_frame(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    if (frame_ready)
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <process_frame+0x54>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d01f      	beq.n	800080a <process_frame+0x4e>
    {
        // Check if the calculated checksum matches the received checksum
        if ((checksum_calculated % 256) == checksum_received)
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <process_frame+0x58>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <process_frame+0x5c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d10e      	bne.n	80007f8 <process_frame+0x3c>
        {
        	parse_frame(g_uart_buffer);
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <process_frame+0x60>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f849 	bl	8000874 <parse_frame>

            HAL_UART_Transmit(&huart2, g_uart_buffer, uart_index, 1000);
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <process_frame+0x64>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	001a      	movs	r2, r3
 80007ea:	23fa      	movs	r3, #250	@ 0xfa
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	490b      	ldr	r1, [pc, #44]	@ (800081c <process_frame+0x60>)
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <process_frame+0x68>)
 80007f2:	f001 fe61 	bl	80024b8 <HAL_UART_Transmit>
 80007f6:	e006      	b.n	8000806 <process_frame+0x4a>
        }
        else
        {
            // Invalid checksum
            HAL_UART_Transmit(&huart2, (uint8_t *)"Checksum Error\n", 15, 1000);
 80007f8:	23fa      	movs	r3, #250	@ 0xfa
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	490a      	ldr	r1, [pc, #40]	@ (8000828 <process_frame+0x6c>)
 80007fe:	4809      	ldr	r0, [pc, #36]	@ (8000824 <process_frame+0x68>)
 8000800:	220f      	movs	r2, #15
 8000802:	f001 fe59 	bl	80024b8 <HAL_UART_Transmit>
        }

        // Clear buffers and reset flags
        reset_frame_data();
 8000806:	f000 f811 	bl	800082c <reset_frame_data>
    }
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200005c9 	.word	0x200005c9
 8000814:	200005ca 	.word	0x200005ca
 8000818:	200005cb 	.word	0x200005cb
 800081c:	200005cc 	.word	0x200005cc
 8000820:	200005c8 	.word	0x200005c8
 8000824:	200007d0 	.word	0x200007d0
 8000828:	08003b38 	.word	0x08003b38

0800082c <reset_frame_data>:

void reset_frame_data(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    // Clear the UART buffer
    memset(g_uart_buffer, 0, BUFFER_SIZE);
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	009a      	lsls	r2, r3, #2
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <reset_frame_data+0x2c>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f003 f903 	bl	8003a44 <memset>

    // Reset flags
    frame_ready = 0;
 800083e:	4b07      	ldr	r3, [pc, #28]	@ (800085c <reset_frame_data+0x30>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
    checksum_calculated = 0;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <reset_frame_data+0x34>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
    uart_index = 0;
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <reset_frame_data+0x38>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	200005cc 	.word	0x200005cc
 800085c:	200005c9 	.word	0x200005c9
 8000860:	200005ca 	.word	0x200005ca
 8000864:	200005c8 	.word	0x200005c8

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <parse_frame>:
#include <stdio.h>

vedirect_data_t ve_data;

void parse_frame(char *frame)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    // Initialize field count
    ve_data.field_count = 0;
 800087c:	4a6b      	ldr	r2, [pc, #428]	@ (8000a2c <parse_frame+0x1b8>)
 800087e:	23e7      	movs	r3, #231	@ 0xe7
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	2100      	movs	r1, #0
 8000884:	54d1      	strb	r1, [r2, r3]

    char *line_start = frame;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	61fb      	str	r3, [r7, #28]
    char *line_end;

    // Loop over each line, separated by \r\n
    while ((line_end = strstr(line_start, "\r\n")) != NULL && ve_data.field_count < MAX_FIELDS)
 800088a:	e05c      	b.n	8000946 <parse_frame+0xd2>
    {
        // Temporarily terminate the line
        *line_end = '\0';
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]

        // Split the line into label and value based on the tab character
        char *label = line_start;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	617b      	str	r3, [r7, #20]
        char *value = strchr(line_start, '\t');
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2109      	movs	r1, #9
 800089a:	0018      	movs	r0, r3
 800089c:	f003 f8da 	bl	8003a54 <strchr>
 80008a0:	0003      	movs	r3, r0
 80008a2:	613b      	str	r3, [r7, #16]

        if (value)
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d047      	beq.n	800093a <parse_frame+0xc6>
        {
            // Move the pointer past the tab character
            *value = '\0';
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
            value++;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	3301      	adds	r3, #1
 80008b4:	613b      	str	r3, [r7, #16]

            // Copy label and value to the ve_data structure
            strncpy(ve_data.fields[ve_data.field_count].label, label, LABEL_SIZE - 1);
 80008b6:	4a5d      	ldr	r2, [pc, #372]	@ (8000a2c <parse_frame+0x1b8>)
 80008b8:	23e7      	movs	r3, #231	@ 0xe7
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	5cd3      	ldrb	r3, [r2, r3]
 80008be:	001a      	movs	r2, r3
 80008c0:	232a      	movs	r3, #42	@ 0x2a
 80008c2:	435a      	muls	r2, r3
 80008c4:	4b59      	ldr	r3, [pc, #356]	@ (8000a2c <parse_frame+0x1b8>)
 80008c6:	18d3      	adds	r3, r2, r3
 80008c8:	6979      	ldr	r1, [r7, #20]
 80008ca:	2208      	movs	r2, #8
 80008cc:	0018      	movs	r0, r3
 80008ce:	f003 f8cf 	bl	8003a70 <strncpy>
            ve_data.fields[ve_data.field_count].label[LABEL_SIZE - 1] = '\0'; // Ensure null termination
 80008d2:	4a56      	ldr	r2, [pc, #344]	@ (8000a2c <parse_frame+0x1b8>)
 80008d4:	23e7      	movs	r3, #231	@ 0xe7
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	5cd3      	ldrb	r3, [r2, r3]
 80008da:	0019      	movs	r1, r3
 80008dc:	4a53      	ldr	r2, [pc, #332]	@ (8000a2c <parse_frame+0x1b8>)
 80008de:	232a      	movs	r3, #42	@ 0x2a
 80008e0:	434b      	muls	r3, r1
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	3308      	adds	r3, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

            strncpy(ve_data.fields[ve_data.field_count].value, value, VALUE_SIZE - 1);
 80008ea:	4a50      	ldr	r2, [pc, #320]	@ (8000a2c <parse_frame+0x1b8>)
 80008ec:	23e7      	movs	r3, #231	@ 0xe7
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	001a      	movs	r2, r3
 80008f4:	232a      	movs	r3, #42	@ 0x2a
 80008f6:	4353      	muls	r3, r2
 80008f8:	3308      	adds	r3, #8
 80008fa:	001a      	movs	r2, r3
 80008fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000a2c <parse_frame+0x1b8>)
 80008fe:	18d3      	adds	r3, r2, r3
 8000900:	3301      	adds	r3, #1
 8000902:	6939      	ldr	r1, [r7, #16]
 8000904:	2220      	movs	r2, #32
 8000906:	0018      	movs	r0, r3
 8000908:	f003 f8b2 	bl	8003a70 <strncpy>
            ve_data.fields[ve_data.field_count].value[VALUE_SIZE - 1] = '\0'; // Ensure null termination
 800090c:	4a47      	ldr	r2, [pc, #284]	@ (8000a2c <parse_frame+0x1b8>)
 800090e:	23e7      	movs	r3, #231	@ 0xe7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	0018      	movs	r0, r3
 8000916:	4a45      	ldr	r2, [pc, #276]	@ (8000a2c <parse_frame+0x1b8>)
 8000918:	2129      	movs	r1, #41	@ 0x29
 800091a:	232a      	movs	r3, #42	@ 0x2a
 800091c:	4343      	muls	r3, r0
 800091e:	18d3      	adds	r3, r2, r3
 8000920:	185b      	adds	r3, r3, r1
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]

            ve_data.field_count++;
 8000926:	4a41      	ldr	r2, [pc, #260]	@ (8000a2c <parse_frame+0x1b8>)
 8000928:	23e7      	movs	r3, #231	@ 0xe7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	3301      	adds	r3, #1
 8000930:	b2d9      	uxtb	r1, r3
 8000932:	4a3e      	ldr	r2, [pc, #248]	@ (8000a2c <parse_frame+0x1b8>)
 8000934:	23e7      	movs	r3, #231	@ 0xe7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	54d1      	strb	r1, [r2, r3]
        }

        // Restore the '\r\n' characters and move to the next line
        *line_end = '\r';
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	220d      	movs	r2, #13
 800093e:	701a      	strb	r2, [r3, #0]
        line_start = line_end + 2; // Move to the character after the '\r\n'
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3302      	adds	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
    while ((line_end = strstr(line_start, "\r\n")) != NULL && ve_data.field_count < MAX_FIELDS)
 8000946:	4a3a      	ldr	r2, [pc, #232]	@ (8000a30 <parse_frame+0x1bc>)
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f003 f8a3 	bl	8003a98 <strstr>
 8000952:	0003      	movs	r3, r0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <parse_frame+0xf4>
 800095c:	4a33      	ldr	r2, [pc, #204]	@ (8000a2c <parse_frame+0x1b8>)
 800095e:	23e7      	movs	r3, #231	@ 0xe7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	5cd3      	ldrb	r3, [r2, r3]
 8000964:	2b15      	cmp	r3, #21
 8000966:	d991      	bls.n	800088c <parse_frame+0x18>
    }

    // Handle the last line if there's no trailing \r\n
    if (*line_start != '\0' && ve_data.field_count < MAX_FIELDS)
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d059      	beq.n	8000a24 <parse_frame+0x1b0>
 8000970:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <parse_frame+0x1b8>)
 8000972:	23e7      	movs	r3, #231	@ 0xe7
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	2b15      	cmp	r3, #21
 800097a:	d853      	bhi.n	8000a24 <parse_frame+0x1b0>
    {
        char *label = line_start;
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	60fb      	str	r3, [r7, #12]
        char *value = strchr(line_start, '\t');
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2109      	movs	r1, #9
 8000984:	0018      	movs	r0, r3
 8000986:	f003 f865 	bl	8003a54 <strchr>
 800098a:	0003      	movs	r3, r0
 800098c:	60bb      	str	r3, [r7, #8]

        if (value)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d047      	beq.n	8000a24 <parse_frame+0x1b0>
        {
            *value = '\0';
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
            value++;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]

            strncpy(ve_data.fields[ve_data.field_count].label, label, LABEL_SIZE - 1);
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <parse_frame+0x1b8>)
 80009a2:	23e7      	movs	r3, #231	@ 0xe7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	001a      	movs	r2, r3
 80009aa:	232a      	movs	r3, #42	@ 0x2a
 80009ac:	435a      	muls	r2, r3
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <parse_frame+0x1b8>)
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	2208      	movs	r2, #8
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 f85a 	bl	8003a70 <strncpy>
            ve_data.fields[ve_data.field_count].label[LABEL_SIZE - 1] = '\0'; // Ensure null termination
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <parse_frame+0x1b8>)
 80009be:	23e7      	movs	r3, #231	@ 0xe7
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	0019      	movs	r1, r3
 80009c6:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <parse_frame+0x1b8>)
 80009c8:	232a      	movs	r3, #42	@ 0x2a
 80009ca:	434b      	muls	r3, r1
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	3308      	adds	r3, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]

            strncpy(ve_data.fields[ve_data.field_count].value, value, VALUE_SIZE - 1);
 80009d4:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <parse_frame+0x1b8>)
 80009d6:	23e7      	movs	r3, #231	@ 0xe7
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	001a      	movs	r2, r3
 80009de:	232a      	movs	r3, #42	@ 0x2a
 80009e0:	4353      	muls	r3, r2
 80009e2:	3308      	adds	r3, #8
 80009e4:	001a      	movs	r2, r3
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <parse_frame+0x1b8>)
 80009e8:	18d3      	adds	r3, r2, r3
 80009ea:	3301      	adds	r3, #1
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	2220      	movs	r2, #32
 80009f0:	0018      	movs	r0, r3
 80009f2:	f003 f83d 	bl	8003a70 <strncpy>
            ve_data.fields[ve_data.field_count].value[VALUE_SIZE - 1] = '\0'; // Ensure null termination
 80009f6:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <parse_frame+0x1b8>)
 80009f8:	23e7      	movs	r3, #231	@ 0xe7
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	0018      	movs	r0, r3
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <parse_frame+0x1b8>)
 8000a02:	2129      	movs	r1, #41	@ 0x29
 8000a04:	232a      	movs	r3, #42	@ 0x2a
 8000a06:	4343      	muls	r3, r0
 8000a08:	18d3      	adds	r3, r2, r3
 8000a0a:	185b      	adds	r3, r3, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

            ve_data.field_count++;
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <parse_frame+0x1b8>)
 8000a12:	23e7      	movs	r3, #231	@ 0xe7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	5cd3      	ldrb	r3, [r2, r3]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2d9      	uxtb	r1, r3
 8000a1c:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <parse_frame+0x1b8>)
 8000a1e:	23e7      	movs	r3, #231	@ 0xe7
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	54d1      	strb	r1, [r2, r3]
        }
    }
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b008      	add	sp, #32
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000028 	.word	0x20000028
 8000a30:	08003b48 	.word	0x08003b48

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a58:	2180      	movs	r1, #128	@ 0x80
 8000a5a:	0549      	lsls	r1, r1, #21
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	055b      	lsls	r3, r3, #21
 8000a68:	4013      	ands	r3, r2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	e7fd      	b.n	8000a80 <NMI_Handler+0x4>

08000a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	e7fd      	b.n	8000a88 <HardFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa4:	f000 fb98 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
  UART_IRQ_HANDLER();
 8000ab2:	f000 f841 	bl	8000b38 <UART_IRQ_HANDLER>
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */

  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <LL_USART_IsActiveFlag_ORE>:
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d101      	bne.n	8000ade <LL_USART_IsActiveFlag_ORE+0x18>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <LL_USART_IsActiveFlag_ORE+0x1a>
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	2220      	movs	r2, #32
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b20      	cmp	r3, #32
 8000afa:	d101      	bne.n	8000b00 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <LL_USART_ClearFlag_ORE>:
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2208      	movs	r2, #8
 8000b16:	621a      	str	r2, [r3, #32]
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2c:	b2db      	uxtb	r3, r3
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <UART_IRQ_HANDLER>:
volatile uint8_t checksum_index = 0;
volatile char g_uart_buffer[BUFFER_SIZE];
volatile uint8_t is_checksum_received = 0;

void UART_IRQ_HANDLER(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(USART3))
 8000b3e:	4b33      	ldr	r3, [pc, #204]	@ (8000c0c <UART_IRQ_HANDLER+0xd4>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ffd1 	bl	8000ae8 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d051      	beq.n	8000bee <UART_IRQ_HANDLER+0xb6>
    {
        char received_char = LL_USART_ReceiveData8(USART3);
 8000b4a:	1dfc      	adds	r4, r7, #7
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <UART_IRQ_HANDLER+0xd4>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff ffe6 	bl	8000b20 <LL_USART_ReceiveData8>
 8000b54:	0003      	movs	r3, r0
 8000b56:	7023      	strb	r3, [r4, #0]


        if (uart_index < BUFFER_SIZE - 1)
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <UART_IRQ_HANDLER+0xd8>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
        {
        uart_buffer[uart_index++] = received_char;
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <UART_IRQ_HANDLER+0xd8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	b2d1      	uxtb	r1, r2
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <UART_IRQ_HANDLER+0xd8>)
 8000b68:	7011      	strb	r1, [r2, #0]
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <UART_IRQ_HANDLER+0xdc>)
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	545a      	strb	r2, [r3, r1]

        checksum_calculated = (checksum_calculated + (uint8_t)received_char);
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <UART_IRQ_HANDLER+0xe0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	18d3      	adds	r3, r2, r3
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <UART_IRQ_HANDLER+0xe0>)
 8000b84:	701a      	strb	r2, [r3, #0]


        if (!is_checksum_received)
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <UART_IRQ_HANDLER+0xe4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10b      	bne.n	8000ba8 <UART_IRQ_HANDLER+0x70>
        {
            // Calculate checksum by adding the received character
            //checksum_calculated = (checksum_calculated + (uint8_t)received_char) & 256;

            // Check for the "Checksum\t" field in the buffer
            if (strstr(uart_buffer, "Checksum\t") != NULL)
 8000b90:	4a23      	ldr	r2, [pc, #140]	@ (8000c20 <UART_IRQ_HANDLER+0xe8>)
 8000b92:	4b20      	ldr	r3, [pc, #128]	@ (8000c14 <UART_IRQ_HANDLER+0xdc>)
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f002 ff7e 	bl	8003a98 <strstr>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d026      	beq.n	8000bee <UART_IRQ_HANDLER+0xb6>
            {
            // Indicate that the checksum string has been detected, so the next character is the checksum
            is_checksum_received = 1;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <UART_IRQ_HANDLER+0xe4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e022      	b.n	8000bee <UART_IRQ_HANDLER+0xb6>
            }
        }
        else
        {
            // Once the checksum string has been detected, the next character is the actual checksum
            checksum_received = (uint8_t)received_char;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <UART_IRQ_HANDLER+0xec>)
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	701a      	strb	r2, [r3, #0]

            // Calculate checksum by adding the received character
            checksum_calculated = (checksum_calculated + (uint8_t)received_char) %256;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <UART_IRQ_HANDLER+0xe0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	18d3      	adds	r3, r2, r3
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <UART_IRQ_HANDLER+0xe0>)
 8000bc0:	701a      	strb	r2, [r3, #0]


            // Mark the frame as ready for processing in the main loop
            frame_ready = 1;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <UART_IRQ_HANDLER+0xf0>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]

            //put local buffer into global buffer for main function to transmit
            memcpy(g_uart_buffer, uart_buffer, BUFFER_SIZE);
 8000bc8:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <UART_IRQ_HANDLER+0xf4>)
 8000bca:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <UART_IRQ_HANDLER+0xdc>)
 8000bcc:	0010      	movs	r0, r2
 8000bce:	0019      	movs	r1, r3
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	f002 ff99 	bl	8003b0c <memcpy>

            //set local buffer to 0 for new frame
            memset(uart_buffer, 0, BUFFER_SIZE);
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	009a      	lsls	r2, r3, #2
 8000bde:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <UART_IRQ_HANDLER+0xdc>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 ff2e 	bl	8003a44 <memset>

            //reset checksum received flag
            is_checksum_received = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <UART_IRQ_HANDLER+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
        }
    }


      // Optional: Check for errors like Overrun (ORE) and clear them if needed
    if (LL_USART_IsActiveFlag_ORE(USART3))
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <UART_IRQ_HANDLER+0xd4>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff ff68 	bl	8000ac6 <LL_USART_IsActiveFlag_ORE>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d003      	beq.n	8000c02 <UART_IRQ_HANDLER+0xca>
    {
        LL_USART_ClearFlag_ORE(USART3);  // Clear overrun error flag
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <UART_IRQ_HANDLER+0xd4>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff84 	bl	8000b0a <LL_USART_ClearFlag_ORE>
    }

}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b003      	add	sp, #12
 8000c08:	bd90      	pop	{r4, r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	200005c8 	.word	0x200005c8
 8000c14:	200003c8 	.word	0x200003c8
 8000c18:	200005ca 	.word	0x200005ca
 8000c1c:	200007cc 	.word	0x200007cc
 8000c20:	08003b4c 	.word	0x08003b4c
 8000c24:	200005cb 	.word	0x200005cb
 8000c28:	200005c9 	.word	0x200005c9
 8000c2c:	200005cc 	.word	0x200005cc

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0002      	movs	r2, r0
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c42:	d809      	bhi.n	8000c58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_EnableIRQ+0x30>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	4091      	lsls	r1, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c78:	d828      	bhi.n	8000ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <__NVIC_SetPriority+0xd4>)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	33c0      	adds	r3, #192	@ 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	589b      	ldr	r3, [r3, r2]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	@ 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	@ 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	481f      	ldr	r0, [pc, #124]	@ (8000d38 <__NVIC_SetPriority+0xd4>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	33c0      	adds	r3, #192	@ 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cca:	e031      	b.n	8000d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <__NVIC_SetPriority+0xd8>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3306      	adds	r3, #6
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	@ 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	@ 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <__NVIC_SetPriority+0xd8>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	3b08      	subs	r3, #8
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	430a      	orrs	r2, r1
 8000d26:	3306      	adds	r3, #6
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18c3      	adds	r3, r0, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <LL_USART_Enable>:
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LL_USART_ConfigAsyncMode>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <LL_USART_ConfigAsyncMode+0x2c>)
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	222a      	movs	r2, #42	@ 0x2a
 8000d76:	4393      	bics	r3, r2
 8000d78:	001a      	movs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	ffffb7ff 	.word	0xffffb7ff

08000d8c <LL_USART_IsActiveFlag_TEACK>:
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69da      	ldr	r2, [r3, #28]
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	039b      	lsls	r3, r3, #14
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	039b      	lsls	r3, r3, #14
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d101      	bne.n	8000daa <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <LL_USART_IsActiveFlag_TEACK+0x20>
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b002      	add	sp, #8
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LL_USART_IsActiveFlag_REACK>:
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69da      	ldr	r2, [r3, #28]
 8000dc0:	2380      	movs	r3, #128	@ 0x80
 8000dc2:	03db      	lsls	r3, r3, #15
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	03db      	lsls	r3, r3, #15
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d101      	bne.n	8000dd2 <LL_USART_IsActiveFlag_REACK+0x1e>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <LL_USART_IsActiveFlag_REACK+0x20>
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <LL_APB1_GRP1_EnableClock+0x28>)
 8000de6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <LL_APB1_GRP1_EnableClock+0x28>)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <LL_APB1_GRP1_EnableClock+0x28>)
 8000df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4013      	ands	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000

08000e08 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <LL_IOP_GRP1_EnableClock+0x28>)
 8000e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e3a:	4a24      	ldr	r2, [pc, #144]	@ (8000ecc <MX_USART2_UART_Init+0x98>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e40:	22e1      	movs	r2, #225	@ 0xe1
 8000e42:	0252      	lsls	r2, r2, #9
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 fac4 	bl	800240c <HAL_UART_Init>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e88:	f7ff fcee 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 f8e1 	bl	8003058 <HAL_UARTEx_SetTxFifoThreshold>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f7ff fce5 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f002 f918 	bl	80030d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f7ff fcdc 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 f896 	bl	8002fe4 <HAL_UARTEx_DisableFifoMode>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f7ff fcd4 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	200007d0 	.word	0x200007d0
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08f      	sub	sp, #60	@ 0x3c
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ed6:	2418      	movs	r4, #24
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	0018      	movs	r0, r3
 8000edc:	2320      	movs	r3, #32
 8000ede:	001a      	movs	r2, r3
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f002 fdaf 	bl	8003a44 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2318      	movs	r3, #24
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f002 fda8 	bl	8003a44 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	02db      	lsls	r3, r3, #11
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ff6f 	bl	8000ddc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff ff82 	bl	8000e08 <LL_IOP_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC4   ------> USART3_TX
  PC5   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2210      	movs	r2, #16
 8000f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	003b      	movs	r3, r7
 8000f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fe8 <MX_USART3_UART_Init+0x118>)
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	0010      	movs	r0, r2
 8000f30:	f002 fa2b 	bl	800338a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2220      	movs	r2, #32
 8000f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f46:	003b      	movs	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f4c:	003b      	movs	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000f52:	003b      	movs	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	003b      	movs	r3, r7
 8000f5a:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <MX_USART3_UART_Init+0x118>)
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	0010      	movs	r0, r2
 8000f60:	f002 fa13 	bl	800338a <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	201d      	movs	r0, #29
 8000f68:	f7ff fe7c 	bl	8000c64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000f6c:	201d      	movs	r0, #29
 8000f6e:	f7ff fe5f 	bl	8000c30 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2296      	movs	r2, #150	@ 0x96
 8000f7c:	01d2      	lsls	r2, r2, #7
 8000f7e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f80:	0021      	movs	r1, r4
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART3, &USART_InitStruct);
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <MX_USART3_UART_Init+0x11c>)
 8000faa:	0019      	movs	r1, r3
 8000fac:	0010      	movs	r0, r2
 8000fae:	f002 fcbb 	bl	8003928 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_USART3_UART_Init+0x11c>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff fed1 	bl	8000d5c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */
 
  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_USART3_UART_Init+0x11c>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff febf 	bl	8000d40 <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_USART3_UART_Init+0x11c>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff fee0 	bl	8000d8c <LL_USART_IsActiveFlag_TEACK>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d0f9      	beq.n	8000fc4 <MX_USART3_UART_Init+0xf4>
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_USART3_UART_Init+0x11c>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff feee 	bl	8000db4 <LL_USART_IsActiveFlag_REACK>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d0f3      	beq.n	8000fc4 <MX_USART3_UART_Init+0xf4>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b00f      	add	sp, #60	@ 0x3c
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	50000800 	.word	0x50000800
 8000fec:	40004800 	.word	0x40004800

08000ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b097      	sub	sp, #92	@ 0x5c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	2344      	movs	r3, #68	@ 0x44
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	2314      	movs	r3, #20
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f002 fd1e 	bl	8003a44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	2410      	movs	r4, #16
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2334      	movs	r3, #52	@ 0x34
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f002 fd16 	bl	8003a44 <memset>
  if(uartHandle->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a22      	ldr	r2, [pc, #136]	@ (80010a8 <HAL_UART_MspInit+0xb8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d13e      	bne.n	80010a0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2202      	movs	r2, #2
 8001026:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	f001 f833 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800103a:	f7ff fc15 	bl	8000868 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 8001040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 8001044:	2180      	movs	r1, #128	@ 0x80
 8001046:	0289      	lsls	r1, r1, #10
 8001048:	430a      	orrs	r2, r1
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 800104e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 800105c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 8001060:	2101      	movs	r1, #1
 8001062:	430a      	orrs	r2, r1
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0xbc>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106a:	2201      	movs	r2, #1
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001072:	2144      	movs	r1, #68	@ 0x44
 8001074:	187b      	adds	r3, r7, r1
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2202      	movs	r2, #2
 800107e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2201      	movs	r2, #1
 8001090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	187a      	adds	r2, r7, r1
 8001094:	23a0      	movs	r3, #160	@ 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f000 f96c 	bl	8001378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b017      	add	sp, #92	@ 0x5c
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b4:	f7ff fd02 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010de:	f002 fcf1 	bl	8003ac4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010e2:	f7ff fb0b 	bl	80006fc <main>

080010e6 <LoopForever>:

LoopForever:
  b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
ldr   r0, =_estack
 80010e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f4:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 80010f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010fc:	20000868 	.word	0x20000868

08001100 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_COMP_IRQHandler>
	...

08001104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_Init+0x3c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Init+0x3c>)
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	0049      	lsls	r1, r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f810 	bl	8001144 <HAL_InitTick>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d003      	beq.n	8001130 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e001      	b.n	8001134 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fc80 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_InitTick+0x88>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02b      	beq.n	80011b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_InitTick+0x8c>)
 800115e:	681c      	ldr	r4, [r3, #0]
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_InitTick+0x88>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
 8001166:	23fa      	movs	r3, #250	@ 0xfa
 8001168:	0098      	lsls	r0, r3, #2
 800116a:	f7fe ffcb 	bl	8000104 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	0019      	movs	r1, r3
 8001172:	0020      	movs	r0, r4
 8001174:	f7fe ffc6 	bl	8000104 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f8ef 	bl	800135e <HAL_SYSTICK_Config>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d112      	bne.n	80011aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d80a      	bhi.n	80011a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f8ce 	bl	8001334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_InitTick+0x90>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00d      	b.n	80011bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b005      	add	sp, #20
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	18d2      	adds	r2, r2, r3
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_IncTick+0x20>)
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000864 	.word	0x20000864

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000864 	.word	0x20000864

08001210 <__NVIC_SetPriority>:
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	@ 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	@ (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	@ 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	@ 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	@ 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	@ (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	@ 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	@ 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	@ 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	045b      	lsls	r3, r3, #17
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2301      	movs	r3, #1
 8001302:	e010      	b.n	8001326 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <SysTick_Config+0x44>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	3a01      	subs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	2103      	movs	r1, #3
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff7c 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x44>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x44>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ffbf 	bl	80012ec <SysTick_Config>
 800136e:	0003      	movs	r3, r0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	e147      	b.n	8001618 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d100      	bne.n	80013a0 <HAL_GPIO_Init+0x28>
 800139e:	e138      	b.n	8001612 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x40>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	43da      	mvns	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	0013      	movs	r3, r2
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	2201      	movs	r2, #1
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	4013      	ands	r3, r2
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	43da      	mvns	r2, r3
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	4013      	ands	r3, r2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	58d3      	ldr	r3, [r2, r3]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2207      	movs	r2, #7
 8001474:	4013      	ands	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2107      	movs	r1, #7
 800148e:	400b      	ands	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	6939      	ldr	r1, [r7, #16]
 80014a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	401a      	ands	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	23c0      	movs	r3, #192	@ 0xc0
 80014e4:	029b      	lsls	r3, r3, #10
 80014e6:	4013      	ands	r3, r2
 80014e8:	d100      	bne.n	80014ec <HAL_GPIO_Init+0x174>
 80014ea:	e092      	b.n	8001612 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014ec:	4a50      	ldr	r2, [pc, #320]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3318      	adds	r3, #24
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	589b      	ldr	r3, [r3, r2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2203      	movs	r2, #3
 80014fe:	4013      	ands	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	220f      	movs	r2, #15
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	23a0      	movs	r3, #160	@ 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	429a      	cmp	r2, r3
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x1ca>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a45      	ldr	r2, [pc, #276]	@ (8001634 <HAL_GPIO_Init+0x2bc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1c6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a44      	ldr	r2, [pc, #272]	@ (8001638 <HAL_GPIO_Init+0x2c0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1c2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a43      	ldr	r2, [pc, #268]	@ (800163c <HAL_GPIO_Init+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1be>
 8001532:	2303      	movs	r3, #3
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 8001536:	2305      	movs	r3, #5
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x1cc>
 8001542:	2300      	movs	r3, #0
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	2103      	movs	r1, #3
 8001548:	400a      	ands	r2, r1
 800154a:	00d2      	lsls	r2, r2, #3
 800154c:	4093      	lsls	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001554:	4936      	ldr	r1, [pc, #216]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3318      	adds	r3, #24
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001562:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	035b      	lsls	r3, r3, #13
 800157a:	4013      	ands	r3, r2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001586:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800158c:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	039b      	lsls	r3, r3, #14
 80015a4:	4013      	ands	r3, r2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80015b8:	2384      	movs	r3, #132	@ 0x84
 80015ba:	58d3      	ldr	r3, [r2, r3]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015dc:	4914      	ldr	r1, [pc, #80]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80015de:	2284      	movs	r2, #132	@ 0x84
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	58d3      	ldr	r3, [r2, r3]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43da      	mvns	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	4013      	ands	r3, r2
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800160a:	4909      	ldr	r1, [pc, #36]	@ (8001630 <HAL_GPIO_Init+0x2b8>)
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	40da      	lsrs	r2, r3
 8001620:	1e13      	subs	r3, r2, #0
 8001622:	d000      	beq.n	8001626 <HAL_GPIO_Init+0x2ae>
 8001624:	e6b0      	b.n	8001388 <HAL_GPIO_Init+0x10>
  }
}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021800 	.word	0x40021800
 8001634:	50000400 	.word	0x50000400
 8001638:	50000800 	.word	0x50000800
 800163c:	50000c00 	.word	0x50000c00

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	0008      	movs	r0, r1
 800164a:	0011      	movs	r1, r2
 800164c:	1cbb      	adds	r3, r7, #2
 800164e:	1c02      	adds	r2, r0, #0
 8001650:	801a      	strh	r2, [r3, #0]
 8001652:	1c7b      	adds	r3, r7, #1
 8001654:	1c0a      	adds	r2, r1, #0
 8001656:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001658:	1c7b      	adds	r3, r7, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001660:	1cbb      	adds	r3, r7, #2
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	1cbb      	adds	r3, r7, #2
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d11f      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	0013      	movs	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4912      	ldr	r1, [pc, #72]	@ (80016f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd28 	bl	8000104 <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	e008      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e001      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e009      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	401a      	ands	r2, r3
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	429a      	cmp	r2, r3
 80016de:	d0ed      	beq.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	40007000 	.word	0x40007000
 80016f0:	fffff9ff 	.word	0xfffff9ff
 80016f4:	20000000 	.word	0x20000000
 80016f8:	000f4240 	.word	0x000f4240

080016fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	23e0      	movs	r3, #224	@ 0xe0
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	4013      	ands	r3, r2
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e2fe      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x1e>
 8001730:	e07c      	b.n	800182c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4bc3      	ldr	r3, [pc, #780]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	@ 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4bc0      	ldr	r3, [pc, #768]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d002      	beq.n	8001758 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4bb9      	ldr	r3, [pc, #740]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4013      	ands	r3, r2
 8001762:	d062      	beq.n	800182a <HAL_RCC_OscConfig+0x116>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d15e      	bne.n	800182a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2d9      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	429a      	cmp	r2, r3
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x78>
 800177c:	4bb0      	ldr	r3, [pc, #704]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4baf      	ldr	r3, [pc, #700]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	0249      	lsls	r1, r1, #9
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e020      	b.n	80017ce <HAL_RCC_OscConfig+0xba>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	23a0      	movs	r3, #160	@ 0xa0
 8001792:	02db      	lsls	r3, r3, #11
 8001794:	429a      	cmp	r2, r3
 8001796:	d10e      	bne.n	80017b6 <HAL_RCC_OscConfig+0xa2>
 8001798:	4ba9      	ldr	r3, [pc, #676]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4ba8      	ldr	r3, [pc, #672]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	02c9      	lsls	r1, r1, #11
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4ba5      	ldr	r3, [pc, #660]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	0249      	lsls	r1, r1, #9
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0xba>
 80017b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	49a1      	ldr	r1, [pc, #644]	@ (8001a44 <HAL_RCC_OscConfig+0x330>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017c8:	499f      	ldr	r1, [pc, #636]	@ (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fd11 	bl	80011fc <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fd0c 	bl	80011fc <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e298      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	4b93      	ldr	r3, [pc, #588]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xcc>
 80017fe:	e015      	b.n	800182c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fcfc 	bl	80011fc <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff fcf7 	bl	80011fc <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	@ 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e283      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181c:	4b88      	ldr	r3, [pc, #544]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0xf6>
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_RCC_OscConfig+0x124>
 8001836:	e099      	b.n	800196c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001838:	4b81      	ldr	r3, [pc, #516]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2238      	movs	r2, #56	@ 0x38
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001842:	4b7f      	ldr	r3, [pc, #508]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2203      	movs	r2, #3
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0x144>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d002      	beq.n	800185e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d135      	bne.n	80018ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185e:	4b78      	ldr	r3, [pc, #480]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4013      	ands	r3, r2
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x162>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e256      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a74      	ldr	r2, [pc, #464]	@ (8001a4c <HAL_RCC_OscConfig+0x338>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	021a      	lsls	r2, r3, #8
 8001886:	4b6e      	ldr	r3, [pc, #440]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d112      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001892:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6e      	ldr	r2, [pc, #440]	@ (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	4b67      	ldr	r3, [pc, #412]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018a6:	4b66      	ldr	r3, [pc, #408]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	2207      	movs	r2, #7
 80018ae:	4013      	ands	r3, r2
 80018b0:	4a68      	ldr	r2, [pc, #416]	@ (8001a54 <HAL_RCC_OscConfig+0x340>)
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <HAL_RCC_OscConfig+0x344>)
 80018b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018b8:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <HAL_RCC_OscConfig+0x348>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fc41 	bl	8001144 <HAL_InitTick>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d051      	beq.n	800196a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e22c      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d030      	beq.n	8001934 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	4b57      	ldr	r3, [pc, #348]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018e6:	4b56      	ldr	r3, [pc, #344]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b55      	ldr	r3, [pc, #340]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc82 	bl	80011fc <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc7d 	bl	80011fc <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e209      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b48      	ldr	r3, [pc, #288]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	@ (8001a4c <HAL_RCC_OscConfig+0x338>)
 8001922:	4013      	ands	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	021a      	lsls	r2, r3, #8
 800192c:	4b44      	ldr	r3, [pc, #272]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	4b42      	ldr	r3, [pc, #264]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800193a:	4949      	ldr	r1, [pc, #292]	@ (8001a60 <HAL_RCC_OscConfig+0x34c>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fc5c 	bl	80011fc <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fc57 	bl	80011fc <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1e3      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b38      	ldr	r3, [pc, #224]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4013      	ands	r3, r2
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x236>
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	4013      	ands	r3, r2
 8001974:	d047      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001976:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2238      	movs	r2, #56	@ 0x38
 800197c:	4013      	ands	r3, r2
 800197e:	2b18      	cmp	r3, #24
 8001980:	d10a      	bne.n	8001998 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001982:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d138      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e1c5      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d019      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fc26 	bl	80011fc <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc21 	bl	80011fc <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1ad      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f1      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2a2>
 80019d2:	e018      	b.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019da:	2101      	movs	r1, #1
 80019dc:	438a      	bics	r2, r1
 80019de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc0c 	bl	80011fc <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fc07 	bl	80011fc <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e193      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f1      	bne.n	80019ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2fe>
 8001a10:	e0c6      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	231f      	movs	r3, #31
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2238      	movs	r2, #56	@ 0x38
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d11e      	bne.n	8001a64 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0x31e>
 8001a30:	e0b6      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d000      	beq.n	8001a3c <HAL_RCC_OscConfig+0x328>
 8001a3a:	e0b1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e171      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	fffeffff 	.word	0xfffeffff
 8001a48:	fffbffff 	.word	0xfffbffff
 8001a4c:	ffff80ff 	.word	0xffff80ff
 8001a50:	ffffc7ff 	.word	0xffffc7ff
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a64:	4bb1      	ldr	r3, [pc, #708]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x360>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x362>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d011      	beq.n	8001a9e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4bac      	ldr	r3, [pc, #688]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a7e:	4bab      	ldr	r3, [pc, #684]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0549      	lsls	r1, r1, #21
 8001a84:	430a      	orrs	r2, r1
 8001a86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a88:	4ba8      	ldr	r3, [pc, #672]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a96:	231f      	movs	r3, #31
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	4ba4      	ldr	r3, [pc, #656]	@ (8001d30 <HAL_RCC_OscConfig+0x61c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aaa:	4ba1      	ldr	r3, [pc, #644]	@ (8001d30 <HAL_RCC_OscConfig+0x61c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4ba0      	ldr	r3, [pc, #640]	@ (8001d30 <HAL_RCC_OscConfig+0x61c>)
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fba0 	bl	80011fc <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fb9b 	bl	80011fc <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e127      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b96      	ldr	r3, [pc, #600]	@ (8001d30 <HAL_RCC_OscConfig+0x61c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3e2>
 8001ae8:	4b90      	ldr	r3, [pc, #576]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aec:	4b8f      	ldr	r3, [pc, #572]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x404>
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b02:	4b8a      	ldr	r3, [pc, #552]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b04:	2104      	movs	r1, #4
 8001b06:	430a      	orrs	r2, r1
 8001b08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b0e:	4b87      	ldr	r3, [pc, #540]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
 8001b18:	4b84      	ldr	r3, [pc, #528]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b1c:	4b83      	ldr	r3, [pc, #524]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	438a      	bics	r2, r1
 8001b22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b24:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b28:	4b80      	ldr	r3, [pc, #512]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb60 	bl	80011fc <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b40:	e009      	b.n	8001b56 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff fb5b 	bl	80011fc <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4a79      	ldr	r2, [pc, #484]	@ (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0e6      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b75      	ldr	r3, [pc, #468]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x42e>
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb4b 	bl	80011fc <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fb46 	bl	80011fc <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	4a6f      	ldr	r2, [pc, #444]	@ (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0d1      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b8a:	231f      	movs	r3, #31
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b98:	4b64      	ldr	r3, [pc, #400]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b9a:	4967      	ldr	r1, [pc, #412]	@ (8001d38 <HAL_RCC_OscConfig+0x624>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x496>
 8001ba8:	e0bb      	b.n	8001d22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001baa:	4b60      	ldr	r3, [pc, #384]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	@ 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d100      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4a4>
 8001bb6:	e07b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d156      	bne.n	8001c6e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001bc6:	495d      	ldr	r1, [pc, #372]	@ (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb16 	bl	80011fc <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff fb11 	bl	80011fc <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e09d      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b50      	ldr	r3, [pc, #320]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	049b      	lsls	r3, r3, #18
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	@ (8001d40 <HAL_RCC_OscConfig+0x62c>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c20:	431a      	orrs	r2, r3
 8001c22:	4b42      	ldr	r3, [pc, #264]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	0449      	lsls	r1, r1, #17
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c36:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c3c:	2180      	movs	r1, #128	@ 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fada 	bl	80011fc <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fad5 	bl	80011fc <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e061      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	049b      	lsls	r3, r3, #18
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x53a>
 8001c6c:	e059      	b.n	8001d22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c74:	4931      	ldr	r1, [pc, #196]	@ (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c76:	400a      	ands	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fabf 	bl	80011fc <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff faba 	bl	80011fc <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e046      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	049b      	lsls	r3, r3, #18
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001ca8:	4926      	ldr	r1, [pc, #152]	@ (8001d44 <HAL_RCC_OscConfig+0x630>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	e038      	b.n	8001d22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e033      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d126      	bne.n	8001d1e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2270      	movs	r2, #112	@ 0x70
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11f      	bne.n	8001d1e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	23fe      	movs	r3, #254	@ 0xfe
 8001ce2:	01db      	lsls	r3, r3, #7
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d116      	bne.n	8001d1e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	23f8      	movs	r3, #248	@ 0xf8
 8001cf4:	039b      	lsls	r3, r3, #14
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d10e      	bne.n	8001d1e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	23e0      	movs	r3, #224	@ 0xe0
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	0f5b      	lsrs	r3, r3, #29
 8001d14:	075a      	lsls	r2, r3, #29
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b008      	add	sp, #32
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	00001388 	.word	0x00001388
 8001d38:	efffffff 	.word	0xefffffff
 8001d3c:	feffffff 	.word	0xfeffffff
 8001d40:	11c1808c 	.word	0x11c1808c
 8001d44:	eefefffc 	.word	0xeefefffc

08001d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0e9      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b76      	ldr	r3, [pc, #472]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2207      	movs	r2, #7
 8001d62:	4013      	ands	r3, r2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d91e      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b73      	ldr	r3, [pc, #460]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2207      	movs	r2, #7
 8001d70:	4393      	bics	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b70      	ldr	r3, [pc, #448]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d7c:	f7ff fa3e 	bl	80011fc <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7ff fa39 	bl	80011fc <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a6a      	ldr	r2, [pc, #424]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e0ca      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d9a:	4b67      	ldr	r3, [pc, #412]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2207      	movs	r2, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1ee      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	d006      	beq.n	8001dca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dbc:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc2:	21e0      	movs	r1, #224	@ 0xe0
 8001dc4:	01c9      	lsls	r1, r1, #7
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4a5d      	ldr	r2, [pc, #372]	@ (8001f44 <HAL_RCC_ClockConfig+0x1fc>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	d057      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d12b      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e097      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b4d      	ldr	r3, [pc, #308]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	049b      	lsls	r3, r3, #18
 8001e10:	4013      	ands	r3, r2
 8001e12:	d11f      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e08b      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d113      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e07f      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e38:	4b41      	ldr	r3, [pc, #260]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e074      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e06d      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e54:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2207      	movs	r2, #7
 8001e5a:	4393      	bics	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e68:	f7ff f9c8 	bl	80011fc <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7ff f9c3 	bl	80011fc <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e054      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2238      	movs	r2, #56	@ 0x38
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1ec      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d21e      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2207      	movs	r2, #7
 8001eac:	4393      	bics	r3, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f9a0 	bl	80011fc <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec0:	e009      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec2:	f7ff f99b 	bl	80011fc <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e02c      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2207      	movs	r2, #7
 8001edc:	4013      	ands	r3, r2
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a15      	ldr	r2, [pc, #84]	@ (8001f48 <HAL_RCC_ClockConfig+0x200>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f02:	f000 f829 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f06:	0001      	movs	r1, r0
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	220f      	movs	r2, #15
 8001f10:	401a      	ands	r2, r3
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x204>)
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	58d3      	ldr	r3, [r2, r3]
 8001f18:	221f      	movs	r2, #31
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_ClockConfig+0x208>)
 8001f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCC_ClockConfig+0x20c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff f90b 	bl	8001144 <HAL_InitTick>
 8001f2e:	0003      	movs	r3, r0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	40021000 	.word	0x40021000
 8001f44:	fffff0ff 	.word	0xfffff0ff
 8001f48:	ffff8fff 	.word	0xffff8fff
 8001f4c:	08003b58 	.word	0x08003b58
 8001f50:	20000000 	.word	0x20000000
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2238      	movs	r2, #56	@ 0x38
 8001f64:	4013      	ands	r3, r2
 8001f66:	d10f      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0adb      	lsrs	r3, r3, #11
 8001f6e:	2207      	movs	r2, #7
 8001f70:	4013      	ands	r3, r2
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	0013      	movs	r3, r2
 8001f78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	4835      	ldr	r0, [pc, #212]	@ (8002054 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f7e:	f7fe f8c1 	bl	8000104 <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e05d      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2238      	movs	r2, #56	@ 0x38
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f94:	4b30      	ldr	r3, [pc, #192]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e054      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2238      	movs	r2, #56	@ 0x38
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d138      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2203      	movs	r2, #3
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4013      	ands	r3, r2
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	4824      	ldr	r0, [pc, #144]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fc8:	f7fe f89c 	bl	8000104 <__udivsi3>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	0019      	movs	r1, r3
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	227f      	movs	r2, #127	@ 0x7f
 8001fd8:	4013      	ands	r3, r2
 8001fda:	434b      	muls	r3, r1
 8001fdc:	617b      	str	r3, [r7, #20]
        break;
 8001fde:	e00d      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	481c      	ldr	r0, [pc, #112]	@ (8002054 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe4:	f7fe f88e 	bl	8000104 <__udivsi3>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	0019      	movs	r1, r3
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	227f      	movs	r2, #127	@ 0x7f
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	434b      	muls	r3, r1
 8001ff8:	617b      	str	r3, [r7, #20]
        break;
 8001ffa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0f5b      	lsrs	r3, r3, #29
 8002002:	2207      	movs	r2, #7
 8002004:	4013      	ands	r3, r2
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	6978      	ldr	r0, [r7, #20]
 800200e:	f7fe f879 	bl	8000104 <__udivsi3>
 8002012:	0003      	movs	r3, r0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	e015      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2238      	movs	r2, #56	@ 0x38
 800201e:	4013      	ands	r3, r2
 8002020:	2b20      	cmp	r3, #32
 8002022:	d103      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2238      	movs	r2, #56	@ 0x38
 8002032:	4013      	ands	r3, r2
 8002034:	2b18      	cmp	r3, #24
 8002036:	d103      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002038:	23fa      	movs	r3, #250	@ 0xfa
 800203a:	01db      	lsls	r3, r3, #7
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e001      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002044:	693b      	ldr	r3, [r7, #16]
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b006      	add	sp, #24
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	40021000 	.word	0x40021000
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <HAL_RCC_GetHCLKFreq+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002074:	f7ff fff2 	bl	800205c <HAL_RCC_GetHCLKFreq>
 8002078:	0004      	movs	r4, r0
 800207a:	f7ff fb3f 	bl	80016fc <LL_RCC_GetAPB1Prescaler>
 800207e:	0003      	movs	r3, r0
 8002080:	0b1a      	lsrs	r2, r3, #12
 8002082:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	58d3      	ldr	r3, [r2, r3]
 8002088:	221f      	movs	r2, #31
 800208a:	4013      	ands	r3, r2
 800208c:	40dc      	lsrs	r4, r3
 800208e:	0023      	movs	r3, r4
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bdb0      	pop	{r4, r5, r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	08003b98 	.word	0x08003b98

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020a4:	2313      	movs	r3, #19
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020ac:	2312      	movs	r3, #18
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d100      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020c0:	e0a3      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2011      	movs	r0, #17
 80020c4:	183b      	adds	r3, r7, r0
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4bc3      	ldr	r3, [pc, #780]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	4013      	ands	r3, r2
 80020d4:	d110      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4bc0      	ldr	r3, [pc, #768]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020da:	4bbf      	ldr	r3, [pc, #764]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	0549      	lsls	r1, r1, #21
 80020e0:	430a      	orrs	r2, r1
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e4:	4bbc      	ldr	r3, [pc, #752]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4bb8      	ldr	r3, [pc, #736]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4bb7      	ldr	r3, [pc, #732]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020fe:	2180      	movs	r1, #128	@ 0x80
 8002100:	0049      	lsls	r1, r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002106:	f7ff f879 	bl	80011fc <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210e:	e00b      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7ff f874 	bl	80011fc <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d904      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800211e:	2313      	movs	r3, #19
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2203      	movs	r2, #3
 8002124:	701a      	strb	r2, [r3, #0]
        break;
 8002126:	e005      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002128:	4bac      	ldr	r3, [pc, #688]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4013      	ands	r3, r2
 8002132:	d0ed      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002134:	2313      	movs	r3, #19
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d154      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800213e:	4ba6      	ldr	r3, [pc, #664]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002140:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	429a      	cmp	r2, r3
 8002158:	d014      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800215a:	4b9f      	ldr	r3, [pc, #636]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	4aa0      	ldr	r2, [pc, #640]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002160:	4013      	ands	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002164:	4b9c      	ldr	r3, [pc, #624]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002168:	4b9b      	ldr	r3, [pc, #620]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	0249      	lsls	r1, r1, #9
 800216e:	430a      	orrs	r2, r1
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002172:	4b99      	ldr	r3, [pc, #612]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002176:	4b98      	ldr	r3, [pc, #608]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002178:	499a      	ldr	r1, [pc, #616]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800217a:	400a      	ands	r2, r1
 800217c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217e:	4b96      	ldr	r3, [pc, #600]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2201      	movs	r2, #1
 8002188:	4013      	ands	r3, r2
 800218a:	d016      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f836 	bl	80011fc <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	e00c      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7ff f831 	bl	80011fc <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	4a91      	ldr	r2, [pc, #580]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d904      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021a6:	2313      	movs	r3, #19
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2203      	movs	r2, #3
 80021ac:	701a      	strb	r2, [r3, #0]
            break;
 80021ae:	e004      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	4b89      	ldr	r3, [pc, #548]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d0ed      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021ba:	2313      	movs	r3, #19
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c4:	4b84      	ldr	r3, [pc, #528]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	4a85      	ldr	r2, [pc, #532]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021d2:	4b81      	ldr	r3, [pc, #516]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021d8:	e00c      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021da:	2312      	movs	r3, #18
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2213      	movs	r2, #19
 80021e0:	18ba      	adds	r2, r7, r2
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e005      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	2312      	movs	r3, #18
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2213      	movs	r2, #19
 80021ee:	18ba      	adds	r2, r7, r2
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f4:	2311      	movs	r3, #17
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b76      	ldr	r3, [pc, #472]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002202:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002204:	4979      	ldr	r1, [pc, #484]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002206:	400a      	ands	r2, r1
 8002208:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002214:	4b70      	ldr	r3, [pc, #448]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	2203      	movs	r2, #3
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4b6d      	ldr	r3, [pc, #436]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002224:	430a      	orrs	r2, r1
 8002226:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002232:	4b69      	ldr	r3, [pc, #420]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	220c      	movs	r2, #12
 8002238:	4393      	bics	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b65      	ldr	r3, [pc, #404]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002242:	430a      	orrs	r2, r1
 8002244:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2210      	movs	r2, #16
 800224c:	4013      	ands	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b61      	ldr	r3, [pc, #388]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	4a66      	ldr	r2, [pc, #408]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b5e      	ldr	r3, [pc, #376]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002260:	430a      	orrs	r2, r1
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4013      	ands	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002270:	4b59      	ldr	r3, [pc, #356]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	4a5f      	ldr	r2, [pc, #380]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	4b56      	ldr	r3, [pc, #344]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	430a      	orrs	r2, r1
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4013      	ands	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002290:	4b51      	ldr	r3, [pc, #324]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002296:	4013      	ands	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2220      	movs	r2, #32
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	4a52      	ldr	r2, [pc, #328]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	4b46      	ldr	r3, [pc, #280]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	4013      	ands	r3, r2
 80022cc:	d015      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ce:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	0899      	lsrs	r1, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	05db      	lsls	r3, r3, #23
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b39      	ldr	r3, [pc, #228]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	430a      	orrs	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	031b      	lsls	r3, r3, #12
 8002302:	4013      	ands	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002306:	4b34      	ldr	r3, [pc, #208]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002314:	4b30      	ldr	r3, [pc, #192]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002316:	430a      	orrs	r2, r1
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	4013      	ands	r3, r2
 8002324:	d016      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002326:	4b2c      	ldr	r3, [pc, #176]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	4a35      	ldr	r2, [pc, #212]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	430a      	orrs	r2, r1
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	03db      	lsls	r3, r3, #15
 8002342:	429a      	cmp	r2, r3
 8002344:	d106      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	0449      	lsls	r1, r1, #17
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	03db      	lsls	r3, r3, #15
 800235c:	4013      	ands	r3, r2
 800235e:	d016      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	4a27      	ldr	r2, [pc, #156]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236e:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	430a      	orrs	r2, r1
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	045b      	lsls	r3, r3, #17
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	0449      	lsls	r1, r1, #17
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	@ 0x80
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	01db      	lsls	r3, r3, #7
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0249      	lsls	r1, r1, #9
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023c8:	2312      	movs	r3, #18
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	781b      	ldrb	r3, [r3, #0]
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b006      	add	sp, #24
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	fffffcff 	.word	0xfffffcff
 80023e4:	fffeffff 	.word	0xfffeffff
 80023e8:	00001388 	.word	0x00001388
 80023ec:	efffffff 	.word	0xefffffff
 80023f0:	fffff3ff 	.word	0xfffff3ff
 80023f4:	fff3ffff 	.word	0xfff3ffff
 80023f8:	ffcfffff 	.word	0xffcfffff
 80023fc:	ffffcfff 	.word	0xffffcfff
 8002400:	ffbfffff 	.word	0xffbfffff
 8002404:	feffffff 	.word	0xfeffffff
 8002408:	ffff3fff 	.word	0xffff3fff

0800240c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e046      	b.n	80024ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2288      	movs	r2, #136	@ 0x88
 8002422:	589b      	ldr	r3, [r3, r2]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2284      	movs	r2, #132	@ 0x84
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f7fe fddc 	bl	8000ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2288      	movs	r2, #136	@ 0x88
 800243c:	2124      	movs	r1, #36	@ 0x24
 800243e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	438a      	bics	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	0018      	movs	r0, r3
 800245c:	f000 fb8e 	bl	8002b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f8cc 	bl	8002600 <UART_SetConfig>
 8002468:	0003      	movs	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e01c      	b.n	80024ac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	490d      	ldr	r1, [pc, #52]	@ (80024b4 <HAL_UART_Init+0xa8>)
 800247e:	400a      	ands	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	212a      	movs	r1, #42	@ 0x2a
 800248e:	438a      	bics	r2, r1
 8002490:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fc1d 	bl	8002ce4 <UART_CheckIdleState>
 80024aa:	0003      	movs	r3, r0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	ffffb7ff 	.word	0xffffb7ff

080024b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2288      	movs	r2, #136	@ 0x88
 80024cc:	589b      	ldr	r3, [r3, r2]
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d000      	beq.n	80024d4 <HAL_UART_Transmit+0x1c>
 80024d2:	e090      	b.n	80025f6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_UART_Transmit+0x2a>
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e088      	b.n	80025f8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	2380      	movs	r3, #128	@ 0x80
 80024ec:	015b      	lsls	r3, r3, #5
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d109      	bne.n	8002506 <HAL_UART_Transmit+0x4e>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d001      	beq.n	8002506 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e078      	b.n	80025f8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2290      	movs	r2, #144	@ 0x90
 800250a:	2100      	movs	r1, #0
 800250c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2288      	movs	r2, #136	@ 0x88
 8002512:	2121      	movs	r1, #33	@ 0x21
 8002514:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002516:	f7fe fe71 	bl	80011fc <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1dba      	adds	r2, r7, #6
 8002522:	2154      	movs	r1, #84	@ 0x54
 8002524:	8812      	ldrh	r2, [r2, #0]
 8002526:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1dba      	adds	r2, r7, #6
 800252c:	2156      	movs	r1, #86	@ 0x56
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	429a      	cmp	r2, r3
 800253c:	d108      	bne.n	8002550 <HAL_UART_Transmit+0x98>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e003      	b.n	8002558 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002558:	e030      	b.n	80025bc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	0013      	movs	r3, r2
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	@ 0x80
 8002568:	f000 fc66 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d005      	beq.n	800257c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2288      	movs	r2, #136	@ 0x88
 8002574:	2120      	movs	r1, #32
 8002576:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03d      	b.n	80025f8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	001a      	movs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	05d2      	lsls	r2, r2, #23
 800258e:	0dd2      	lsrs	r2, r2, #23
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	3302      	adds	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	e007      	b.n	80025aa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2256      	movs	r2, #86	@ 0x56
 80025ae:	5a9b      	ldrh	r3, [r3, r2]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b299      	uxth	r1, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2256      	movs	r2, #86	@ 0x56
 80025ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2256      	movs	r2, #86	@ 0x56
 80025c0:	5a9b      	ldrh	r3, [r3, r2]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1c8      	bne.n	800255a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	0013      	movs	r3, r2
 80025d2:	2200      	movs	r2, #0
 80025d4:	2140      	movs	r1, #64	@ 0x40
 80025d6:	f000 fc2f 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d005      	beq.n	80025ea <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2288      	movs	r2, #136	@ 0x88
 80025e2:	2120      	movs	r1, #32
 80025e4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e006      	b.n	80025f8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2288      	movs	r2, #136	@ 0x88
 80025ee:	2120      	movs	r1, #32
 80025f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b008      	add	sp, #32
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	b5b0      	push	{r4, r5, r7, lr}
 8002602:	b090      	sub	sp, #64	@ 0x40
 8002604:	af00      	add	r7, sp, #0
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002608:	231a      	movs	r3, #26
 800260a:	2220      	movs	r2, #32
 800260c:	189b      	adds	r3, r3, r2
 800260e:	19db      	adds	r3, r3, r7
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	431a      	orrs	r2, r3
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4313      	orrs	r3, r2
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4aaf      	ldr	r2, [pc, #700]	@ (80028f0 <UART_SetConfig+0x2f0>)
 8002634:	4013      	ands	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263e:	430b      	orrs	r3, r1
 8002640:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4aaa      	ldr	r2, [pc, #680]	@ (80028f4 <UART_SetConfig+0x2f4>)
 800264a:	4013      	ands	r3, r2
 800264c:	0018      	movs	r0, r3
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	68d9      	ldr	r1, [r3, #12]
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	0003      	movs	r3, r0
 8002658:	430b      	orrs	r3, r1
 800265a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4aa4      	ldr	r2, [pc, #656]	@ (80028f8 <UART_SetConfig+0x2f8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d004      	beq.n	8002676 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002672:	4313      	orrs	r3, r2
 8002674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a9f      	ldr	r2, [pc, #636]	@ (80028fc <UART_SetConfig+0x2fc>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002688:	430b      	orrs	r3, r1
 800268a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	220f      	movs	r2, #15
 8002694:	4393      	bics	r3, r2
 8002696:	0018      	movs	r0, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	0003      	movs	r3, r0
 80026a2:	430b      	orrs	r3, r1
 80026a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a95      	ldr	r2, [pc, #596]	@ (8002900 <UART_SetConfig+0x300>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d131      	bne.n	8002714 <UART_SetConfig+0x114>
 80026b0:	4b94      	ldr	r3, [pc, #592]	@ (8002904 <UART_SetConfig+0x304>)
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	2203      	movs	r2, #3
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d01d      	beq.n	80026f8 <UART_SetConfig+0xf8>
 80026bc:	d823      	bhi.n	8002706 <UART_SetConfig+0x106>
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d00c      	beq.n	80026dc <UART_SetConfig+0xdc>
 80026c2:	d820      	bhi.n	8002706 <UART_SetConfig+0x106>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <UART_SetConfig+0xce>
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d00e      	beq.n	80026ea <UART_SetConfig+0xea>
 80026cc:	e01b      	b.n	8002706 <UART_SetConfig+0x106>
 80026ce:	231b      	movs	r3, #27
 80026d0:	2220      	movs	r2, #32
 80026d2:	189b      	adds	r3, r3, r2
 80026d4:	19db      	adds	r3, r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e0b4      	b.n	8002846 <UART_SetConfig+0x246>
 80026dc:	231b      	movs	r3, #27
 80026de:	2220      	movs	r2, #32
 80026e0:	189b      	adds	r3, r3, r2
 80026e2:	19db      	adds	r3, r3, r7
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e0ad      	b.n	8002846 <UART_SetConfig+0x246>
 80026ea:	231b      	movs	r3, #27
 80026ec:	2220      	movs	r2, #32
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	19db      	adds	r3, r3, r7
 80026f2:	2204      	movs	r2, #4
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e0a6      	b.n	8002846 <UART_SetConfig+0x246>
 80026f8:	231b      	movs	r3, #27
 80026fa:	2220      	movs	r2, #32
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	19db      	adds	r3, r3, r7
 8002700:	2208      	movs	r2, #8
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e09f      	b.n	8002846 <UART_SetConfig+0x246>
 8002706:	231b      	movs	r3, #27
 8002708:	2220      	movs	r2, #32
 800270a:	189b      	adds	r3, r3, r2
 800270c:	19db      	adds	r3, r3, r7
 800270e:	2210      	movs	r2, #16
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e098      	b.n	8002846 <UART_SetConfig+0x246>
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a7b      	ldr	r2, [pc, #492]	@ (8002908 <UART_SetConfig+0x308>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d131      	bne.n	8002782 <UART_SetConfig+0x182>
 800271e:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <UART_SetConfig+0x304>)
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	220c      	movs	r2, #12
 8002724:	4013      	ands	r3, r2
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d01d      	beq.n	8002766 <UART_SetConfig+0x166>
 800272a:	d823      	bhi.n	8002774 <UART_SetConfig+0x174>
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00c      	beq.n	800274a <UART_SetConfig+0x14a>
 8002730:	d820      	bhi.n	8002774 <UART_SetConfig+0x174>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <UART_SetConfig+0x13c>
 8002736:	2b04      	cmp	r3, #4
 8002738:	d00e      	beq.n	8002758 <UART_SetConfig+0x158>
 800273a:	e01b      	b.n	8002774 <UART_SetConfig+0x174>
 800273c:	231b      	movs	r3, #27
 800273e:	2220      	movs	r2, #32
 8002740:	189b      	adds	r3, r3, r2
 8002742:	19db      	adds	r3, r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e07d      	b.n	8002846 <UART_SetConfig+0x246>
 800274a:	231b      	movs	r3, #27
 800274c:	2220      	movs	r2, #32
 800274e:	189b      	adds	r3, r3, r2
 8002750:	19db      	adds	r3, r3, r7
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e076      	b.n	8002846 <UART_SetConfig+0x246>
 8002758:	231b      	movs	r3, #27
 800275a:	2220      	movs	r2, #32
 800275c:	189b      	adds	r3, r3, r2
 800275e:	19db      	adds	r3, r3, r7
 8002760:	2204      	movs	r2, #4
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e06f      	b.n	8002846 <UART_SetConfig+0x246>
 8002766:	231b      	movs	r3, #27
 8002768:	2220      	movs	r2, #32
 800276a:	189b      	adds	r3, r3, r2
 800276c:	19db      	adds	r3, r3, r7
 800276e:	2208      	movs	r2, #8
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e068      	b.n	8002846 <UART_SetConfig+0x246>
 8002774:	231b      	movs	r3, #27
 8002776:	2220      	movs	r2, #32
 8002778:	189b      	adds	r3, r3, r2
 800277a:	19db      	adds	r3, r3, r7
 800277c:	2210      	movs	r2, #16
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e061      	b.n	8002846 <UART_SetConfig+0x246>
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a61      	ldr	r2, [pc, #388]	@ (800290c <UART_SetConfig+0x30c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d106      	bne.n	800279a <UART_SetConfig+0x19a>
 800278c:	231b      	movs	r3, #27
 800278e:	2220      	movs	r2, #32
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e055      	b.n	8002846 <UART_SetConfig+0x246>
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5c      	ldr	r2, [pc, #368]	@ (8002910 <UART_SetConfig+0x310>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d106      	bne.n	80027b2 <UART_SetConfig+0x1b2>
 80027a4:	231b      	movs	r3, #27
 80027a6:	2220      	movs	r2, #32
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	19db      	adds	r3, r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e049      	b.n	8002846 <UART_SetConfig+0x246>
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a50      	ldr	r2, [pc, #320]	@ (80028f8 <UART_SetConfig+0x2f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d13e      	bne.n	800283a <UART_SetConfig+0x23a>
 80027bc:	4b51      	ldr	r3, [pc, #324]	@ (8002904 <UART_SetConfig+0x304>)
 80027be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027c0:	23c0      	movs	r3, #192	@ 0xc0
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	22c0      	movs	r2, #192	@ 0xc0
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <UART_SetConfig+0x21e>
 80027ce:	22c0      	movs	r2, #192	@ 0xc0
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d82a      	bhi.n	800282c <UART_SetConfig+0x22c>
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	4293      	cmp	r3, r2
 80027dc:	d011      	beq.n	8002802 <UART_SetConfig+0x202>
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d822      	bhi.n	800282c <UART_SetConfig+0x22c>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <UART_SetConfig+0x1f4>
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00e      	beq.n	8002810 <UART_SetConfig+0x210>
 80027f2:	e01b      	b.n	800282c <UART_SetConfig+0x22c>
 80027f4:	231b      	movs	r3, #27
 80027f6:	2220      	movs	r2, #32
 80027f8:	189b      	adds	r3, r3, r2
 80027fa:	19db      	adds	r3, r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e021      	b.n	8002846 <UART_SetConfig+0x246>
 8002802:	231b      	movs	r3, #27
 8002804:	2220      	movs	r2, #32
 8002806:	189b      	adds	r3, r3, r2
 8002808:	19db      	adds	r3, r3, r7
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e01a      	b.n	8002846 <UART_SetConfig+0x246>
 8002810:	231b      	movs	r3, #27
 8002812:	2220      	movs	r2, #32
 8002814:	189b      	adds	r3, r3, r2
 8002816:	19db      	adds	r3, r3, r7
 8002818:	2204      	movs	r2, #4
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e013      	b.n	8002846 <UART_SetConfig+0x246>
 800281e:	231b      	movs	r3, #27
 8002820:	2220      	movs	r2, #32
 8002822:	189b      	adds	r3, r3, r2
 8002824:	19db      	adds	r3, r3, r7
 8002826:	2208      	movs	r2, #8
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e00c      	b.n	8002846 <UART_SetConfig+0x246>
 800282c:	231b      	movs	r3, #27
 800282e:	2220      	movs	r2, #32
 8002830:	189b      	adds	r3, r3, r2
 8002832:	19db      	adds	r3, r3, r7
 8002834:	2210      	movs	r2, #16
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	e005      	b.n	8002846 <UART_SetConfig+0x246>
 800283a:	231b      	movs	r3, #27
 800283c:	2220      	movs	r2, #32
 800283e:	189b      	adds	r3, r3, r2
 8002840:	19db      	adds	r3, r3, r7
 8002842:	2210      	movs	r2, #16
 8002844:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2b      	ldr	r2, [pc, #172]	@ (80028f8 <UART_SetConfig+0x2f8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d000      	beq.n	8002852 <UART_SetConfig+0x252>
 8002850:	e0a9      	b.n	80029a6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002852:	231b      	movs	r3, #27
 8002854:	2220      	movs	r2, #32
 8002856:	189b      	adds	r3, r3, r2
 8002858:	19db      	adds	r3, r3, r7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d015      	beq.n	800288c <UART_SetConfig+0x28c>
 8002860:	dc18      	bgt.n	8002894 <UART_SetConfig+0x294>
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00d      	beq.n	8002882 <UART_SetConfig+0x282>
 8002866:	dc15      	bgt.n	8002894 <UART_SetConfig+0x294>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <UART_SetConfig+0x272>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d005      	beq.n	800287c <UART_SetConfig+0x27c>
 8002870:	e010      	b.n	8002894 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002872:	f7ff fbfd 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8002876:	0003      	movs	r3, r0
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800287a:	e014      	b.n	80028a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800287c:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <UART_SetConfig+0x314>)
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002880:	e011      	b.n	80028a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002882:	f7ff fb69 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002886:	0003      	movs	r3, r0
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800288a:	e00c      	b.n	80028a6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800288c:	2380      	movs	r3, #128	@ 0x80
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002892:	e008      	b.n	80028a6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002898:	231a      	movs	r3, #26
 800289a:	2220      	movs	r2, #32
 800289c:	189b      	adds	r3, r3, r2
 800289e:	19db      	adds	r3, r3, r7
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
        break;
 80028a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d100      	bne.n	80028ae <UART_SetConfig+0x2ae>
 80028ac:	e14b      	b.n	8002b46 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <UART_SetConfig+0x318>)
 80028b4:	0052      	lsls	r2, r2, #1
 80028b6:	5ad3      	ldrh	r3, [r2, r3]
 80028b8:	0019      	movs	r1, r3
 80028ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80028bc:	f7fd fc22 	bl	8000104 <__udivsi3>
 80028c0:	0003      	movs	r3, r0
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	0013      	movs	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d305      	bcc.n	80028e0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028dc:	429a      	cmp	r2, r3
 80028de:	d91d      	bls.n	800291c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80028e0:	231a      	movs	r3, #26
 80028e2:	2220      	movs	r2, #32
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	19db      	adds	r3, r3, r7
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e12b      	b.n	8002b46 <UART_SetConfig+0x546>
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	cfff69f3 	.word	0xcfff69f3
 80028f4:	ffffcfff 	.word	0xffffcfff
 80028f8:	40008000 	.word	0x40008000
 80028fc:	11fff4ff 	.word	0x11fff4ff
 8002900:	40013800 	.word	0x40013800
 8002904:	40021000 	.word	0x40021000
 8002908:	40004400 	.word	0x40004400
 800290c:	40004800 	.word	0x40004800
 8002910:	40004c00 	.word	0x40004c00
 8002914:	00f42400 	.word	0x00f42400
 8002918:	08003bb8 	.word	0x08003bb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002928:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <UART_SetConfig+0x574>)
 800292a:	0052      	lsls	r2, r2, #1
 800292c:	5ad3      	ldrh	r3, [r2, r3]
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	69b8      	ldr	r0, [r7, #24]
 800293a:	69f9      	ldr	r1, [r7, #28]
 800293c:	f7fd fd58 	bl	80003f0 <__aeabi_uldivmod>
 8002940:	0002      	movs	r2, r0
 8002942:	000b      	movs	r3, r1
 8002944:	0e11      	lsrs	r1, r2, #24
 8002946:	021d      	lsls	r5, r3, #8
 8002948:	430d      	orrs	r5, r1
 800294a:	0214      	lsls	r4, r2, #8
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	1900      	adds	r0, r0, r4
 800295e:	4169      	adcs	r1, r5
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f7fd fd3f 	bl	80003f0 <__aeabi_uldivmod>
 8002972:	0002      	movs	r2, r0
 8002974:	000b      	movs	r3, r1
 8002976:	0013      	movs	r3, r2
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800297a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297c:	23c0      	movs	r3, #192	@ 0xc0
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d309      	bcc.n	8002998 <UART_SetConfig+0x398>
 8002984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	035b      	lsls	r3, r3, #13
 800298a:	429a      	cmp	r2, r3
 800298c:	d204      	bcs.n	8002998 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	e0d6      	b.n	8002b46 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002998:	231a      	movs	r3, #26
 800299a:	2220      	movs	r2, #32
 800299c:	189b      	adds	r3, r3, r2
 800299e:	19db      	adds	r3, r3, r7
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e0cf      	b.n	8002b46 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d000      	beq.n	80029b4 <UART_SetConfig+0x3b4>
 80029b2:	e070      	b.n	8002a96 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80029b4:	231b      	movs	r3, #27
 80029b6:	2220      	movs	r2, #32
 80029b8:	189b      	adds	r3, r3, r2
 80029ba:	19db      	adds	r3, r3, r7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d015      	beq.n	80029ee <UART_SetConfig+0x3ee>
 80029c2:	dc18      	bgt.n	80029f6 <UART_SetConfig+0x3f6>
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d00d      	beq.n	80029e4 <UART_SetConfig+0x3e4>
 80029c8:	dc15      	bgt.n	80029f6 <UART_SetConfig+0x3f6>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <UART_SetConfig+0x3d4>
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d005      	beq.n	80029de <UART_SetConfig+0x3de>
 80029d2:	e010      	b.n	80029f6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d4:	f7ff fb4c 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 80029d8:	0003      	movs	r3, r0
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029dc:	e014      	b.n	8002a08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029de:	4b66      	ldr	r3, [pc, #408]	@ (8002b78 <UART_SetConfig+0x578>)
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029e2:	e011      	b.n	8002a08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e4:	f7ff fab8 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80029e8:	0003      	movs	r3, r0
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029ec:	e00c      	b.n	8002a08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029f4:	e008      	b.n	8002a08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80029fa:	231a      	movs	r3, #26
 80029fc:	2220      	movs	r2, #32
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	19db      	adds	r3, r3, r7
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
        break;
 8002a06:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d100      	bne.n	8002a10 <UART_SetConfig+0x410>
 8002a0e:	e09a      	b.n	8002b46 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a14:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <UART_SetConfig+0x574>)
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	5ad3      	ldrh	r3, [r2, r3]
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a1e:	f7fd fb71 	bl	8000104 <__udivsi3>
 8002a22:	0003      	movs	r3, r0
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f7fd fb65 	bl	8000104 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d921      	bls.n	8002a88 <UART_SetConfig+0x488>
 8002a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	025b      	lsls	r3, r3, #9
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d21c      	bcs.n	8002a88 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	200e      	movs	r0, #14
 8002a54:	2420      	movs	r4, #32
 8002a56:	1903      	adds	r3, r0, r4
 8002a58:	19db      	adds	r3, r3, r7
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	b299      	uxth	r1, r3
 8002a6c:	1903      	adds	r3, r0, r4
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	1902      	adds	r2, r0, r4
 8002a72:	19d2      	adds	r2, r2, r7
 8002a74:	8812      	ldrh	r2, [r2, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1902      	adds	r2, r0, r4
 8002a80:	19d2      	adds	r2, r2, r7
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e05e      	b.n	8002b46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002a88:	231a      	movs	r3, #26
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	19db      	adds	r3, r3, r7
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e057      	b.n	8002b46 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a96:	231b      	movs	r3, #27
 8002a98:	2220      	movs	r2, #32
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d015      	beq.n	8002ad0 <UART_SetConfig+0x4d0>
 8002aa4:	dc18      	bgt.n	8002ad8 <UART_SetConfig+0x4d8>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d00d      	beq.n	8002ac6 <UART_SetConfig+0x4c6>
 8002aaa:	dc15      	bgt.n	8002ad8 <UART_SetConfig+0x4d8>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <UART_SetConfig+0x4b6>
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0x4c0>
 8002ab4:	e010      	b.n	8002ad8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab6:	f7ff fadb 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8002aba:	0003      	movs	r3, r0
 8002abc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002abe:	e014      	b.n	8002aea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b78 <UART_SetConfig+0x578>)
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ac4:	e011      	b.n	8002aea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac6:	f7ff fa47 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002aca:	0003      	movs	r3, r0
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ace:	e00c      	b.n	8002aea <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ad6:	e008      	b.n	8002aea <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002adc:	231a      	movs	r3, #26
 8002ade:	2220      	movs	r2, #32
 8002ae0:	189b      	adds	r3, r3, r2
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
        break;
 8002ae8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02a      	beq.n	8002b46 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <UART_SetConfig+0x574>)
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	5ad3      	ldrh	r3, [r2, r3]
 8002afa:	0019      	movs	r1, r3
 8002afc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002afe:	f7fd fb01 	bl	8000104 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	001a      	movs	r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	18d2      	adds	r2, r2, r3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	0019      	movs	r1, r3
 8002b14:	0010      	movs	r0, r2
 8002b16:	f7fd faf5 	bl	8000104 <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d90a      	bls.n	8002b3a <UART_SetConfig+0x53a>
 8002b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	025b      	lsls	r3, r3, #9
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d205      	bcs.n	8002b3a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e005      	b.n	8002b46 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3a:	231a      	movs	r3, #26
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	19db      	adds	r3, r3, r7
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	226a      	movs	r2, #106	@ 0x6a
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	2268      	movs	r2, #104	@ 0x68
 8002b52:	2101      	movs	r1, #1
 8002b54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	2200      	movs	r2, #0
 8002b5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	2200      	movs	r2, #0
 8002b60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b62:	231a      	movs	r3, #26
 8002b64:	2220      	movs	r2, #32
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b010      	add	sp, #64	@ 0x40
 8002b72:	bdb0      	pop	{r4, r5, r7, pc}
 8002b74:	08003bb8 	.word	0x08003bb8
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	2208      	movs	r2, #8
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc0 <UART_AdvFeatureConfig+0x144>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a43      	ldr	r2, [pc, #268]	@ (8002cc4 <UART_AdvFeatureConfig+0x148>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	2202      	movs	r2, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc8 <UART_AdvFeatureConfig+0x14c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	2204      	movs	r2, #4
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d00b      	beq.n	8002c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a34      	ldr	r2, [pc, #208]	@ (8002ccc <UART_AdvFeatureConfig+0x150>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	2210      	movs	r2, #16
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd0 <UART_AdvFeatureConfig+0x154>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4a25      	ldr	r2, [pc, #148]	@ (8002cd4 <UART_AdvFeatureConfig+0x158>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	2240      	movs	r2, #64	@ 0x40
 8002c56:	4013      	ands	r3, r2
 8002c58:	d01d      	beq.n	8002c96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <UART_AdvFeatureConfig+0x15c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	035b      	lsls	r3, r3, #13
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d10b      	bne.n	8002c96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <UART_AdvFeatureConfig+0x160>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <UART_AdvFeatureConfig+0x164>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	ffff7fff 	.word	0xffff7fff
 8002cc4:	fffdffff 	.word	0xfffdffff
 8002cc8:	fffeffff 	.word	0xfffeffff
 8002ccc:	fffbffff 	.word	0xfffbffff
 8002cd0:	ffffefff 	.word	0xffffefff
 8002cd4:	ffffdfff 	.word	0xffffdfff
 8002cd8:	ffefffff 	.word	0xffefffff
 8002cdc:	ff9fffff 	.word	0xff9fffff
 8002ce0:	fff7ffff 	.word	0xfff7ffff

08002ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b092      	sub	sp, #72	@ 0x48
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2290      	movs	r2, #144	@ 0x90
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cf4:	f7fe fa82 	bl	80011fc <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2208      	movs	r2, #8
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d12d      	bne.n	8002d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	0391      	lsls	r1, r2, #14
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4a47      	ldr	r2, [pc, #284]	@ (8002e30 <UART_CheckIdleState+0x14c>)
 8002d14:	9200      	str	r2, [sp, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f000 f88e 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d022      	beq.n	8002d66 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d20:	f3ef 8310 	mrs	r3, PRIMASK
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2180      	movs	r1, #128	@ 0x80
 8002d42:	438a      	bics	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2288      	movs	r2, #136	@ 0x88
 8002d56:	2120      	movs	r1, #32
 8002d58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2284      	movs	r2, #132	@ 0x84
 8002d5e:	2100      	movs	r1, #0
 8002d60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e060      	b.n	8002e28 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d146      	bne.n	8002e02 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	03d1      	lsls	r1, r2, #15
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <UART_CheckIdleState+0x14c>)
 8002d7e:	9200      	str	r2, [sp, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f000 f859 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d03b      	beq.n	8002e02 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d90:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4922      	ldr	r1, [pc, #136]	@ (8002e34 <UART_CheckIdleState+0x150>)
 8002dac:	400a      	ands	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f383 8810 	msr	PRIMASK, r3
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	438a      	bics	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	228c      	movs	r2, #140	@ 0x8c
 8002df2:	2120      	movs	r1, #32
 8002df4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2284      	movs	r2, #132	@ 0x84
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e012      	b.n	8002e28 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2288      	movs	r2, #136	@ 0x88
 8002e06:	2120      	movs	r1, #32
 8002e08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	228c      	movs	r2, #140	@ 0x8c
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2284      	movs	r2, #132	@ 0x84
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b010      	add	sp, #64	@ 0x40
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	01ffffff 	.word	0x01ffffff
 8002e34:	fffffedf 	.word	0xfffffedf

08002e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e48:	e051      	b.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	d04e      	beq.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7fe f9d4 	bl	80011fc <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e051      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d03b      	beq.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b80      	cmp	r3, #128	@ 0x80
 8002e7a:	d038      	beq.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b40      	cmp	r3, #64	@ 0x40
 8002e80:	d035      	beq.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d111      	bne.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2208      	movs	r2, #8
 8002e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 f83c 	bl	8002f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2290      	movs	r2, #144	@ 0x90
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2284      	movs	r2, #132	@ 0x84
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e02c      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d112      	bne.n	8002eee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f81f 	bl	8002f18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2290      	movs	r2, #144	@ 0x90
 8002ede:	2120      	movs	r1, #32
 8002ee0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2284      	movs	r2, #132	@ 0x84
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e00f      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	425a      	negs	r2, r3
 8002efe:	4153      	adcs	r3, r2
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	001a      	movs	r2, r3
 8002f04:	1dfb      	adds	r3, r7, #7
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d09e      	beq.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08e      	sub	sp, #56	@ 0x38
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	617b      	str	r3, [r7, #20]
  return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4926      	ldr	r1, [pc, #152]	@ (8002fdc <UART_EndRxTransfer+0xc4>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f52:	f3ef 8310 	mrs	r3, PRIMASK
 8002f56:	623b      	str	r3, [r7, #32]
  return(result);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	f383 8810 	msr	PRIMASK, r3
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	491b      	ldr	r1, [pc, #108]	@ (8002fe0 <UART_EndRxTransfer+0xc8>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d118      	bne.n	8002fbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f96:	2301      	movs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f383 8810 	msr	PRIMASK, r3
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2110      	movs	r1, #16
 8002fae:	438a      	bics	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f383 8810 	msr	PRIMASK, r3
}
 8002fbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	228c      	movs	r2, #140	@ 0x8c
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b00e      	add	sp, #56	@ 0x38
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	fffffedf 	.word	0xfffffedf
 8002fe0:	effffffe 	.word	0xeffffffe

08002fe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2284      	movs	r2, #132	@ 0x84
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UARTEx_DisableFifoMode+0x16>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e027      	b.n	800304a <HAL_UARTEx_DisableFifoMode+0x66>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2284      	movs	r2, #132	@ 0x84
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2288      	movs	r2, #136	@ 0x88
 8003006:	2124      	movs	r1, #36	@ 0x24
 8003008:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a0b      	ldr	r2, [pc, #44]	@ (8003054 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2288      	movs	r2, #136	@ 0x88
 800303c:	2120      	movs	r1, #32
 800303e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2284      	movs	r2, #132	@ 0x84
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b004      	add	sp, #16
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	dfffffff 	.word	0xdfffffff

08003058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2284      	movs	r2, #132	@ 0x84
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e02e      	b.n	80030ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2284      	movs	r2, #132	@ 0x84
 8003074:	2101      	movs	r1, #1
 8003076:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2288      	movs	r2, #136	@ 0x88
 800307c:	2124      	movs	r1, #36	@ 0x24
 800307e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	438a      	bics	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	08d9      	lsrs	r1, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f854 	bl	800315c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2288      	movs	r2, #136	@ 0x88
 80030c0:	2120      	movs	r1, #32
 80030c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2284      	movs	r2, #132	@ 0x84
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2284      	movs	r2, #132	@ 0x84
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e02f      	b.n	8003150 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2284      	movs	r2, #132	@ 0x84
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2288      	movs	r2, #136	@ 0x88
 80030fc:	2124      	movs	r1, #36	@ 0x24
 80030fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4a0e      	ldr	r2, [pc, #56]	@ (8003158 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003120:	4013      	ands	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f813 	bl	800315c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2288      	movs	r2, #136	@ 0x88
 8003142:	2120      	movs	r1, #32
 8003144:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2284      	movs	r2, #132	@ 0x84
 800314a:	2100      	movs	r1, #0
 800314c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}
 8003158:	f1ffffff 	.word	0xf1ffffff

0800315c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	226a      	movs	r2, #106	@ 0x6a
 8003170:	2101      	movs	r1, #1
 8003172:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2268      	movs	r2, #104	@ 0x68
 8003178:	2101      	movs	r1, #1
 800317a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800317c:	e043      	b.n	8003206 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800317e:	260f      	movs	r6, #15
 8003180:	19bb      	adds	r3, r7, r6
 8003182:	2208      	movs	r2, #8
 8003184:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003186:	200e      	movs	r0, #14
 8003188:	183b      	adds	r3, r7, r0
 800318a:	2208      	movs	r2, #8
 800318c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	b2da      	uxtb	r2, r3
 8003198:	240d      	movs	r4, #13
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2107      	movs	r1, #7
 800319e:	400a      	ands	r2, r1
 80031a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	0f5b      	lsrs	r3, r3, #29
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	250c      	movs	r5, #12
 80031ae:	197b      	adds	r3, r7, r5
 80031b0:	2107      	movs	r1, #7
 80031b2:	400a      	ands	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031b6:	183b      	adds	r3, r7, r0
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	197a      	adds	r2, r7, r5
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	4914      	ldr	r1, [pc, #80]	@ (8003210 <UARTEx_SetNbDataToProcess+0xb4>)
 80031c0:	5c8a      	ldrb	r2, [r1, r2]
 80031c2:	435a      	muls	r2, r3
 80031c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80031c6:	197b      	adds	r3, r7, r5
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <UARTEx_SetNbDataToProcess+0xb8>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031ce:	0019      	movs	r1, r3
 80031d0:	f7fd f822 	bl	8000218 <__divsi3>
 80031d4:	0003      	movs	r3, r0
 80031d6:	b299      	uxth	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	226a      	movs	r2, #106	@ 0x6a
 80031dc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031de:	19bb      	adds	r3, r7, r6
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	193a      	adds	r2, r7, r4
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	490a      	ldr	r1, [pc, #40]	@ (8003210 <UARTEx_SetNbDataToProcess+0xb4>)
 80031e8:	5c8a      	ldrb	r2, [r1, r2]
 80031ea:	435a      	muls	r2, r3
 80031ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4a08      	ldr	r2, [pc, #32]	@ (8003214 <UARTEx_SetNbDataToProcess+0xb8>)
 80031f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031f6:	0019      	movs	r1, r3
 80031f8:	f7fd f80e 	bl	8000218 <__divsi3>
 80031fc:	0003      	movs	r3, r0
 80031fe:	b299      	uxth	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2268      	movs	r2, #104	@ 0x68
 8003204:	5299      	strh	r1, [r3, r2]
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b005      	add	sp, #20
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	08003bd0 	.word	0x08003bd0
 8003214:	08003bd8 	.word	0x08003bd8

08003218 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	435b      	muls	r3, r3
 800322c:	001a      	movs	r2, r3
 800322e:	0013      	movs	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	189b      	adds	r3, r3, r2
 8003234:	43db      	mvns	r3, r3
 8003236:	400b      	ands	r3, r1
 8003238:	001a      	movs	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	435b      	muls	r3, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	434b      	muls	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b004      	add	sp, #16
 800324e:	bd80      	pop	{r7, pc}

08003250 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	43d2      	mvns	r2, r2
 8003264:	401a      	ands	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	434b      	muls	r3, r1
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b004      	add	sp, #16
 8003278:	bd80      	pop	{r7, pc}

0800327a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	435b      	muls	r3, r3
 800328e:	001a      	movs	r2, r3
 8003290:	0013      	movs	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	189b      	adds	r3, r3, r2
 8003296:	43db      	mvns	r3, r3
 8003298:	400b      	ands	r3, r1
 800329a:	001a      	movs	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	435b      	muls	r3, r3
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	434b      	muls	r3, r1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	609a      	str	r2, [r3, #8]
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68d9      	ldr	r1, [r3, #12]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	435b      	muls	r3, r3
 80032c6:	001a      	movs	r2, r3
 80032c8:	0013      	movs	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	43db      	mvns	r3, r3
 80032d0:	400b      	ands	r3, r1
 80032d2:	001a      	movs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	435b      	muls	r3, r3
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	434b      	muls	r3, r1
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	60da      	str	r2, [r3, #12]
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}

080032ea <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a19      	ldr	r1, [r3, #32]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	435b      	muls	r3, r3
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4353      	muls	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	435a      	muls	r2, r3
 8003306:	0013      	movs	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	43db      	mvns	r3, r3
 800330e:	400b      	ands	r3, r1
 8003310:	001a      	movs	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	435b      	muls	r3, r3
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	434b      	muls	r3, r1
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	434b      	muls	r3, r1
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	434b      	muls	r3, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8003328:	46c0      	nop			@ (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}

08003330 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	0a12      	lsrs	r2, r2, #8
 8003348:	4353      	muls	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	0a12      	lsrs	r2, r2, #8
 800334e:	4353      	muls	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	0a12      	lsrs	r2, r2, #8
 8003354:	435a      	muls	r2, r3
 8003356:	0013      	movs	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	43db      	mvns	r3, r3
 800335e:	400b      	ands	r3, r1
 8003360:	001a      	movs	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	0a09      	lsrs	r1, r1, #8
 800336a:	434b      	muls	r3, r1
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	0a09      	lsrs	r1, r1, #8
 8003370:	434b      	muls	r3, r1
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	0a09      	lsrs	r1, r1, #8
 8003376:	434b      	muls	r3, r1
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	434b      	muls	r3, r1
 800337c:	431a      	orrs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	b004      	add	sp, #16
 8003388:	bd80      	pop	{r7, pc}

0800338a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003398:	e047      	b.n	800342a <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4091      	lsls	r1, r2
 80033a4:	000a      	movs	r2, r1
 80033a6:	4013      	ands	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d039      	beq.n	8003424 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d003      	beq.n	80033c0 <LL_GPIO_Init+0x36>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d10d      	bne.n	80033dc <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff ff56 	bl	800327a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7ff ff3a 	bl	8003250 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff ff64 	bl	80032b2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d111      	bne.n	8003416 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2bff      	cmp	r3, #255	@ 0xff
 80033f6:	d807      	bhi.n	8003408 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff ff72 	bl	80032ea <LL_GPIO_SetAFPin_0_7>
 8003406:	e006      	b.n	8003416 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff8d 	bl	8003330 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fefa 	bl	8003218 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	40da      	lsrs	r2, r3
 8003432:	1e13      	subs	r3, r2, #0
 8003434:	d1b1      	bne.n	800339a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b004      	add	sp, #16
 800343e:	bd80      	pop	{r7, pc}

08003440 <LL_RCC_HSI_IsReady>:
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003444:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <LL_RCC_HSI_IsReady+0x24>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	401a      	ands	r2, r3
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	429a      	cmp	r2, r3
 8003454:	d101      	bne.n	800345a <LL_RCC_HSI_IsReady+0x1a>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <LL_RCC_HSI_IsReady+0x1c>
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	40021000 	.word	0x40021000

08003468 <LL_RCC_LSE_IsReady>:
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <LL_RCC_LSE_IsReady+0x1c>)
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2202      	movs	r2, #2
 8003472:	4013      	ands	r3, r2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d101      	bne.n	800347c <LL_RCC_LSE_IsReady+0x14>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <LL_RCC_LSE_IsReady+0x16>
 800347c:	2300      	movs	r3, #0
}
 800347e:	0018      	movs	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000

08003488 <LL_RCC_GetSysClkSource>:
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <LL_RCC_GetSysClkSource+0x14>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2238      	movs	r2, #56	@ 0x38
 8003492:	4013      	ands	r3, r2
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	40021000 	.word	0x40021000

080034a0 <LL_RCC_GetAHBPrescaler>:
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <LL_RCC_GetAHBPrescaler+0x14>)
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	23f0      	movs	r3, #240	@ 0xf0
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4013      	ands	r3, r2
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000

080034b8 <LL_RCC_GetAPB1Prescaler>:
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	23e0      	movs	r3, #224	@ 0xe0
 80034c2:	01db      	lsls	r3, r3, #7
 80034c4:	4013      	ands	r3, r2
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000

080034d0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <LL_RCC_GetUSARTClockSource+0x20>)
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	4313      	orrs	r3, r2
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b002      	add	sp, #8
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	40021000 	.word	0x40021000

080034f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034f8:	4b03      	ldr	r3, [pc, #12]	@ (8003508 <LL_RCC_PLL_GetN+0x14>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	227f      	movs	r2, #127	@ 0x7f
 8003500:	4013      	ands	r3, r2
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000

0800350c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003510:	4b03      	ldr	r3, [pc, #12]	@ (8003520 <LL_RCC_PLL_GetR+0x14>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	0f5b      	lsrs	r3, r3, #29
 8003516:	075b      	lsls	r3, r3, #29
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	40021000 	.word	0x40021000

08003524 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <LL_RCC_PLL_GetMainSource+0x14>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2203      	movs	r2, #3
 800352e:	4013      	ands	r3, r2
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	40021000 	.word	0x40021000

0800353c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <LL_RCC_PLL_GetDivider+0x14>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2270      	movs	r2, #112	@ 0x70
 8003546:	4013      	ands	r3, r2
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	40021000 	.word	0x40021000

08003554 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800355c:	f000 f8a8 	bl	80036b0 <RCC_GetSystemClockFreq>
 8003560:	0002      	movs	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f8ce 	bl	800370c <RCC_GetHCLKClockFreq>
 8003570:	0002      	movs	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f8de 	bl	800373c <RCC_GetPCLK1ClockFreq>
 8003580:	0002      	movs	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]
}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d134      	bne.n	800360c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff ff93 	bl	80034d0 <LL_RCC_GetUSARTClockSource>
 80035aa:	0003      	movs	r3, r0
 80035ac:	4a39      	ldr	r2, [pc, #228]	@ (8003694 <LL_RCC_GetUSARTClockFreq+0x104>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d016      	beq.n	80035e0 <LL_RCC_GetUSARTClockFreq+0x50>
 80035b2:	4a38      	ldr	r2, [pc, #224]	@ (8003694 <LL_RCC_GetUSARTClockFreq+0x104>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d81c      	bhi.n	80035f2 <LL_RCC_GetUSARTClockFreq+0x62>
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <LL_RCC_GetUSARTClockFreq+0x108>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <LL_RCC_GetUSARTClockFreq+0x36>
 80035be:	4a37      	ldr	r2, [pc, #220]	@ (800369c <LL_RCC_GetUSARTClockFreq+0x10c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d005      	beq.n	80035d0 <LL_RCC_GetUSARTClockFreq+0x40>
 80035c4:	e015      	b.n	80035f2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80035c6:	f000 f873 	bl	80036b0 <RCC_GetSystemClockFreq>
 80035ca:	0003      	movs	r3, r0
 80035cc:	60fb      	str	r3, [r7, #12]
        break;
 80035ce:	e05c      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80035d0:	f7ff ff36 	bl	8003440 <LL_RCC_HSI_IsReady>
 80035d4:	0003      	movs	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d150      	bne.n	800367c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80035da:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 80035dc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035de:	e04d      	b.n	800367c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80035e0:	f7ff ff42 	bl	8003468 <LL_RCC_LSE_IsReady>
 80035e4:	0003      	movs	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d14a      	bne.n	8003680 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035f0:	e046      	b.n	8003680 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035f2:	f000 f85d 	bl	80036b0 <RCC_GetSystemClockFreq>
 80035f6:	0003      	movs	r3, r0
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f887 	bl	800370c <RCC_GetHCLKClockFreq>
 80035fe:	0003      	movs	r3, r0
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f89b 	bl	800373c <RCC_GetPCLK1ClockFreq>
 8003606:	0003      	movs	r3, r0
 8003608:	60fb      	str	r3, [r7, #12]
        break;
 800360a:	e03e      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d13b      	bne.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff ff5b 	bl	80034d0 <LL_RCC_GetUSARTClockSource>
 800361a:	0003      	movs	r3, r0
 800361c:	4a21      	ldr	r2, [pc, #132]	@ (80036a4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d016      	beq.n	8003650 <LL_RCC_GetUSARTClockFreq+0xc0>
 8003622:	4a20      	ldr	r2, [pc, #128]	@ (80036a4 <LL_RCC_GetUSARTClockFreq+0x114>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d81c      	bhi.n	8003662 <LL_RCC_GetUSARTClockFreq+0xd2>
 8003628:	4a1f      	ldr	r2, [pc, #124]	@ (80036a8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <LL_RCC_GetUSARTClockFreq+0xa6>
 800362e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ac <LL_RCC_GetUSARTClockFreq+0x11c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d005      	beq.n	8003640 <LL_RCC_GetUSARTClockFreq+0xb0>
 8003634:	e015      	b.n	8003662 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003636:	f000 f83b 	bl	80036b0 <RCC_GetSystemClockFreq>
 800363a:	0003      	movs	r3, r0
 800363c:	60fb      	str	r3, [r7, #12]
        break;
 800363e:	e024      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003640:	f7ff fefe 	bl	8003440 <LL_RCC_HSI_IsReady>
 8003644:	0003      	movs	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d11c      	bne.n	8003684 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800364c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800364e:	e019      	b.n	8003684 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003650:	f7ff ff0a 	bl	8003468 <LL_RCC_LSE_IsReady>
 8003654:	0003      	movs	r3, r0
 8003656:	2b01      	cmp	r3, #1
 8003658:	d116      	bne.n	8003688 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003660:	e012      	b.n	8003688 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003662:	f000 f825 	bl	80036b0 <RCC_GetSystemClockFreq>
 8003666:	0003      	movs	r3, r0
 8003668:	0018      	movs	r0, r3
 800366a:	f000 f84f 	bl	800370c <RCC_GetHCLKClockFreq>
 800366e:	0003      	movs	r3, r0
 8003670:	0018      	movs	r0, r3
 8003672:	f000 f863 	bl	800373c <RCC_GetPCLK1ClockFreq>
 8003676:	0003      	movs	r3, r0
 8003678:	60fb      	str	r3, [r7, #12]
        break;
 800367a:	e006      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800367c:	46c0      	nop			@ (mov r8, r8)
 800367e:	e004      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	e002      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	e000      	b.n	800368a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8003688:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}
 8003694:	00030003 	.word	0x00030003
 8003698:	00030001 	.word	0x00030001
 800369c:	00030002 	.word	0x00030002
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	000c000c 	.word	0x000c000c
 80036a8:	000c0004 	.word	0x000c0004
 80036ac:	000c0008 	.word	0x000c0008

080036b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80036b6:	f7ff fee7 	bl	8003488 <LL_RCC_GetSysClkSource>
 80036ba:	0003      	movs	r3, r0
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d002      	beq.n	80036c6 <RCC_GetSystemClockFreq+0x16>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d003      	beq.n	80036cc <RCC_GetSystemClockFreq+0x1c>
 80036c4:	e007      	b.n	80036d6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <RCC_GetSystemClockFreq+0x50>)
 80036c8:	607b      	str	r3, [r7, #4]
      break;
 80036ca:	e014      	b.n	80036f6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80036cc:	f000 f84c 	bl	8003768 <RCC_PLL_GetFreqDomain_SYS>
 80036d0:	0003      	movs	r3, r0
 80036d2:	607b      	str	r3, [r7, #4]
      break;
 80036d4:	e00f      	b.n	80036f6 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <RCC_GetSystemClockFreq+0x54>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	2207      	movs	r2, #7
 80036de:	4013      	ands	r3, r2
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	0013      	movs	r3, r2
 80036e6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	4807      	ldr	r0, [pc, #28]	@ (8003708 <RCC_GetSystemClockFreq+0x58>)
 80036ec:	f7fc fd0a 	bl	8000104 <__udivsi3>
 80036f0:	0003      	movs	r3, r0
 80036f2:	607b      	str	r3, [r7, #4]
      break;
 80036f4:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	007a1200 	.word	0x007a1200
 8003704:	40021000 	.word	0x40021000
 8003708:	00f42400 	.word	0x00f42400

0800370c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003714:	f7ff fec4 	bl	80034a0 <LL_RCC_GetAHBPrescaler>
 8003718:	0003      	movs	r3, r0
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	220f      	movs	r2, #15
 800371e:	401a      	ands	r2, r3
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <RCC_GetHCLKClockFreq+0x2c>)
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	58d3      	ldr	r3, [r2, r3]
 8003726:	221f      	movs	r2, #31
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	40da      	lsrs	r2, r3
 800372e:	0013      	movs	r3, r2
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}
 8003738:	08003b58 	.word	0x08003b58

0800373c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003744:	f7ff feb8 	bl	80034b8 <LL_RCC_GetAPB1Prescaler>
 8003748:	0003      	movs	r3, r0
 800374a:	0b1a      	lsrs	r2, r3, #12
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <RCC_GetPCLK1ClockFreq+0x28>)
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	58d3      	ldr	r3, [r2, r3]
 8003752:	221f      	movs	r2, #31
 8003754:	4013      	ands	r3, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	40da      	lsrs	r2, r3
 800375a:	0013      	movs	r3, r2
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b002      	add	sp, #8
 8003762:	bd80      	pop	{r7, pc}
 8003764:	08003b98 	.word	0x08003b98

08003768 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800376e:	f7ff fed9 	bl	8003524 <LL_RCC_PLL_GetMainSource>
 8003772:	0003      	movs	r3, r0
 8003774:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d003      	beq.n	8003784 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d003      	beq.n	800378a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003782:	e005      	b.n	8003790 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003786:	607b      	str	r3, [r7, #4]
      break;
 8003788:	e005      	b.n	8003796 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800378c:	607b      	str	r3, [r7, #4]
      break;
 800378e:	e002      	b.n	8003796 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8003790:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003792:	607b      	str	r3, [r7, #4]
      break;
 8003794:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003796:	f7ff fead 	bl	80034f4 <LL_RCC_PLL_GetN>
 800379a:	0002      	movs	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4353      	muls	r3, r2
 80037a0:	001c      	movs	r4, r3
 80037a2:	f7ff fecb 	bl	800353c <LL_RCC_PLL_GetDivider>
 80037a6:	0003      	movs	r3, r0
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	3301      	adds	r3, #1
 80037ac:	0019      	movs	r1, r3
 80037ae:	0020      	movs	r0, r4
 80037b0:	f7fc fca8 	bl	8000104 <__udivsi3>
 80037b4:	0003      	movs	r3, r0
 80037b6:	001c      	movs	r4, r3
 80037b8:	f7ff fea8 	bl	800350c <LL_RCC_PLL_GetR>
 80037bc:	0003      	movs	r3, r0
 80037be:	0f5b      	lsrs	r3, r3, #29
 80037c0:	3301      	adds	r3, #1
 80037c2:	0019      	movs	r1, r3
 80037c4:	0020      	movs	r0, r4
 80037c6:	f7fc fc9d 	bl	8000104 <__udivsi3>
 80037ca:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b003      	add	sp, #12
 80037d2:	bd90      	pop	{r4, r7, pc}
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <LL_USART_IsEnabled>:
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <LL_USART_IsEnabled+0x18>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <LL_USART_IsEnabled+0x1a>
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b002      	add	sp, #8
 80037fc:	bd80      	pop	{r7, pc}

080037fe <LL_USART_SetPrescaler>:
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	220f      	movs	r2, #15
 800380e:	4393      	bics	r3, r2
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b292      	uxth	r2, r2
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <LL_USART_SetStopBitsLength>:
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <LL_USART_SetStopBitsLength+0x24>)
 8003834:	401a      	ands	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	ffffcfff 	.word	0xffffcfff

0800384c <LL_USART_SetHWFlowCtrl>:
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <LL_USART_SetHWFlowCtrl+0x24>)
 800385c:	401a      	ands	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	fffffcff 	.word	0xfffffcff

08003874 <LL_USART_SetBaudRate>:
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0b      	cmp	r3, #11
 8003886:	d846      	bhi.n	8003916 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d043      	beq.n	8003916 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	429a      	cmp	r2, r3
 8003896:	d126      	bne.n	80038e6 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	001a      	movs	r2, r3
 800389e:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <LL_USART_SetBaudRate+0xac>)
 80038a0:	0092      	lsls	r2, r2, #2
 80038a2:	58d3      	ldr	r3, [r2, r3]
 80038a4:	0019      	movs	r1, r3
 80038a6:	68b8      	ldr	r0, [r7, #8]
 80038a8:	f7fc fc2c 	bl	8000104 <__udivsi3>
 80038ac:	0003      	movs	r3, r0
 80038ae:	005a      	lsls	r2, r3, #1
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	085b      	lsrs	r3, r3, #1
 80038b4:	18d3      	adds	r3, r2, r3
 80038b6:	6a39      	ldr	r1, [r7, #32]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fc fc23 	bl	8000104 <__udivsi3>
 80038be:	0003      	movs	r3, r0
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <LL_USART_SetBaudRate+0xb0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	001a      	movs	r2, r3
 80038d4:	2307      	movs	r3, #7
 80038d6:	4013      	ands	r3, r2
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	60da      	str	r2, [r3, #12]
}
 80038e4:	e017      	b.n	8003916 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	001a      	movs	r2, r3
 80038ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003920 <LL_USART_SetBaudRate+0xac>)
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	58d3      	ldr	r3, [r2, r3]
 80038f2:	0019      	movs	r1, r3
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f7fc fc05 	bl	8000104 <__udivsi3>
 80038fa:	0003      	movs	r3, r0
 80038fc:	001a      	movs	r2, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	6a39      	ldr	r1, [r7, #32]
 8003906:	0018      	movs	r0, r3
 8003908:	f7fc fbfc 	bl	8000104 <__udivsi3>
 800390c:	0003      	movs	r3, r0
 800390e:	b29b      	uxth	r3, r3
 8003910:	001a      	movs	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	60da      	str	r2, [r3, #12]
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b006      	add	sp, #24
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	08003be0 	.word	0x08003be0
 8003924:	0000fff0 	.word	0x0000fff0

08003928 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b08b      	sub	sp, #44	@ 0x2c
 800392c:	af02      	add	r7, sp, #8
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003932:	231f      	movs	r3, #31
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f7ff ff4b 	bl	80037dc <LL_USART_IsEnabled>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d16a      	bne.n	8003a20 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a38      	ldr	r2, [pc, #224]	@ (8003a30 <LL_USART_Init+0x108>)
 8003950:	401a      	ands	r2, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4319      	orrs	r1, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4319      	orrs	r1, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	430b      	orrs	r3, r1
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0011      	movs	r1, r2
 8003976:	0018      	movs	r0, r3
 8003978:	f7ff ff54 	bl	8003824 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0011      	movs	r1, r2
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff ff61 	bl	800384c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <LL_USART_Init+0x10c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d105      	bne.n	800399e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003992:	2003      	movs	r0, #3
 8003994:	f7ff fdfc 	bl	8003590 <LL_RCC_GetUSARTClockFreq>
 8003998:	0003      	movs	r3, r0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e022      	b.n	80039e4 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a25      	ldr	r2, [pc, #148]	@ (8003a38 <LL_USART_Init+0x110>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d105      	bne.n	80039b2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80039a6:	200c      	movs	r0, #12
 80039a8:	f7ff fdf2 	bl	8003590 <LL_RCC_GetUSARTClockFreq>
 80039ac:	0003      	movs	r3, r0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e018      	b.n	80039e4 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <LL_USART_Init+0x114>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80039ba:	240c      	movs	r4, #12
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff fdc8 	bl	8003554 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e00b      	b.n	80039e4 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003a40 <LL_USART_Init+0x118>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d107      	bne.n	80039e4 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80039d4:	240c      	movs	r4, #12
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fdbb 	bl	8003554 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00f      	beq.n	8003a12 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80039f2:	231f      	movs	r3, #31
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	0023      	movs	r3, r4
 8003a0e:	f7ff ff31 	bl	8003874 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0011      	movs	r1, r2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff feef 	bl	80037fe <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003a20:	231f      	movs	r3, #31
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b009      	add	sp, #36	@ 0x24
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	efff69f3 	.word	0xefff69f3
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40004400 	.word	0x40004400
 8003a3c:	40004800 	.word	0x40004800
 8003a40:	40004c00 	.word	0x40004c00

08003a44 <memset>:
 8003a44:	0003      	movs	r3, r0
 8003a46:	1882      	adds	r2, r0, r2
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d100      	bne.n	8003a4e <memset+0xa>
 8003a4c:	4770      	bx	lr
 8003a4e:	7019      	strb	r1, [r3, #0]
 8003a50:	3301      	adds	r3, #1
 8003a52:	e7f9      	b.n	8003a48 <memset+0x4>

08003a54 <strchr>:
 8003a54:	b2c9      	uxtb	r1, r1
 8003a56:	7803      	ldrb	r3, [r0, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <strchr+0x12>
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	d100      	bne.n	8003a62 <strchr+0xe>
 8003a60:	4770      	bx	lr
 8003a62:	3001      	adds	r0, #1
 8003a64:	e7f7      	b.n	8003a56 <strchr+0x2>
 8003a66:	424b      	negs	r3, r1
 8003a68:	4159      	adcs	r1, r3
 8003a6a:	4249      	negs	r1, r1
 8003a6c:	4008      	ands	r0, r1
 8003a6e:	e7f7      	b.n	8003a60 <strchr+0xc>

08003a70 <strncpy>:
 8003a70:	0003      	movs	r3, r0
 8003a72:	b530      	push	{r4, r5, lr}
 8003a74:	001d      	movs	r5, r3
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d006      	beq.n	8003a88 <strncpy+0x18>
 8003a7a:	780c      	ldrb	r4, [r1, #0]
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	3301      	adds	r3, #1
 8003a80:	702c      	strb	r4, [r5, #0]
 8003a82:	3101      	adds	r1, #1
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	d1f5      	bne.n	8003a74 <strncpy+0x4>
 8003a88:	2100      	movs	r1, #0
 8003a8a:	189a      	adds	r2, r3, r2
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <strncpy+0x22>
 8003a90:	bd30      	pop	{r4, r5, pc}
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	e7f9      	b.n	8003a8c <strncpy+0x1c>

08003a98 <strstr>:
 8003a98:	780a      	ldrb	r2, [r1, #0]
 8003a9a:	b530      	push	{r4, r5, lr}
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	d10c      	bne.n	8003aba <strstr+0x22>
 8003aa0:	bd30      	pop	{r4, r5, pc}
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d108      	bne.n	8003ab8 <strstr+0x20>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	5ccc      	ldrb	r4, [r1, r3]
 8003aaa:	2c00      	cmp	r4, #0
 8003aac:	d0f8      	beq.n	8003aa0 <strstr+0x8>
 8003aae:	5cc5      	ldrb	r5, [r0, r3]
 8003ab0:	42a5      	cmp	r5, r4
 8003ab2:	d101      	bne.n	8003ab8 <strstr+0x20>
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	e7f7      	b.n	8003aa8 <strstr+0x10>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	7803      	ldrb	r3, [r0, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <strstr+0xa>
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	e7ed      	b.n	8003aa0 <strstr+0x8>

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	4c0c      	ldr	r4, [pc, #48]	@ (8003afc <__libc_init_array+0x38>)
 8003aca:	4d0d      	ldr	r5, [pc, #52]	@ (8003b00 <__libc_init_array+0x3c>)
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	f000 f823 	bl	8003b20 <_init>
 8003ada:	4c0a      	ldr	r4, [pc, #40]	@ (8003b04 <__libc_init_array+0x40>)
 8003adc:	4d0a      	ldr	r5, [pc, #40]	@ (8003b08 <__libc_init_array+0x44>)
 8003ade:	1b64      	subs	r4, r4, r5
 8003ae0:	10a4      	asrs	r4, r4, #2
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	00b3      	lsls	r3, r6, #2
 8003aea:	58eb      	ldr	r3, [r5, r3]
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	00b3      	lsls	r3, r6, #2
 8003af4:	58eb      	ldr	r3, [r5, r3]
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	08003c18 	.word	0x08003c18
 8003b00:	08003c18 	.word	0x08003c18
 8003b04:	08003c1c 	.word	0x08003c1c
 8003b08:	08003c18 	.word	0x08003c18

08003b0c <memcpy>:
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	b510      	push	{r4, lr}
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d100      	bne.n	8003b16 <memcpy+0xa>
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	5ccc      	ldrb	r4, [r1, r3]
 8003b18:	54c4      	strb	r4, [r0, r3]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	e7f8      	b.n	8003b10 <memcpy+0x4>
	...

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
