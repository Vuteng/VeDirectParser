
VEDirect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003884  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003940  08003940  00004940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a14  08003a14  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a14  08003a14  00004a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a1c  08003a1c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a20  08003a20  00004a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  2000000c  08003a30  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08003a30  000054cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf13  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  00011f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  000144c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  00015048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019148  00000000  00000000  00015907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e741  00000000  00000000  0002ea4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009991e  00000000  00000000  0003d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000d6af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d92e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003928 	.word	0x08003928

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003928 	.word	0x08003928

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	240c      	movs	r4, #12
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 f92f 	bl	8003890 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <MX_GPIO_Init+0x9c>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 ff02 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2220      	movs	r2, #32
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2201      	movs	r2, #1
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006a2:	187a      	adds	r2, r7, r1
 80006a4:	23a0      	movs	r3, #160	@ 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fd8a 	bl	80011c4 <HAL_GPIO_Init>

}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b009      	add	sp, #36	@ 0x24
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006c4:	f3ef 8310 	mrs	r3, PRIMASK
 80006c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80006ca:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f383 8810 	msr	PRIMASK, r3
}
 80006d8:	46c0      	nop			@ (mov r8, r8)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2220      	movs	r2, #32
 80006e0:	431a      	orrs	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	f383 8810 	msr	PRIMASK, r3
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b006      	add	sp, #24
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int counter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fc23 	bl	8000f50 <HAL_Init>

 
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f80f 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f7ff ff85 	bl	800061c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000712:	f000 fb03 	bl	8000d1c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000716:	f000 fab3 	bl	8000c80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 LL_USART_EnableIT_RXNE(USART3);
 800071a:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <main+0x2c>)
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ffcd 	bl	80006bc <LL_USART_EnableIT_RXNE_RXFNE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Continuously check if a complete frame is ready for processing
	  process_frame();
 8000722:	f000 f84b 	bl	80007bc <process_frame>
 8000726:	e7fc      	b.n	8000722 <main+0x26>
 8000728:	40004800 	.word	0x40004800

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b093      	sub	sp, #76	@ 0x4c
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2410      	movs	r4, #16
 8000734:	193b      	adds	r3, r7, r4
 8000736:	0018      	movs	r0, r3
 8000738:	2338      	movs	r3, #56	@ 0x38
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f003 f8a7 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000742:	003b      	movs	r3, r7
 8000744:	0018      	movs	r0, r3
 8000746:	2310      	movs	r3, #16
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f003 f8a0 	bl	8003890 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 feb7 	bl	80014c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2202      	movs	r2, #2
 800075e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	0052      	lsls	r2, r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2240      	movs	r2, #64	@ 0x40
 8000772:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	f000 feef 	bl	8001560 <HAL_RCC_OscConfig>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000786:	f000 f86b 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	003b      	movs	r3, r7
 800078c:	2207      	movs	r2, #7
 800078e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	003b      	movs	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a2:	003b      	movs	r3, r7
 80007a4:	2100      	movs	r1, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 f9f4 	bl	8001b94 <HAL_RCC_ClockConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007b0:	f000 f856 	bl	8000860 <Error_Handler>
  }
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b013      	add	sp, #76	@ 0x4c
 80007ba:	bd90      	pop	{r4, r7, pc}

080007bc <process_frame>:

/* USER CODE BEGIN 4 */

void process_frame(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    if (frame_ready)
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <process_frame+0x4c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d01a      	beq.n	8000800 <process_frame+0x44>
    {
        // Check if the calculated checksum matches the received checksum
        if ((checksum_calculated % 256) == checksum_received)
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <process_frame+0x50>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <process_frame+0x54>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d109      	bne.n	80007ee <process_frame+0x32>
        {
            HAL_UART_Transmit(&huart2, g_uart_buffer, uart_index, 1000);
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <process_frame+0x58>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	23fa      	movs	r3, #250	@ 0xfa
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	490c      	ldr	r1, [pc, #48]	@ (8000818 <process_frame+0x5c>)
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <process_frame+0x60>)
 80007e8:	f001 fd8c 	bl	8002304 <HAL_UART_Transmit>
 80007ec:	e006      	b.n	80007fc <process_frame+0x40>
        }
        else
        {
            // Invalid checksum
            HAL_UART_Transmit(&huart2, (uint8_t *)"Checksum Error\n", 15, 1000);
 80007ee:	23fa      	movs	r3, #250	@ 0xfa
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	490b      	ldr	r1, [pc, #44]	@ (8000820 <process_frame+0x64>)
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <process_frame+0x60>)
 80007f6:	220f      	movs	r2, #15
 80007f8:	f001 fd84 	bl	8002304 <HAL_UART_Transmit>
        }

        // Clear buffers and reset flags
        reset_frame_data();
 80007fc:	f000 f812 	bl	8000824 <reset_frame_data>
    }
}
 8000800:	46c0      	nop			@ (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	2000022a 	.word	0x2000022a
 800080c:	2000022b 	.word	0x2000022b
 8000810:	2000022c 	.word	0x2000022c
 8000814:	20000228 	.word	0x20000228
 8000818:	20000230 	.word	0x20000230
 800081c:	20000434 	.word	0x20000434
 8000820:	08003940 	.word	0x08003940

08000824 <reset_frame_data>:

void reset_frame_data(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    // Clear the UART buffer
    memset(g_uart_buffer, 0, BUFFER_SIZE);
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	009a      	lsls	r2, r3, #2
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <reset_frame_data+0x2c>)
 800082e:	2100      	movs	r1, #0
 8000830:	0018      	movs	r0, r3
 8000832:	f003 f82d 	bl	8003890 <memset>

    // Reset flags
    frame_ready = 0;
 8000836:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <reset_frame_data+0x30>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
    checksum_calculated = 0;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <reset_frame_data+0x34>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
    uart_index = 0;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <reset_frame_data+0x38>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	20000230 	.word	0x20000230
 8000854:	2000022a 	.word	0x2000022a
 8000858:	2000022b 	.word	0x2000022b
 800085c:	20000228 	.word	0x20000228

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_MspInit+0x44>)
 8000874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_MspInit+0x44>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <HAL_MspInit+0x44>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x44>)
 800088c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_MspInit+0x44>)
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	0549      	lsls	r1, r1, #21
 8000894:	430a      	orrs	r2, r1
 8000896:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000898:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_MspInit+0x44>)
 800089a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	055b      	lsls	r3, r3, #21
 80008a0:	4013      	ands	r3, r2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000

080008b4 <LL_USART_IsActiveFlag_ORE>:
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	2208      	movs	r2, #8
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b08      	cmp	r3, #8
 80008c6:	d101      	bne.n	80008cc <LL_USART_IsActiveFlag_ORE+0x18>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <LL_USART_IsActiveFlag_ORE+0x1a>
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	2220      	movs	r2, #32
 80008e4:	4013      	ands	r3, r2
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d101      	bne.n	80008ee <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b002      	add	sp, #8
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LL_USART_ClearFlag_ORE>:
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2208      	movs	r2, #8
 8000904:	621a      	str	r2, [r3, #32]
}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}

0800090e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800091a:	b2db      	uxtb	r3, r3
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094c:	f000 fb6a 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <USART3_4_LPUART1_IRQHandler+0xf0>)
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ffb8 	bl	80008d6 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d055      	beq.n	8000a16 <USART3_4_LPUART1_IRQHandler+0xbe>
  {
    char received_char = LL_USART_ReceiveData8(USART3);
 800096a:	1dfc      	adds	r4, r7, #7
 800096c:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <USART3_4_LPUART1_IRQHandler+0xf0>)
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ffcd 	bl	800090e <LL_USART_ReceiveData8>
 8000974:	0003      	movs	r3, r0
 8000976:	7023      	strb	r3, [r4, #0]


    if (uart_index < BUFFER_SIZE - 1)
 8000978:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <USART3_4_LPUART1_IRQHandler+0xf4>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	b29a      	uxth	r2, r3
 800097e:	23ff      	movs	r3, #255	@ 0xff
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	429a      	cmp	r2, r3
 8000984:	d847      	bhi.n	8000a16 <USART3_4_LPUART1_IRQHandler+0xbe>
    {
      uart_buffer[uart_index++] = received_char;
 8000986:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <USART3_4_LPUART1_IRQHandler+0xf4>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	b291      	uxth	r1, r2
 8000990:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <USART3_4_LPUART1_IRQHandler+0xf4>)
 8000992:	8011      	strh	r1, [r2, #0]
 8000994:	0019      	movs	r1, r3
 8000996:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <USART3_4_LPUART1_IRQHandler+0xf8>)
 8000998:	1dfa      	adds	r2, r7, #7
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	545a      	strb	r2, [r3, r1]

      checksum_calculated = (checksum_calculated + (uint8_t)received_char);
 800099e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <USART3_4_LPUART1_IRQHandler+0xfc>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <USART3_4_LPUART1_IRQHandler+0xfc>)
 80009ae:	701a      	strb	r2, [r3, #0]


      if (!is_checksum_received)
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <USART3_4_LPUART1_IRQHandler+0x100>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d10b      	bne.n	80009d0 <USART3_4_LPUART1_IRQHandler+0x78>
      {
        // Calculate checksum by adding the received character
        //checksum_calculated = (checksum_calculated + (uint8_t)received_char) & 256;

        // Check for the "Checksum\t" field in the buffer
        if (strstr(uart_buffer, "Checksum\t") != NULL)
 80009b8:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <USART3_4_LPUART1_IRQHandler+0x104>)
 80009ba:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <USART3_4_LPUART1_IRQHandler+0xf8>)
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 ff6e 	bl	80038a0 <strstr>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d026      	beq.n	8000a16 <USART3_4_LPUART1_IRQHandler+0xbe>
        {
          // Indicate that the checksum string has been detected, so the next character is the checksum
          is_checksum_received = 1;
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <USART3_4_LPUART1_IRQHandler+0x100>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e022      	b.n	8000a16 <USART3_4_LPUART1_IRQHandler+0xbe>
        }
      }
      else
      {
        // Once the checksum string has been detected, the next character is the actual checksum
        checksum_received = (uint8_t)received_char;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <USART3_4_LPUART1_IRQHandler+0x108>)
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	701a      	strb	r2, [r3, #0]

        // Calculate checksum by adding the received character
        checksum_calculated = (checksum_calculated + (uint8_t)received_char) %256;
 80009d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <USART3_4_LPUART1_IRQHandler+0xfc>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	18d3      	adds	r3, r2, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <USART3_4_LPUART1_IRQHandler+0xfc>)
 80009e8:	701a      	strb	r2, [r3, #0]


        // Mark the frame as ready for processing in the main loop
        frame_ready = 1;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <USART3_4_LPUART1_IRQHandler+0x10c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]

        //put local buffer into global buffer for main function to transmit
        memcpy(g_uart_buffer, uart_buffer, BUFFER_SIZE);
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <USART3_4_LPUART1_IRQHandler+0x110>)
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <USART3_4_LPUART1_IRQHandler+0xf8>)
 80009f4:	0010      	movs	r0, r2
 80009f6:	0019      	movs	r1, r3
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	001a      	movs	r2, r3
 80009fe:	f002 ff89 	bl	8003914 <memcpy>

        //set local buffer to 0 for new frame
        memset(uart_buffer, 0, BUFFER_SIZE);
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	009a      	lsls	r2, r3, #2
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <USART3_4_LPUART1_IRQHandler+0xf8>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 ff40 	bl	8003890 <memset>

        //reset checksum received flag
        is_checksum_received = 0;
 8000a10:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <USART3_4_LPUART1_IRQHandler+0x100>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END USART3_4_LPUART1_IRQn 0 */

  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */
    // Optional: Check for errors like Overrun (ORE) and clear them if needed
    if (LL_USART_IsActiveFlag_ORE(USART3))
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <USART3_4_LPUART1_IRQHandler+0xf0>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff4b 	bl	80008b4 <LL_USART_IsActiveFlag_ORE>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d003      	beq.n	8000a2a <USART3_4_LPUART1_IRQHandler+0xd2>
    {
        LL_USART_ClearFlag_ORE(USART3);  // Clear overrun error flag
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <USART3_4_LPUART1_IRQHandler+0xf0>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff ff67 	bl	80008f8 <LL_USART_ClearFlag_ORE>
    }
    if (LL_USART_IsActiveFlag_ORE(USART4))
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <USART3_4_LPUART1_IRQHandler+0x114>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff41 	bl	80008b4 <LL_USART_IsActiveFlag_ORE>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d003      	beq.n	8000a3e <USART3_4_LPUART1_IRQHandler+0xe6>
    {
        LL_USART_ClearFlag_ORE(USART4);  // Clear overrun error flag
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <USART3_4_LPUART1_IRQHandler+0x114>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <LL_USART_ClearFlag_ORE>
    }
  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b003      	add	sp, #12
 8000a44:	bd90      	pop	{r4, r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	40004800 	.word	0x40004800
 8000a4c:	20000228 	.word	0x20000228
 8000a50:	20000028 	.word	0x20000028
 8000a54:	2000022b 	.word	0x2000022b
 8000a58:	20000430 	.word	0x20000430
 8000a5c:	08003950 	.word	0x08003950
 8000a60:	2000022c 	.word	0x2000022c
 8000a64:	2000022a 	.word	0x2000022a
 8000a68:	20000230 	.word	0x20000230
 8000a6c:	40004c00 	.word	0x40004c00

08000a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a8e:	d809      	bhi.n	8000aa4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	231f      	movs	r3, #31
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_EnableIRQ+0x30>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4091      	lsls	r1, r2
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	0002      	movs	r2, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac4:	d828      	bhi.n	8000b18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b84 <__NVIC_SetPriority+0xd4>)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	33c0      	adds	r3, #192	@ 0xc0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	589b      	ldr	r3, [r3, r2]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	@ 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	@ 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	481f      	ldr	r0, [pc, #124]	@ (8000b84 <__NVIC_SetPriority+0xd4>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	33c0      	adds	r3, #192	@ 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b16:	e031      	b.n	8000b7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	0019      	movs	r1, r3
 8000b20:	230f      	movs	r3, #15
 8000b22:	400b      	ands	r3, r1
 8000b24:	3b08      	subs	r3, #8
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3306      	adds	r3, #6
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	3304      	adds	r3, #4
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	@ 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	@ 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <__NVIC_SetPriority+0xd8>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001c      	movs	r4, r3
 8000b68:	230f      	movs	r3, #15
 8000b6a:	4023      	ands	r3, r4
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	430a      	orrs	r2, r1
 8000b72:	3306      	adds	r3, #6
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	18c3      	adds	r3, r0, r3
 8000b78:	3304      	adds	r3, #4
 8000b7a:	601a      	str	r2, [r3, #0]
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b003      	add	sp, #12
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <LL_USART_Enable>:
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <LL_USART_ConfigAsyncMode>:
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <LL_USART_ConfigAsyncMode+0x2c>)
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	222a      	movs	r2, #42	@ 0x2a
 8000bc2:	4393      	bics	r3, r2
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	ffffb7ff 	.word	0xffffb7ff

08000bd8 <LL_USART_IsActiveFlag_TEACK>:
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	039b      	lsls	r3, r3, #14
 8000be8:	401a      	ands	r2, r3
 8000bea:	2380      	movs	r3, #128	@ 0x80
 8000bec:	039b      	lsls	r3, r3, #14
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d101      	bne.n	8000bf6 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <LL_USART_IsActiveFlag_REACK>:
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69da      	ldr	r2, [r3, #28]
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	03db      	lsls	r3, r3, #15
 8000c10:	401a      	ands	r2, r3
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	03db      	lsls	r3, r3, #15
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d101      	bne.n	8000c1e <LL_USART_IsActiveFlag_REACK+0x1e>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <LL_USART_IsActiveFlag_REACK+0x20>
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c32:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4013      	ands	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000c5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <LL_IOP_GRP1_EnableClock+0x28>)
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b004      	add	sp, #16
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000c86:	4a24      	ldr	r2, [pc, #144]	@ (8000d18 <MX_USART2_UART_Init+0x98>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000c8c:	22e1      	movs	r2, #225	@ 0xe1
 8000c8e:	0252      	lsls	r2, r2, #9
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f001 fac4 	bl	8002258 <HAL_UART_Init>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cd4:	f7ff fdc4 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f002 f8e1 	bl	8002ea4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ce6:	f7ff fdbb 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cec:	2100      	movs	r1, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f002 f918 	bl	8002f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000cf8:	f7ff fdb2 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <MX_USART2_UART_Init+0x94>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f002 f896 	bl	8002e30 <HAL_UARTEx_DisableFifoMode>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f7ff fdaa 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000434 	.word	0x20000434
 8000d18:	40004400 	.word	0x40004400

08000d1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b08f      	sub	sp, #60	@ 0x3c
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d22:	2418      	movs	r4, #24
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	0018      	movs	r0, r3
 8000d28:	2320      	movs	r3, #32
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f002 fdaf 	bl	8003890 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	003b      	movs	r3, r7
 8000d34:	0018      	movs	r0, r3
 8000d36:	2318      	movs	r3, #24
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f002 fda8 	bl	8003890 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	02db      	lsls	r3, r3, #11
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ff6f 	bl	8000c28 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff ff82 	bl	8000c54 <LL_IOP_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC4   ------> USART3_TX
  PC5   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d50:	003b      	movs	r3, r7
 8000d52:	2210      	movs	r2, #16
 8000d54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d56:	003b      	movs	r3, r7
 8000d58:	2202      	movs	r2, #2
 8000d5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d62:	003b      	movs	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d68:	003b      	movs	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d74:	003b      	movs	r3, r7
 8000d76:	4a2f      	ldr	r2, [pc, #188]	@ (8000e34 <MX_USART3_UART_Init+0x118>)
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f002 fa2b 	bl	80031d6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2220      	movs	r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2202      	movs	r2, #2
 8000d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000d9e:	003b      	movs	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	003b      	movs	r3, r7
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <MX_USART3_UART_Init+0x118>)
 8000da8:	0019      	movs	r1, r3
 8000daa:	0010      	movs	r0, r2
 8000dac:	f002 fa13 	bl	80031d6 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0);
 8000db0:	2100      	movs	r1, #0
 8000db2:	201d      	movs	r0, #29
 8000db4:	f7ff fe7c 	bl	8000ab0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000db8:	201d      	movs	r0, #29
 8000dba:	f7ff fe5f 	bl	8000a7c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 19200;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2296      	movs	r2, #150	@ 0x96
 8000dc8:	01d2      	lsls	r2, r2, #7
 8000dca:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dcc:	0021      	movs	r1, r4
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART3, &USART_InitStruct);
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <MX_USART3_UART_Init+0x11c>)
 8000df6:	0019      	movs	r1, r3
 8000df8:	0010      	movs	r0, r2
 8000dfa:	f002 fcbb 	bl	8003774 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USART3_UART_Init+0x11c>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f7ff fed1 	bl	8000ba8 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART3 */
 
  /* USER CODE END WKUPType USART3 */

  LL_USART_Enable(USART3);
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USART3_UART_Init+0x11c>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff febf 	bl	8000b8c <LL_USART_Enable>

  /* Polling USART3 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART3))) || (!(LL_USART_IsActiveFlag_REACK(USART3))))
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USART3_UART_Init+0x11c>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fee0 	bl	8000bd8 <LL_USART_IsActiveFlag_TEACK>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d0f9      	beq.n	8000e10 <MX_USART3_UART_Init+0xf4>
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USART3_UART_Init+0x11c>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f7ff feee 	bl	8000c00 <LL_USART_IsActiveFlag_REACK>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d0f3      	beq.n	8000e10 <MX_USART3_UART_Init+0xf4>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00f      	add	sp, #60	@ 0x3c
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	50000800 	.word	0x50000800
 8000e38:	40004800 	.word	0x40004800

08000e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b097      	sub	sp, #92	@ 0x5c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	2344      	movs	r3, #68	@ 0x44
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f002 fd1e 	bl	8003890 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	2410      	movs	r4, #16
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2334      	movs	r3, #52	@ 0x34
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f002 fd16 	bl	8003890 <memset>
  if(uartHandle->Instance==USART2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <HAL_UART_MspInit+0xb8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d13e      	bne.n	8000eec <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2202      	movs	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 f833 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e86:	f7ff fceb 	bl	8000860 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	0289      	lsls	r1, r1, #10
 8000e94:	430a      	orrs	r2, r1
 8000e96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000e9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_UART_MspInit+0xbc>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	2144      	movs	r1, #68	@ 0x44
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2201      	movs	r2, #1
 8000edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	187a      	adds	r2, r7, r1
 8000ee0:	23a0      	movs	r3, #160	@ 0xa0
 8000ee2:	05db      	lsls	r3, r3, #23
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f96c 	bl	80011c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eec:	46c0      	nop			@ (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b017      	add	sp, #92	@ 0x5c
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40021000 	.word	0x40021000

08000efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
ldr   r0, =_estack
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fdb6 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f2a:	f002 fccf 	bl	80038cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f2e:	f7ff fbe5 	bl	80006fc <main>

08000f32 <LoopForever>:

LoopForever:
  b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
ldr   r0, =_estack
 8000f34:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	200004cc 	.word	0x200004cc

08000f4c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_COMP_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_Init+0x3c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_Init+0x3c>)
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0049      	lsls	r1, r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f810 	bl	8000f90 <HAL_InitTick>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	e001      	b.n	8000f80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fc76 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <HAL_InitTick+0x88>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02b      	beq.n	8001000 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_InitTick+0x8c>)
 8000faa:	681c      	ldr	r4, [r3, #0]
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_InitTick+0x88>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	23fa      	movs	r3, #250	@ 0xfa
 8000fb4:	0098      	lsls	r0, r3, #2
 8000fb6:	f7ff f8a5 	bl	8000104 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0020      	movs	r0, r4
 8000fc0:	f7ff f8a0 	bl	8000104 <__udivsi3>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 f8ef 	bl	80011aa <HAL_SYSTICK_Config>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d112      	bne.n	8000ff6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d80a      	bhi.n	8000fec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	425b      	negs	r3, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f8ce 	bl	8001180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_InitTick+0x90>)
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e00d      	b.n	8001008 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	e008      	b.n	8001008 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e003      	b.n	8001008 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	0018      	movs	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	b005      	add	sp, #20
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008
 800101c:	20000000 	.word	0x20000000
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	001a      	movs	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	18d2      	adds	r2, r2, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_IncTick+0x20>)
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000008 	.word	0x20000008
 8001044:	200004c8 	.word	0x200004c8

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	@ (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	200004c8 	.word	0x200004c8

0800105c <__NVIC_SetPriority>:
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	0002      	movs	r2, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001070:	d828      	bhi.n	80010c4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001072:	4a2f      	ldr	r2, [pc, #188]	@ (8001130 <__NVIC_SetPriority+0xd4>)
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b25b      	sxtb	r3, r3
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	33c0      	adds	r3, #192	@ 0xc0
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	589b      	ldr	r3, [r3, r2]
 8001082:	1dfa      	adds	r2, r7, #7
 8001084:	7812      	ldrb	r2, [r2, #0]
 8001086:	0011      	movs	r1, r2
 8001088:	2203      	movs	r2, #3
 800108a:	400a      	ands	r2, r1
 800108c:	00d2      	lsls	r2, r2, #3
 800108e:	21ff      	movs	r1, #255	@ 0xff
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	43d2      	mvns	r2, r2
 8001096:	401a      	ands	r2, r3
 8001098:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	019b      	lsls	r3, r3, #6
 800109e:	22ff      	movs	r2, #255	@ 0xff
 80010a0:	401a      	ands	r2, r3
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	0018      	movs	r0, r3
 80010a8:	2303      	movs	r3, #3
 80010aa:	4003      	ands	r3, r0
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <__NVIC_SetPriority+0xd4>)
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	430a      	orrs	r2, r1
 80010bc:	33c0      	adds	r3, #192	@ 0xc0
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	501a      	str	r2, [r3, r0]
}
 80010c2:	e031      	b.n	8001128 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001134 <__NVIC_SetPriority+0xd8>)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0019      	movs	r1, r3
 80010cc:	230f      	movs	r3, #15
 80010ce:	400b      	ands	r3, r1
 80010d0:	3b08      	subs	r3, #8
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3306      	adds	r3, #6
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	18d3      	adds	r3, r2, r3
 80010da:	3304      	adds	r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	7812      	ldrb	r2, [r2, #0]
 80010e2:	0011      	movs	r1, r2
 80010e4:	2203      	movs	r2, #3
 80010e6:	400a      	ands	r2, r1
 80010e8:	00d2      	lsls	r2, r2, #3
 80010ea:	21ff      	movs	r1, #255	@ 0xff
 80010ec:	4091      	lsls	r1, r2
 80010ee:	000a      	movs	r2, r1
 80010f0:	43d2      	mvns	r2, r2
 80010f2:	401a      	ands	r2, r3
 80010f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	22ff      	movs	r2, #255	@ 0xff
 80010fc:	401a      	ands	r2, r3
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	2303      	movs	r3, #3
 8001106:	4003      	ands	r3, r0
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <__NVIC_SetPriority+0xd8>)
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	001c      	movs	r4, r3
 8001114:	230f      	movs	r3, #15
 8001116:	4023      	ands	r3, r4
 8001118:	3b08      	subs	r3, #8
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	430a      	orrs	r2, r1
 800111e:	3306      	adds	r3, #6
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	18c3      	adds	r3, r0, r3
 8001124:	3304      	adds	r3, #4
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b003      	add	sp, #12
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	045b      	lsls	r3, r3, #17
 8001148:	429a      	cmp	r2, r3
 800114a:	d301      	bcc.n	8001150 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114c:	2301      	movs	r3, #1
 800114e:	e010      	b.n	8001172 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <SysTick_Config+0x44>)
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	3a01      	subs	r2, #1
 8001156:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001158:	2301      	movs	r3, #1
 800115a:	425b      	negs	r3, r3
 800115c:	2103      	movs	r1, #3
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff ff7c 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x44>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x44>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	210f      	movs	r1, #15
 800118c:	187b      	adds	r3, r7, r1
 800118e:	1c02      	adds	r2, r0, #0
 8001190:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	187b      	adds	r3, r7, r1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	0011      	movs	r1, r2
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ffbf 	bl	8001138 <SysTick_Config>
 80011ba:	0003      	movs	r3, r0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e147      	b.n	8001464 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4091      	lsls	r1, r2
 80011de:	000a      	movs	r2, r1
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <HAL_GPIO_Init+0x28>
 80011ea:	e138      	b.n	800145e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x40>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	4013      	ands	r3, r2
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	2201      	movs	r2, #1
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2203      	movs	r2, #3
 800126c:	4013      	ands	r3, r2
 800126e:	2b03      	cmp	r3, #3
 8001270:	d017      	beq.n	80012a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d123      	bne.n	80012f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2207      	movs	r2, #7
 80012c0:	4013      	ands	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2107      	movs	r1, #7
 80012da:	400b      	ands	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	401a      	ands	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	23c0      	movs	r3, #192	@ 0xc0
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d100      	bne.n	8001338 <HAL_GPIO_Init+0x174>
 8001336:	e092      	b.n	800145e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001338:	4a50      	ldr	r2, [pc, #320]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3318      	adds	r3, #24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	589b      	ldr	r3, [r3, r2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2203      	movs	r2, #3
 800134a:	4013      	ands	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	220f      	movs	r2, #15
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	23a0      	movs	r3, #160	@ 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	429a      	cmp	r2, r3
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x1ca>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	@ (8001480 <HAL_GPIO_Init+0x2bc>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x1c6>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a44      	ldr	r2, [pc, #272]	@ (8001484 <HAL_GPIO_Init+0x2c0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x1c2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a43      	ldr	r2, [pc, #268]	@ (8001488 <HAL_GPIO_Init+0x2c4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x1be>
 800137e:	2303      	movs	r3, #3
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x1cc>
 8001382:	2305      	movs	r3, #5
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x1cc>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x1cc>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x1cc>
 800138e:	2300      	movs	r3, #0
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	2103      	movs	r1, #3
 8001394:	400a      	ands	r2, r1
 8001396:	00d2      	lsls	r2, r2, #3
 8001398:	4093      	lsls	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013a0:	4936      	ldr	r1, [pc, #216]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3318      	adds	r3, #24
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ae:	4b33      	ldr	r3, [pc, #204]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	035b      	lsls	r3, r3, #13
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	@ 0x80
 80013ee:	039b      	lsls	r3, r3, #14
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001402:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 8001404:	2384      	movs	r3, #132	@ 0x84
 8001406:	58d3      	ldr	r3, [r2, r3]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43da      	mvns	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001428:	4914      	ldr	r1, [pc, #80]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 800142a:	2284      	movs	r2, #132	@ 0x84
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43da      	mvns	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	025b      	lsls	r3, r3, #9
 800144a:	4013      	ands	r3, r2
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001456:	4909      	ldr	r1, [pc, #36]	@ (800147c <HAL_GPIO_Init+0x2b8>)
 8001458:	2280      	movs	r2, #128	@ 0x80
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	40da      	lsrs	r2, r3
 800146c:	1e13      	subs	r3, r2, #0
 800146e:	d000      	beq.n	8001472 <HAL_GPIO_Init+0x2ae>
 8001470:	e6b0      	b.n	80011d4 <HAL_GPIO_Init+0x10>
  }
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b006      	add	sp, #24
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021800 	.word	0x40021800
 8001480:	50000400 	.word	0x50000400
 8001484:	50000800 	.word	0x50000800
 8001488:	50000c00 	.word	0x50000c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	0008      	movs	r0, r1
 8001496:	0011      	movs	r1, r2
 8001498:	1cbb      	adds	r3, r7, #2
 800149a:	1c02      	adds	r2, r0, #0
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	1c7b      	adds	r3, r7, #1
 80014a0:	1c0a      	adds	r2, r1, #0
 80014a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a4:	1c7b      	adds	r3, r7, #1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ac:	1cbb      	adds	r3, r7, #2
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	881a      	ldrh	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a19      	ldr	r2, [pc, #100]	@ (800153c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d11f      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	0013      	movs	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	189b      	adds	r3, r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4912      	ldr	r1, [pc, #72]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7fe fe02 	bl	8000104 <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	3301      	adds	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001506:	e008      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3b01      	subs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e001      	b.n	800151a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e009      	b.n	800152e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	401a      	ands	r2, r3
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	429a      	cmp	r2, r3
 800152a:	d0ed      	beq.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	40007000 	.word	0x40007000
 800153c:	fffff9ff 	.word	0xfffff9ff
 8001540:	20000000 	.word	0x20000000
 8001544:	000f4240 	.word	0x000f4240

08001548 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <LL_RCC_GetAPB1Prescaler+0x14>)
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	23e0      	movs	r3, #224	@ 0xe0
 8001552:	01db      	lsls	r3, r3, #7
 8001554:	4013      	ands	r3, r2
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e2fe      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_RCC_OscConfig+0x1e>
 800157c:	e07c      	b.n	8001678 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157e:	4bc3      	ldr	r3, [pc, #780]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2238      	movs	r2, #56	@ 0x38
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001588:	4bc0      	ldr	r3, [pc, #768]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b10      	cmp	r3, #16
 8001596:	d102      	bne.n	800159e <HAL_RCC_OscConfig+0x3e>
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d10b      	bne.n	80015bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4bb9      	ldr	r3, [pc, #740]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	d062      	beq.n	8001676 <HAL_RCC_OscConfig+0x116>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d15e      	bne.n	8001676 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e2d9      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x78>
 80015c8:	4bb0      	ldr	r3, [pc, #704]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4baf      	ldr	r3, [pc, #700]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	0249      	lsls	r1, r1, #9
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e020      	b.n	800161a <HAL_RCC_OscConfig+0xba>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	23a0      	movs	r3, #160	@ 0xa0
 80015de:	02db      	lsls	r3, r3, #11
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d10e      	bne.n	8001602 <HAL_RCC_OscConfig+0xa2>
 80015e4:	4ba9      	ldr	r3, [pc, #676]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4ba8      	ldr	r3, [pc, #672]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	02c9      	lsls	r1, r1, #11
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	4ba6      	ldr	r3, [pc, #664]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4ba5      	ldr	r3, [pc, #660]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80015f8:	2180      	movs	r1, #128	@ 0x80
 80015fa:	0249      	lsls	r1, r1, #9
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e00b      	b.n	800161a <HAL_RCC_OscConfig+0xba>
 8001602:	4ba2      	ldr	r3, [pc, #648]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4ba1      	ldr	r3, [pc, #644]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001608:	49a1      	ldr	r1, [pc, #644]	@ (8001890 <HAL_RCC_OscConfig+0x330>)
 800160a:	400a      	ands	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	4b9f      	ldr	r3, [pc, #636]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b9e      	ldr	r3, [pc, #632]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001614:	499f      	ldr	r1, [pc, #636]	@ (8001894 <HAL_RCC_OscConfig+0x334>)
 8001616:	400a      	ands	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d014      	beq.n	800164c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fd11 	bl	8001048 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fd0c 	bl	8001048 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e298      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b93      	ldr	r3, [pc, #588]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xcc>
 800164a:	e015      	b.n	8001678 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fcfc 	bl	8001048 <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001656:	f7ff fcf7 	bl	8001048 <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b64      	cmp	r3, #100	@ 0x64
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e283      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001668:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	029b      	lsls	r3, r3, #10
 8001670:	4013      	ands	r3, r2
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0xf6>
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2202      	movs	r2, #2
 800167e:	4013      	ands	r3, r2
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x124>
 8001682:	e099      	b.n	80017b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001684:	4b81      	ldr	r3, [pc, #516]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2238      	movs	r2, #56	@ 0x38
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168e:	4b7f      	ldr	r3, [pc, #508]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2203      	movs	r2, #3
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b10      	cmp	r3, #16
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x144>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d002      	beq.n	80016aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d135      	bne.n	8001716 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016aa:	4b78      	ldr	r3, [pc, #480]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4013      	ands	r3, r2
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x162>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e256      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b72      	ldr	r3, [pc, #456]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a74      	ldr	r2, [pc, #464]	@ (8001898 <HAL_RCC_OscConfig+0x338>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	021a      	lsls	r2, r3, #8
 80016d2:	4b6e      	ldr	r3, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	4b6b      	ldr	r3, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6e      	ldr	r2, [pc, #440]	@ (800189c <HAL_RCC_OscConfig+0x33c>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b67      	ldr	r3, [pc, #412]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016f2:	4b66      	ldr	r3, [pc, #408]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0adb      	lsrs	r3, r3, #11
 80016f8:	2207      	movs	r2, #7
 80016fa:	4013      	ands	r3, r2
 80016fc:	4a68      	ldr	r2, [pc, #416]	@ (80018a0 <HAL_RCC_OscConfig+0x340>)
 80016fe:	40da      	lsrs	r2, r3
 8001700:	4b68      	ldr	r3, [pc, #416]	@ (80018a4 <HAL_RCC_OscConfig+0x344>)
 8001702:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001704:	4b68      	ldr	r3, [pc, #416]	@ (80018a8 <HAL_RCC_OscConfig+0x348>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff fc41 	bl	8000f90 <HAL_InitTick>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d051      	beq.n	80017b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e22c      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d030      	beq.n	8001780 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800171e:	4b5b      	ldr	r3, [pc, #364]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a5e      	ldr	r2, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x33c>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	4b57      	ldr	r3, [pc, #348]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b56      	ldr	r3, [pc, #344]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b55      	ldr	r3, [pc, #340]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	0049      	lsls	r1, r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fc82 	bl	8001048 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fc7d 	bl	8001048 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e209      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4013      	ands	r3, r2
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <HAL_RCC_OscConfig+0x338>)
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	021a      	lsls	r2, r3, #8
 8001778:	4b44      	ldr	r3, [pc, #272]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e01b      	b.n	80017b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001780:	4b42      	ldr	r3, [pc, #264]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001786:	4949      	ldr	r1, [pc, #292]	@ (80018ac <HAL_RCC_OscConfig+0x34c>)
 8001788:	400a      	ands	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fc5c 	bl	8001048 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fc57 	bl	8001048 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e1e3      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a8:	4b38      	ldr	r3, [pc, #224]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x236>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2208      	movs	r2, #8
 80017be:	4013      	ands	r3, r2
 80017c0:	d047      	beq.n	8001852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2238      	movs	r2, #56	@ 0x38
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b18      	cmp	r3, #24
 80017cc:	d10a      	bne.n	80017e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d03c      	beq.n	8001852 <HAL_RCC_OscConfig+0x2f2>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d138      	bne.n	8001852 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e1c5      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d019      	beq.n	8001820 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80017ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017f0:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc26 	bl	8001048 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fc21 	bl	8001048 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1ad      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d0f1      	beq.n	8001802 <HAL_RCC_OscConfig+0x2a2>
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001822:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001824:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001826:	2101      	movs	r1, #1
 8001828:	438a      	bics	r2, r1
 800182a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fc0c 	bl	8001048 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff fc07 	bl	8001048 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e193      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d1f1      	bne.n	8001836 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x2fe>
 800185c:	e0c6      	b.n	80019ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	231f      	movs	r3, #31
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2238      	movs	r2, #56	@ 0x38
 800186c:	4013      	ands	r3, r2
 800186e:	2b20      	cmp	r3, #32
 8001870:	d11e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_OscConfig+0x32c>)
 8001874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x31e>
 800187c:	e0b6      	b.n	80019ec <HAL_RCC_OscConfig+0x48c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d000      	beq.n	8001888 <HAL_RCC_OscConfig+0x328>
 8001886:	e0b1      	b.n	80019ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e171      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
 800188c:	40021000 	.word	0x40021000
 8001890:	fffeffff 	.word	0xfffeffff
 8001894:	fffbffff 	.word	0xfffbffff
 8001898:	ffff80ff 	.word	0xffff80ff
 800189c:	ffffc7ff 	.word	0xffffc7ff
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004
 80018ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018b0:	4bb1      	ldr	r3, [pc, #708]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80018b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	055b      	lsls	r3, r3, #21
 80018b8:	4013      	ands	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x360>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x362>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d011      	beq.n	80018ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4bac      	ldr	r3, [pc, #688]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80018c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ca:	4bab      	ldr	r3, [pc, #684]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	0549      	lsls	r1, r1, #21
 80018d0:	430a      	orrs	r2, r1
 80018d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018d4:	4ba8      	ldr	r3, [pc, #672]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80018d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	055b      	lsls	r3, r3, #21
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018e2:	231f      	movs	r3, #31
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ea:	4ba4      	ldr	r3, [pc, #656]	@ (8001b7c <HAL_RCC_OscConfig+0x61c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d11a      	bne.n	800192c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f6:	4ba1      	ldr	r3, [pc, #644]	@ (8001b7c <HAL_RCC_OscConfig+0x61c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4ba0      	ldr	r3, [pc, #640]	@ (8001b7c <HAL_RCC_OscConfig+0x61c>)
 80018fc:	2180      	movs	r1, #128	@ 0x80
 80018fe:	0049      	lsls	r1, r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001904:	f7ff fba0 	bl	8001048 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fb9b 	bl	8001048 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e127      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	4b96      	ldr	r3, [pc, #600]	@ (8001b7c <HAL_RCC_OscConfig+0x61c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4013      	ands	r3, r2
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e2>
 8001934:	4b90      	ldr	r3, [pc, #576]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001938:	4b8f      	ldr	r3, [pc, #572]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x404>
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 800194c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800194e:	4b8a      	ldr	r3, [pc, #552]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001950:	2104      	movs	r1, #4
 8001952:	430a      	orrs	r2, r1
 8001954:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001958:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800195a:	4b87      	ldr	r3, [pc, #540]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
 8001964:	4b84      	ldr	r3, [pc, #528]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001966:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001968:	4b83      	ldr	r3, [pc, #524]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001970:	4b81      	ldr	r3, [pc, #516]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001972:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001974:	4b80      	ldr	r3, [pc, #512]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001976:	2104      	movs	r1, #4
 8001978:	438a      	bics	r2, r1
 800197a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d014      	beq.n	80019ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb60 	bl	8001048 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198c:	e009      	b.n	80019a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff fb5b 	bl	8001048 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a79      	ldr	r2, [pc, #484]	@ (8001b80 <HAL_RCC_OscConfig+0x620>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a2:	4b75      	ldr	r3, [pc, #468]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80019a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a6:	2202      	movs	r2, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x42e>
 80019ac:	e013      	b.n	80019d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fb4b 	bl	8001048 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b6:	e009      	b.n	80019cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff fb46 	bl	8001048 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b80 <HAL_RCC_OscConfig+0x620>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0d1      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019d6:	231f      	movs	r3, #31
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b65      	ldr	r3, [pc, #404]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80019e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e4:	4b64      	ldr	r3, [pc, #400]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80019e6:	4967      	ldr	r1, [pc, #412]	@ (8001b84 <HAL_RCC_OscConfig+0x624>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d100      	bne.n	80019f6 <HAL_RCC_OscConfig+0x496>
 80019f4:	e0bb      	b.n	8001b6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f6:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2238      	movs	r2, #56	@ 0x38
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d100      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4a4>
 8001a02:	e07b      	b.n	8001afc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d156      	bne.n	8001aba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a12:	495d      	ldr	r1, [pc, #372]	@ (8001b88 <HAL_RCC_OscConfig+0x628>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb16 	bl	8001048 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb11 	bl	8001048 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e09d      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	049b      	lsls	r3, r3, #18
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a51      	ldr	r2, [pc, #324]	@ (8001b8c <HAL_RCC_OscConfig+0x62c>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	2180      	movs	r1, #128	@ 0x80
 8001a7c:	0449      	lsls	r1, r1, #17
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff fada 	bl	8001048 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fad5 	bl	8001048 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e061      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	049b      	lsls	r3, r3, #18
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x53a>
 8001ab8:	e059      	b.n	8001b6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b2e      	ldr	r3, [pc, #184]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001ac0:	4931      	ldr	r1, [pc, #196]	@ (8001b88 <HAL_RCC_OscConfig+0x628>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fabf 	bl	8001048 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff faba 	bl	8001048 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e046      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	049b      	lsls	r3, r3, #18
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001af4:	4926      	ldr	r1, [pc, #152]	@ (8001b90 <HAL_RCC_OscConfig+0x630>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	e038      	b.n	8001b6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e033      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2203      	movs	r2, #3
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d126      	bne.n	8001b6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2270      	movs	r2, #112	@ 0x70
 8001b20:	401a      	ands	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11f      	bne.n	8001b6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	23fe      	movs	r3, #254	@ 0xfe
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	401a      	ands	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d116      	bne.n	8001b6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	23f8      	movs	r3, #248	@ 0xf8
 8001b40:	039b      	lsls	r3, r3, #14
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10e      	bne.n	8001b6a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	23e0      	movs	r3, #224	@ 0xe0
 8001b50:	051b      	lsls	r3, r3, #20
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	0f5b      	lsrs	r3, r3, #29
 8001b60:	075a      	lsls	r2, r3, #29
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b008      	add	sp, #32
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	00001388 	.word	0x00001388
 8001b84:	efffffff 	.word	0xefffffff
 8001b88:	feffffff 	.word	0xfeffffff
 8001b8c:	11c1808c 	.word	0x11c1808c
 8001b90:	eefefffc 	.word	0xeefefffc

08001b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0e9      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b76      	ldr	r3, [pc, #472]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2207      	movs	r2, #7
 8001bae:	4013      	ands	r3, r2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d91e      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b73      	ldr	r3, [pc, #460]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff fa3e 	bl	8001048 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd2:	f7ff fa39 	bl	8001048 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0ca      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be6:	4b67      	ldr	r3, [pc, #412]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2207      	movs	r2, #7
 8001bec:	4013      	ands	r3, r2
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d006      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c08:	4b60      	ldr	r3, [pc, #384]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	21e0      	movs	r1, #224	@ 0xe0
 8001c10:	01c9      	lsls	r1, r1, #7
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	4b5d      	ldr	r3, [pc, #372]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d90 <HAL_RCC_ClockConfig+0x1fc>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b59      	ldr	r3, [pc, #356]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d057      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3c:	4b53      	ldr	r3, [pc, #332]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d12b      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e097      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c54:	4b4d      	ldr	r3, [pc, #308]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	049b      	lsls	r3, r3, #18
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d11f      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e08b      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6c:	4b47      	ldr	r3, [pc, #284]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4013      	ands	r3, r2
 8001c76:	d113      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e07f      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c84:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c88:	2202      	movs	r2, #2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e074      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c92:	4b3e      	ldr	r3, [pc, #248]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e06d      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b37      	ldr	r3, [pc, #220]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f9c8 	bl	8001048 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7ff f9c3 	bl	8001048 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e054      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2238      	movs	r2, #56	@ 0x38
 8001cd8:	401a      	ands	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1ec      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2207      	movs	r2, #7
 8001cea:	4013      	ands	r3, r2
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d21e      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f9a0 	bl	8001048 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0e:	f7ff f99b 	bl	8001048 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a1b      	ldr	r2, [pc, #108]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e02c      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2207      	movs	r2, #7
 8001d28:	4013      	ands	r3, r2
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2204      	movs	r2, #4
 8001d36:	4013      	ands	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a15      	ldr	r2, [pc, #84]	@ (8001d94 <HAL_RCC_ClockConfig+0x200>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d4e:	f000 f829 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d52:	0001      	movs	r1, r0
 8001d54:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_RCC_ClockConfig+0x204>)
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	58d3      	ldr	r3, [r2, r3]
 8001d64:	221f      	movs	r2, #31
 8001d66:	4013      	ands	r3, r2
 8001d68:	000a      	movs	r2, r1
 8001d6a:	40da      	lsrs	r2, r3
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_ClockConfig+0x208>)
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_ClockConfig+0x20c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff f90b 	bl	8000f90 <HAL_InitTick>
 8001d7a:	0003      	movs	r3, r0
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b004      	add	sp, #16
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000
 8001d88:	00001388 	.word	0x00001388
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	fffff0ff 	.word	0xfffff0ff
 8001d94:	ffff8fff 	.word	0xffff8fff
 8001d98:	0800395c 	.word	0x0800395c
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001daa:	4b3c      	ldr	r3, [pc, #240]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2238      	movs	r2, #56	@ 0x38
 8001db0:	4013      	ands	r3, r2
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001db4:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0adb      	lsrs	r3, r3, #11
 8001dba:	2207      	movs	r2, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	4835      	ldr	r0, [pc, #212]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dca:	f7fe f99b 	bl	8000104 <__udivsi3>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e05d      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2238      	movs	r2, #56	@ 0x38
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de0:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e054      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2238      	movs	r2, #56	@ 0x38
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d138      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	2207      	movs	r2, #7
 8001e04:	4013      	ands	r3, r2
 8001e06:	3301      	adds	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4824      	ldr	r0, [pc, #144]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e14:	f7fe f976 	bl	8000104 <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	227f      	movs	r2, #127	@ 0x7f
 8001e24:	4013      	ands	r3, r2
 8001e26:	434b      	muls	r3, r1
 8001e28:	617b      	str	r3, [r7, #20]
        break;
 8001e2a:	e00d      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	481c      	ldr	r0, [pc, #112]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e30:	f7fe f968 	bl	8000104 <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	0019      	movs	r1, r3
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	227f      	movs	r2, #127	@ 0x7f
 8001e40:	4013      	ands	r3, r2
 8001e42:	434b      	muls	r3, r1
 8001e44:	617b      	str	r3, [r7, #20]
        break;
 8001e46:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0f5b      	lsrs	r3, r3, #29
 8001e4e:	2207      	movs	r2, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	3301      	adds	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	f7fe f953 	bl	8000104 <__udivsi3>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	e015      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2238      	movs	r2, #56	@ 0x38
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d103      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2238      	movs	r2, #56	@ 0x38
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b18      	cmp	r3, #24
 8001e82:	d103      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e84:	23fa      	movs	r3, #250	@ 0xfa
 8001e86:	01db      	lsls	r3, r3, #7
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e001      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e90:	693b      	ldr	r3, [r7, #16]
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b006      	add	sp, #24
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200

08001ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b02      	ldr	r3, [pc, #8]	@ (8001eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ec0:	f7ff fff2 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec4:	0004      	movs	r4, r0
 8001ec6:	f7ff fb3f 	bl	8001548 <LL_RCC_GetAPB1Prescaler>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	0b1a      	lsrs	r2, r3, #12
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	58d3      	ldr	r3, [r2, r3]
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	40dc      	lsrs	r4, r3
 8001eda:	0023      	movs	r3, r4
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	0800399c 	.word	0x0800399c

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ef0:	2313      	movs	r3, #19
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2312      	movs	r3, #18
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f0c:	e0a3      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2011      	movs	r0, #17
 8001f10:	183b      	adds	r3, r7, r0
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4bc3      	ldr	r3, [pc, #780]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	055b      	lsls	r3, r3, #21
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d110      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4bc0      	ldr	r3, [pc, #768]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f26:	4bbf      	ldr	r3, [pc, #764]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0549      	lsls	r1, r1, #21
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f30:	4bbc      	ldr	r3, [pc, #752]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4bb8      	ldr	r3, [pc, #736]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4bb7      	ldr	r3, [pc, #732]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f4a:	2180      	movs	r1, #128	@ 0x80
 8001f4c:	0049      	lsls	r1, r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f52:	f7ff f879 	bl	8001048 <HAL_GetTick>
 8001f56:	0003      	movs	r3, r0
 8001f58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7ff f874 	bl	8001048 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d904      	bls.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f6a:	2313      	movs	r3, #19
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	2203      	movs	r2, #3
 8001f70:	701a      	strb	r2, [r3, #0]
        break;
 8001f72:	e005      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f74:	4bac      	ldr	r3, [pc, #688]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0ed      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f80:	2313      	movs	r3, #19
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d154      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8a:	4ba6      	ldr	r3, [pc, #664]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f8e:	23c0      	movs	r3, #192	@ 0xc0
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4013      	ands	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d014      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fa6:	4b9f      	ldr	r3, [pc, #636]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001faa:	4aa0      	ldr	r2, [pc, #640]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fb4:	4b9b      	ldr	r3, [pc, #620]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb6:	2180      	movs	r1, #128	@ 0x80
 8001fb8:	0249      	lsls	r1, r1, #9
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbe:	4b99      	ldr	r3, [pc, #612]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fc2:	4b98      	ldr	r3, [pc, #608]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	499a      	ldr	r1, [pc, #616]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fca:	4b96      	ldr	r3, [pc, #600]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d016      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f836 	bl	8001048 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	e00c      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f831 	bl	8001048 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	4a91      	ldr	r2, [pc, #580]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d904      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001ff2:	2313      	movs	r3, #19
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	701a      	strb	r2, [r3, #0]
            break;
 8001ffa:	e004      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	4b89      	ldr	r3, [pc, #548]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d0ed      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002006:	2313      	movs	r3, #19
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002010:	4b84      	ldr	r3, [pc, #528]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	4a85      	ldr	r2, [pc, #532]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800201e:	4b81      	ldr	r3, [pc, #516]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002020:	430a      	orrs	r2, r1
 8002022:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002024:	e00c      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002026:	2312      	movs	r3, #18
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2213      	movs	r2, #19
 800202c:	18ba      	adds	r2, r7, r2
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e005      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002034:	2312      	movs	r3, #18
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2213      	movs	r2, #19
 800203a:	18ba      	adds	r2, r7, r2
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002040:	2311      	movs	r3, #17
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b76      	ldr	r3, [pc, #472]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800204c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800204e:	4b75      	ldr	r3, [pc, #468]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002050:	4979      	ldr	r1, [pc, #484]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002052:	400a      	ands	r2, r1
 8002054:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002060:	4b70      	ldr	r3, [pc, #448]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002064:	2203      	movs	r2, #3
 8002066:	4393      	bics	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4b6d      	ldr	r3, [pc, #436]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002070:	430a      	orrs	r2, r1
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207e:	4b69      	ldr	r3, [pc, #420]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	220c      	movs	r2, #12
 8002084:	4393      	bics	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b65      	ldr	r3, [pc, #404]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208e:	430a      	orrs	r2, r1
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800209c:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	4a66      	ldr	r2, [pc, #408]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d009      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020bc:	4b59      	ldr	r3, [pc, #356]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	0019      	movs	r1, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	4b56      	ldr	r3, [pc, #344]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020dc:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	4a52      	ldr	r2, [pc, #328]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210a:	430a      	orrs	r2, r1
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	01db      	lsls	r3, r3, #7
 8002116:	4013      	ands	r3, r2
 8002118:	d015      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800211a:	4b42      	ldr	r3, [pc, #264]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	0899      	lsrs	r1, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1a      	ldr	r2, [r3, #32]
 8002126:	4b3f      	ldr	r3, [pc, #252]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002128:	430a      	orrs	r2, r1
 800212a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	429a      	cmp	r2, r3
 8002136:	d106      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002138:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0249      	lsls	r1, r1, #9
 8002142:	430a      	orrs	r2, r1
 8002144:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	4013      	ands	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	4393      	bics	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002160:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002162:	430a      	orrs	r2, r1
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	039b      	lsls	r3, r3, #14
 800216e:	4013      	ands	r3, r2
 8002170:	d016      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002172:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	4a35      	ldr	r2, [pc, #212]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002178:	4013      	ands	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002180:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002182:	430a      	orrs	r2, r1
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	03db      	lsls	r3, r3, #15
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002192:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	0449      	lsls	r1, r1, #17
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	03db      	lsls	r3, r3, #15
 80021a8:	4013      	ands	r3, r2
 80021aa:	d016      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	045b      	lsls	r3, r3, #17
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	0449      	lsls	r1, r1, #17
 80021d6:	430a      	orrs	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	d016      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	01db      	lsls	r3, r3, #7
 8002202:	429a      	cmp	r2, r3
 8002204:	d106      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	2180      	movs	r1, #128	@ 0x80
 800220e:	0249      	lsls	r1, r1, #9
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002214:	2312      	movs	r3, #18
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	fffffcff 	.word	0xfffffcff
 8002230:	fffeffff 	.word	0xfffeffff
 8002234:	00001388 	.word	0x00001388
 8002238:	efffffff 	.word	0xefffffff
 800223c:	fffff3ff 	.word	0xfffff3ff
 8002240:	fff3ffff 	.word	0xfff3ffff
 8002244:	ffcfffff 	.word	0xffcfffff
 8002248:	ffffcfff 	.word	0xffffcfff
 800224c:	ffbfffff 	.word	0xffbfffff
 8002250:	feffffff 	.word	0xfeffffff
 8002254:	ffff3fff 	.word	0xffff3fff

08002258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e046      	b.n	80022f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2288      	movs	r2, #136	@ 0x88
 800226e:	589b      	ldr	r3, [r3, r2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2284      	movs	r2, #132	@ 0x84
 8002278:	2100      	movs	r1, #0
 800227a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	0018      	movs	r0, r3
 8002280:	f7fe fddc 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2288      	movs	r2, #136	@ 0x88
 8002288:	2124      	movs	r1, #36	@ 0x24
 800228a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2101      	movs	r1, #1
 8002298:	438a      	bics	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fb8e 	bl	80029c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 f8cc 	bl	800244c <UART_SetConfig>
 80022b4:	0003      	movs	r3, r0
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01c      	b.n	80022f8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	490d      	ldr	r1, [pc, #52]	@ (8002300 <HAL_UART_Init+0xa8>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	212a      	movs	r1, #42	@ 0x2a
 80022da:	438a      	bics	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fc1d 	bl	8002b30 <UART_CheckIdleState>
 80022f6:	0003      	movs	r3, r0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ffffb7ff 	.word	0xffffb7ff

08002304 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	1dbb      	adds	r3, r7, #6
 8002312:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2288      	movs	r2, #136	@ 0x88
 8002318:	589b      	ldr	r3, [r3, r2]
 800231a:	2b20      	cmp	r3, #32
 800231c:	d000      	beq.n	8002320 <HAL_UART_Transmit+0x1c>
 800231e:	e090      	b.n	8002442 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_UART_Transmit+0x2a>
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e088      	b.n	8002444 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	429a      	cmp	r2, r3
 800233c:	d109      	bne.n	8002352 <HAL_UART_Transmit+0x4e>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d001      	beq.n	8002352 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e078      	b.n	8002444 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2290      	movs	r2, #144	@ 0x90
 8002356:	2100      	movs	r1, #0
 8002358:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2288      	movs	r2, #136	@ 0x88
 800235e:	2121      	movs	r1, #33	@ 0x21
 8002360:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fe71 	bl	8001048 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1dba      	adds	r2, r7, #6
 800236e:	2154      	movs	r1, #84	@ 0x54
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1dba      	adds	r2, r7, #6
 8002378:	2156      	movs	r1, #86	@ 0x56
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	015b      	lsls	r3, r3, #5
 8002386:	429a      	cmp	r2, r3
 8002388:	d108      	bne.n	800239c <HAL_UART_Transmit+0x98>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e003      	b.n	80023a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023a4:	e030      	b.n	8002408 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	0013      	movs	r3, r2
 80023b0:	2200      	movs	r2, #0
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	f000 fc66 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2288      	movs	r2, #136	@ 0x88
 80023c0:	2120      	movs	r1, #32
 80023c2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e03d      	b.n	8002444 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	001a      	movs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	05d2      	lsls	r2, r2, #23
 80023da:	0dd2      	lsrs	r2, r2, #23
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3302      	adds	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	e007      	b.n	80023f6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3301      	adds	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2256      	movs	r2, #86	@ 0x56
 80023fa:	5a9b      	ldrh	r3, [r3, r2]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b299      	uxth	r1, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2256      	movs	r2, #86	@ 0x56
 8002406:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2256      	movs	r2, #86	@ 0x56
 800240c:	5a9b      	ldrh	r3, [r3, r2]
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1c8      	bne.n	80023a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	0013      	movs	r3, r2
 800241e:	2200      	movs	r2, #0
 8002420:	2140      	movs	r1, #64	@ 0x40
 8002422:	f000 fc2f 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2288      	movs	r2, #136	@ 0x88
 800242e:	2120      	movs	r1, #32
 8002430:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e006      	b.n	8002444 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2288      	movs	r2, #136	@ 0x88
 800243a:	2120      	movs	r1, #32
 800243c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002442:	2302      	movs	r3, #2
  }
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b008      	add	sp, #32
 800244a:	bd80      	pop	{r7, pc}

0800244c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b090      	sub	sp, #64	@ 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002454:	231a      	movs	r3, #26
 8002456:	2220      	movs	r2, #32
 8002458:	189b      	adds	r3, r3, r2
 800245a:	19db      	adds	r3, r3, r7
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	431a      	orrs	r2, r3
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	431a      	orrs	r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4313      	orrs	r3, r2
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4aaf      	ldr	r2, [pc, #700]	@ (800273c <UART_SetConfig+0x2f0>)
 8002480:	4013      	ands	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800248a:	430b      	orrs	r3, r1
 800248c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4aaa      	ldr	r2, [pc, #680]	@ (8002740 <UART_SetConfig+0x2f4>)
 8002496:	4013      	ands	r3, r2
 8002498:	0018      	movs	r0, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	0003      	movs	r3, r0
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4aa4      	ldr	r2, [pc, #656]	@ (8002744 <UART_SetConfig+0x2f8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024be:	4313      	orrs	r3, r2
 80024c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002748 <UART_SetConfig+0x2fc>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	220f      	movs	r2, #15
 80024e0:	4393      	bics	r3, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	0003      	movs	r3, r0
 80024ee:	430b      	orrs	r3, r1
 80024f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a95      	ldr	r2, [pc, #596]	@ (800274c <UART_SetConfig+0x300>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d131      	bne.n	8002560 <UART_SetConfig+0x114>
 80024fc:	4b94      	ldr	r3, [pc, #592]	@ (8002750 <UART_SetConfig+0x304>)
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	2203      	movs	r2, #3
 8002502:	4013      	ands	r3, r2
 8002504:	2b03      	cmp	r3, #3
 8002506:	d01d      	beq.n	8002544 <UART_SetConfig+0xf8>
 8002508:	d823      	bhi.n	8002552 <UART_SetConfig+0x106>
 800250a:	2b02      	cmp	r3, #2
 800250c:	d00c      	beq.n	8002528 <UART_SetConfig+0xdc>
 800250e:	d820      	bhi.n	8002552 <UART_SetConfig+0x106>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <UART_SetConfig+0xce>
 8002514:	2b01      	cmp	r3, #1
 8002516:	d00e      	beq.n	8002536 <UART_SetConfig+0xea>
 8002518:	e01b      	b.n	8002552 <UART_SetConfig+0x106>
 800251a:	231b      	movs	r3, #27
 800251c:	2220      	movs	r2, #32
 800251e:	189b      	adds	r3, r3, r2
 8002520:	19db      	adds	r3, r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e0b4      	b.n	8002692 <UART_SetConfig+0x246>
 8002528:	231b      	movs	r3, #27
 800252a:	2220      	movs	r2, #32
 800252c:	189b      	adds	r3, r3, r2
 800252e:	19db      	adds	r3, r3, r7
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e0ad      	b.n	8002692 <UART_SetConfig+0x246>
 8002536:	231b      	movs	r3, #27
 8002538:	2220      	movs	r2, #32
 800253a:	189b      	adds	r3, r3, r2
 800253c:	19db      	adds	r3, r3, r7
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e0a6      	b.n	8002692 <UART_SetConfig+0x246>
 8002544:	231b      	movs	r3, #27
 8002546:	2220      	movs	r2, #32
 8002548:	189b      	adds	r3, r3, r2
 800254a:	19db      	adds	r3, r3, r7
 800254c:	2208      	movs	r2, #8
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e09f      	b.n	8002692 <UART_SetConfig+0x246>
 8002552:	231b      	movs	r3, #27
 8002554:	2220      	movs	r2, #32
 8002556:	189b      	adds	r3, r3, r2
 8002558:	19db      	adds	r3, r3, r7
 800255a:	2210      	movs	r2, #16
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e098      	b.n	8002692 <UART_SetConfig+0x246>
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7b      	ldr	r2, [pc, #492]	@ (8002754 <UART_SetConfig+0x308>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d131      	bne.n	80025ce <UART_SetConfig+0x182>
 800256a:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <UART_SetConfig+0x304>)
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	220c      	movs	r2, #12
 8002570:	4013      	ands	r3, r2
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d01d      	beq.n	80025b2 <UART_SetConfig+0x166>
 8002576:	d823      	bhi.n	80025c0 <UART_SetConfig+0x174>
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00c      	beq.n	8002596 <UART_SetConfig+0x14a>
 800257c:	d820      	bhi.n	80025c0 <UART_SetConfig+0x174>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <UART_SetConfig+0x13c>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00e      	beq.n	80025a4 <UART_SetConfig+0x158>
 8002586:	e01b      	b.n	80025c0 <UART_SetConfig+0x174>
 8002588:	231b      	movs	r3, #27
 800258a:	2220      	movs	r2, #32
 800258c:	189b      	adds	r3, r3, r2
 800258e:	19db      	adds	r3, r3, r7
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e07d      	b.n	8002692 <UART_SetConfig+0x246>
 8002596:	231b      	movs	r3, #27
 8002598:	2220      	movs	r2, #32
 800259a:	189b      	adds	r3, r3, r2
 800259c:	19db      	adds	r3, r3, r7
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e076      	b.n	8002692 <UART_SetConfig+0x246>
 80025a4:	231b      	movs	r3, #27
 80025a6:	2220      	movs	r2, #32
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	19db      	adds	r3, r3, r7
 80025ac:	2204      	movs	r2, #4
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e06f      	b.n	8002692 <UART_SetConfig+0x246>
 80025b2:	231b      	movs	r3, #27
 80025b4:	2220      	movs	r2, #32
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	19db      	adds	r3, r3, r7
 80025ba:	2208      	movs	r2, #8
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e068      	b.n	8002692 <UART_SetConfig+0x246>
 80025c0:	231b      	movs	r3, #27
 80025c2:	2220      	movs	r2, #32
 80025c4:	189b      	adds	r3, r3, r2
 80025c6:	19db      	adds	r3, r3, r7
 80025c8:	2210      	movs	r2, #16
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e061      	b.n	8002692 <UART_SetConfig+0x246>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a61      	ldr	r2, [pc, #388]	@ (8002758 <UART_SetConfig+0x30c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d106      	bne.n	80025e6 <UART_SetConfig+0x19a>
 80025d8:	231b      	movs	r3, #27
 80025da:	2220      	movs	r2, #32
 80025dc:	189b      	adds	r3, r3, r2
 80025de:	19db      	adds	r3, r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e055      	b.n	8002692 <UART_SetConfig+0x246>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5c      	ldr	r2, [pc, #368]	@ (800275c <UART_SetConfig+0x310>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d106      	bne.n	80025fe <UART_SetConfig+0x1b2>
 80025f0:	231b      	movs	r3, #27
 80025f2:	2220      	movs	r2, #32
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	19db      	adds	r3, r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e049      	b.n	8002692 <UART_SetConfig+0x246>
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a50      	ldr	r2, [pc, #320]	@ (8002744 <UART_SetConfig+0x2f8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d13e      	bne.n	8002686 <UART_SetConfig+0x23a>
 8002608:	4b51      	ldr	r3, [pc, #324]	@ (8002750 <UART_SetConfig+0x304>)
 800260a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800260c:	23c0      	movs	r3, #192	@ 0xc0
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4013      	ands	r3, r2
 8002612:	22c0      	movs	r2, #192	@ 0xc0
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <UART_SetConfig+0x21e>
 800261a:	22c0      	movs	r2, #192	@ 0xc0
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	4293      	cmp	r3, r2
 8002620:	d82a      	bhi.n	8002678 <UART_SetConfig+0x22c>
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	4293      	cmp	r3, r2
 8002628:	d011      	beq.n	800264e <UART_SetConfig+0x202>
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	4293      	cmp	r3, r2
 8002630:	d822      	bhi.n	8002678 <UART_SetConfig+0x22c>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <UART_SetConfig+0x1f4>
 8002636:	2280      	movs	r2, #128	@ 0x80
 8002638:	00d2      	lsls	r2, r2, #3
 800263a:	4293      	cmp	r3, r2
 800263c:	d00e      	beq.n	800265c <UART_SetConfig+0x210>
 800263e:	e01b      	b.n	8002678 <UART_SetConfig+0x22c>
 8002640:	231b      	movs	r3, #27
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e021      	b.n	8002692 <UART_SetConfig+0x246>
 800264e:	231b      	movs	r3, #27
 8002650:	2220      	movs	r2, #32
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e01a      	b.n	8002692 <UART_SetConfig+0x246>
 800265c:	231b      	movs	r3, #27
 800265e:	2220      	movs	r2, #32
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e013      	b.n	8002692 <UART_SetConfig+0x246>
 800266a:	231b      	movs	r3, #27
 800266c:	2220      	movs	r2, #32
 800266e:	189b      	adds	r3, r3, r2
 8002670:	19db      	adds	r3, r3, r7
 8002672:	2208      	movs	r2, #8
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e00c      	b.n	8002692 <UART_SetConfig+0x246>
 8002678:	231b      	movs	r3, #27
 800267a:	2220      	movs	r2, #32
 800267c:	189b      	adds	r3, r3, r2
 800267e:	19db      	adds	r3, r3, r7
 8002680:	2210      	movs	r2, #16
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e005      	b.n	8002692 <UART_SetConfig+0x246>
 8002686:	231b      	movs	r3, #27
 8002688:	2220      	movs	r2, #32
 800268a:	189b      	adds	r3, r3, r2
 800268c:	19db      	adds	r3, r3, r7
 800268e:	2210      	movs	r2, #16
 8002690:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2b      	ldr	r2, [pc, #172]	@ (8002744 <UART_SetConfig+0x2f8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d000      	beq.n	800269e <UART_SetConfig+0x252>
 800269c:	e0a9      	b.n	80027f2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800269e:	231b      	movs	r3, #27
 80026a0:	2220      	movs	r2, #32
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	19db      	adds	r3, r3, r7
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d015      	beq.n	80026d8 <UART_SetConfig+0x28c>
 80026ac:	dc18      	bgt.n	80026e0 <UART_SetConfig+0x294>
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d00d      	beq.n	80026ce <UART_SetConfig+0x282>
 80026b2:	dc15      	bgt.n	80026e0 <UART_SetConfig+0x294>
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <UART_SetConfig+0x272>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d005      	beq.n	80026c8 <UART_SetConfig+0x27c>
 80026bc:	e010      	b.n	80026e0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026be:	f7ff fbfd 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 80026c2:	0003      	movs	r3, r0
 80026c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026c6:	e014      	b.n	80026f2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <UART_SetConfig+0x314>)
 80026ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026cc:	e011      	b.n	80026f2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026ce:	f7ff fb69 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 80026d2:	0003      	movs	r3, r0
 80026d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026d6:	e00c      	b.n	80026f2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026de:	e008      	b.n	80026f2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80026e4:	231a      	movs	r3, #26
 80026e6:	2220      	movs	r2, #32
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
        break;
 80026f0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <UART_SetConfig+0x2ae>
 80026f8:	e14b      	b.n	8002992 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fe:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <UART_SetConfig+0x318>)
 8002700:	0052      	lsls	r2, r2, #1
 8002702:	5ad3      	ldrh	r3, [r2, r3]
 8002704:	0019      	movs	r1, r3
 8002706:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002708:	f7fd fcfc 	bl	8000104 <__udivsi3>
 800270c:	0003      	movs	r3, r0
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	0013      	movs	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	189b      	adds	r3, r3, r2
 800271a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800271c:	429a      	cmp	r2, r3
 800271e:	d305      	bcc.n	800272c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002728:	429a      	cmp	r2, r3
 800272a:	d91d      	bls.n	8002768 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800272c:	231a      	movs	r3, #26
 800272e:	2220      	movs	r2, #32
 8002730:	189b      	adds	r3, r3, r2
 8002732:	19db      	adds	r3, r3, r7
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e12b      	b.n	8002992 <UART_SetConfig+0x546>
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	cfff69f3 	.word	0xcfff69f3
 8002740:	ffffcfff 	.word	0xffffcfff
 8002744:	40008000 	.word	0x40008000
 8002748:	11fff4ff 	.word	0x11fff4ff
 800274c:	40013800 	.word	0x40013800
 8002750:	40021000 	.word	0x40021000
 8002754:	40004400 	.word	0x40004400
 8002758:	40004800 	.word	0x40004800
 800275c:	40004c00 	.word	0x40004c00
 8002760:	00f42400 	.word	0x00f42400
 8002764:	080039bc 	.word	0x080039bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002774:	4b92      	ldr	r3, [pc, #584]	@ (80029c0 <UART_SetConfig+0x574>)
 8002776:	0052      	lsls	r2, r2, #1
 8002778:	5ad3      	ldrh	r3, [r2, r3]
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	69b8      	ldr	r0, [r7, #24]
 8002786:	69f9      	ldr	r1, [r7, #28]
 8002788:	f7fd fe32 	bl	80003f0 <__aeabi_uldivmod>
 800278c:	0002      	movs	r2, r0
 800278e:	000b      	movs	r3, r1
 8002790:	0e11      	lsrs	r1, r2, #24
 8002792:	021d      	lsls	r5, r3, #8
 8002794:	430d      	orrs	r5, r1
 8002796:	0214      	lsls	r4, r2, #8
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68b8      	ldr	r0, [r7, #8]
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	1900      	adds	r0, r0, r4
 80027aa:	4169      	adcs	r1, r5
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f7fd fe19 	bl	80003f0 <__aeabi_uldivmod>
 80027be:	0002      	movs	r2, r0
 80027c0:	000b      	movs	r3, r1
 80027c2:	0013      	movs	r3, r2
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027c8:	23c0      	movs	r3, #192	@ 0xc0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d309      	bcc.n	80027e4 <UART_SetConfig+0x398>
 80027d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d2:	2380      	movs	r3, #128	@ 0x80
 80027d4:	035b      	lsls	r3, r3, #13
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d204      	bcs.n	80027e4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e0d6      	b.n	8002992 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80027e4:	231a      	movs	r3, #26
 80027e6:	2220      	movs	r2, #32
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	19db      	adds	r3, r3, r7
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e0cf      	b.n	8002992 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d000      	beq.n	8002800 <UART_SetConfig+0x3b4>
 80027fe:	e070      	b.n	80028e2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002800:	231b      	movs	r3, #27
 8002802:	2220      	movs	r2, #32
 8002804:	189b      	adds	r3, r3, r2
 8002806:	19db      	adds	r3, r3, r7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d015      	beq.n	800283a <UART_SetConfig+0x3ee>
 800280e:	dc18      	bgt.n	8002842 <UART_SetConfig+0x3f6>
 8002810:	2b04      	cmp	r3, #4
 8002812:	d00d      	beq.n	8002830 <UART_SetConfig+0x3e4>
 8002814:	dc15      	bgt.n	8002842 <UART_SetConfig+0x3f6>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <UART_SetConfig+0x3d4>
 800281a:	2b02      	cmp	r3, #2
 800281c:	d005      	beq.n	800282a <UART_SetConfig+0x3de>
 800281e:	e010      	b.n	8002842 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002820:	f7ff fb4c 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002824:	0003      	movs	r3, r0
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002828:	e014      	b.n	8002854 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800282a:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <UART_SetConfig+0x578>)
 800282c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800282e:	e011      	b.n	8002854 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002830:	f7ff fab8 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8002834:	0003      	movs	r3, r0
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002838:	e00c      	b.n	8002854 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002840:	e008      	b.n	8002854 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002846:	231a      	movs	r3, #26
 8002848:	2220      	movs	r2, #32
 800284a:	189b      	adds	r3, r3, r2
 800284c:	19db      	adds	r3, r3, r7
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
        break;
 8002852:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d100      	bne.n	800285c <UART_SetConfig+0x410>
 800285a:	e09a      	b.n	8002992 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002860:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <UART_SetConfig+0x574>)
 8002862:	0052      	lsls	r2, r2, #1
 8002864:	5ad3      	ldrh	r3, [r2, r3]
 8002866:	0019      	movs	r1, r3
 8002868:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800286a:	f7fd fc4b 	bl	8000104 <__udivsi3>
 800286e:	0003      	movs	r3, r0
 8002870:	005a      	lsls	r2, r3, #1
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	18d2      	adds	r2, r2, r3
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0019      	movs	r1, r3
 8002880:	0010      	movs	r0, r2
 8002882:	f7fd fc3f 	bl	8000104 <__udivsi3>
 8002886:	0003      	movs	r3, r0
 8002888:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	2b0f      	cmp	r3, #15
 800288e:	d921      	bls.n	80028d4 <UART_SetConfig+0x488>
 8002890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	025b      	lsls	r3, r3, #9
 8002896:	429a      	cmp	r2, r3
 8002898:	d21c      	bcs.n	80028d4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289c:	b29a      	uxth	r2, r3
 800289e:	200e      	movs	r0, #14
 80028a0:	2420      	movs	r4, #32
 80028a2:	1903      	adds	r3, r0, r4
 80028a4:	19db      	adds	r3, r3, r7
 80028a6:	210f      	movs	r1, #15
 80028a8:	438a      	bics	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	b299      	uxth	r1, r3
 80028b8:	1903      	adds	r3, r0, r4
 80028ba:	19db      	adds	r3, r3, r7
 80028bc:	1902      	adds	r2, r0, r4
 80028be:	19d2      	adds	r2, r2, r7
 80028c0:	8812      	ldrh	r2, [r2, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1902      	adds	r2, r0, r4
 80028cc:	19d2      	adds	r2, r2, r7
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	e05e      	b.n	8002992 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80028d4:	231a      	movs	r3, #26
 80028d6:	2220      	movs	r2, #32
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	19db      	adds	r3, r3, r7
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e057      	b.n	8002992 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028e2:	231b      	movs	r3, #27
 80028e4:	2220      	movs	r2, #32
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	19db      	adds	r3, r3, r7
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d015      	beq.n	800291c <UART_SetConfig+0x4d0>
 80028f0:	dc18      	bgt.n	8002924 <UART_SetConfig+0x4d8>
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d00d      	beq.n	8002912 <UART_SetConfig+0x4c6>
 80028f6:	dc15      	bgt.n	8002924 <UART_SetConfig+0x4d8>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <UART_SetConfig+0x4b6>
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d005      	beq.n	800290c <UART_SetConfig+0x4c0>
 8002900:	e010      	b.n	8002924 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002902:	f7ff fadb 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002906:	0003      	movs	r3, r0
 8002908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800290a:	e014      	b.n	8002936 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800290c:	4b2d      	ldr	r3, [pc, #180]	@ (80029c4 <UART_SetConfig+0x578>)
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002910:	e011      	b.n	8002936 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002912:	f7ff fa47 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8002916:	0003      	movs	r3, r0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800291a:	e00c      	b.n	8002936 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002922:	e008      	b.n	8002936 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002928:	231a      	movs	r3, #26
 800292a:	2220      	movs	r2, #32
 800292c:	189b      	adds	r3, r3, r2
 800292e:	19db      	adds	r3, r3, r7
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
        break;
 8002934:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02a      	beq.n	8002992 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <UART_SetConfig+0x574>)
 8002942:	0052      	lsls	r2, r2, #1
 8002944:	5ad3      	ldrh	r3, [r2, r3]
 8002946:	0019      	movs	r1, r3
 8002948:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800294a:	f7fd fbdb 	bl	8000104 <__udivsi3>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	18d2      	adds	r2, r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0019      	movs	r1, r3
 8002960:	0010      	movs	r0, r2
 8002962:	f7fd fbcf 	bl	8000104 <__udivsi3>
 8002966:	0003      	movs	r3, r0
 8002968:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d90a      	bls.n	8002986 <UART_SetConfig+0x53a>
 8002970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	429a      	cmp	r2, r3
 8002978:	d205      	bcs.n	8002986 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	b29a      	uxth	r2, r3
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e005      	b.n	8002992 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002986:	231a      	movs	r3, #26
 8002988:	2220      	movs	r2, #32
 800298a:	189b      	adds	r3, r3, r2
 800298c:	19db      	adds	r3, r3, r7
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	226a      	movs	r2, #106	@ 0x6a
 8002996:	2101      	movs	r1, #1
 8002998:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	2268      	movs	r2, #104	@ 0x68
 800299e:	2101      	movs	r1, #1
 80029a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	2200      	movs	r2, #0
 80029ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80029ae:	231a      	movs	r3, #26
 80029b0:	2220      	movs	r2, #32
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	19db      	adds	r3, r3, r7
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b010      	add	sp, #64	@ 0x40
 80029be:	bdb0      	pop	{r4, r5, r7, pc}
 80029c0:	080039bc 	.word	0x080039bc
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	2208      	movs	r2, #8
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b0c <UART_AdvFeatureConfig+0x144>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	2201      	movs	r2, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d00b      	beq.n	8002a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a43      	ldr	r2, [pc, #268]	@ (8002b10 <UART_AdvFeatureConfig+0x148>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d00b      	beq.n	8002a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a3b      	ldr	r2, [pc, #236]	@ (8002b14 <UART_AdvFeatureConfig+0x14c>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	0019      	movs	r1, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a34      	ldr	r2, [pc, #208]	@ (8002b18 <UART_AdvFeatureConfig+0x150>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <UART_AdvFeatureConfig+0x154>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	2220      	movs	r2, #32
 8002a80:	4013      	ands	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4a25      	ldr	r2, [pc, #148]	@ (8002b20 <UART_AdvFeatureConfig+0x158>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d01d      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <UART_AdvFeatureConfig+0x15c>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	035b      	lsls	r3, r3, #13
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10b      	bne.n	8002ae2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a15      	ldr	r2, [pc, #84]	@ (8002b28 <UART_AdvFeatureConfig+0x160>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <UART_AdvFeatureConfig+0x164>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	0019      	movs	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }
}
 8002b04:	46c0      	nop			@ (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	ffff7fff 	.word	0xffff7fff
 8002b10:	fffdffff 	.word	0xfffdffff
 8002b14:	fffeffff 	.word	0xfffeffff
 8002b18:	fffbffff 	.word	0xfffbffff
 8002b1c:	ffffefff 	.word	0xffffefff
 8002b20:	ffffdfff 	.word	0xffffdfff
 8002b24:	ffefffff 	.word	0xffefffff
 8002b28:	ff9fffff 	.word	0xff9fffff
 8002b2c:	fff7ffff 	.word	0xfff7ffff

08002b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b092      	sub	sp, #72	@ 0x48
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2290      	movs	r2, #144	@ 0x90
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b40:	f7fe fa82 	bl	8001048 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2208      	movs	r2, #8
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d12d      	bne.n	8002bb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	2280      	movs	r2, #128	@ 0x80
 8002b5a:	0391      	lsls	r1, r2, #14
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4a47      	ldr	r2, [pc, #284]	@ (8002c7c <UART_CheckIdleState+0x14c>)
 8002b60:	9200      	str	r2, [sp, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f000 f88e 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d022      	beq.n	8002bb2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b76:	2301      	movs	r3, #1
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	f383 8810 	msr	PRIMASK, r3
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2288      	movs	r2, #136	@ 0x88
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2284      	movs	r2, #132	@ 0x84
 8002baa:	2100      	movs	r1, #0
 8002bac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e060      	b.n	8002c74 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d146      	bne.n	8002c4e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc2:	2280      	movs	r2, #128	@ 0x80
 8002bc4:	03d1      	lsls	r1, r2, #15
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <UART_CheckIdleState+0x14c>)
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f000 f859 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d03b      	beq.n	8002c4e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4922      	ldr	r1, [pc, #136]	@ (8002c80 <UART_CheckIdleState+0x150>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c08:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c12:	2301      	movs	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f383 8810 	msr	PRIMASK, r3
}
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	438a      	bics	r2, r1
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	228c      	movs	r2, #140	@ 0x8c
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2284      	movs	r2, #132	@ 0x84
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e012      	b.n	8002c74 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2288      	movs	r2, #136	@ 0x88
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	228c      	movs	r2, #140	@ 0x8c
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2284      	movs	r2, #132	@ 0x84
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b010      	add	sp, #64	@ 0x40
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	01ffffff 	.word	0x01ffffff
 8002c80:	fffffedf 	.word	0xfffffedf

08002c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c94:	e051      	b.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	d04e      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7fe f9d4 	bl	8001048 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d302      	bcc.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e051      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d03b      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b80      	cmp	r3, #128	@ 0x80
 8002cc6:	d038      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d035      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d111      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f83c 	bl	8002d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2290      	movs	r2, #144	@ 0x90
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2284      	movs	r2, #132	@ 0x84
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e02c      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	2380      	movs	r3, #128	@ 0x80
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d112      	bne.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2280      	movs	r2, #128	@ 0x80
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f81f 	bl	8002d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2290      	movs	r2, #144	@ 0x90
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2284      	movs	r2, #132	@ 0x84
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00f      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	425a      	negs	r2, r3
 8002d4a:	4153      	adcs	r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	001a      	movs	r2, r3
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d09e      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08e      	sub	sp, #56	@ 0x38
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d70:	617b      	str	r3, [r7, #20]
  return(result);
 8002d72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d76:	2301      	movs	r3, #1
 8002d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	46c0      	nop			@ (mov r8, r8)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4926      	ldr	r1, [pc, #152]	@ (8002e28 <UART_EndRxTransfer+0xc4>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f383 8810 	msr	PRIMASK, r3
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	623b      	str	r3, [r7, #32]
  return(result);
 8002da4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	491b      	ldr	r1, [pc, #108]	@ (8002e2c <UART_EndRxTransfer+0xc8>)
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d118      	bne.n	8002e0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de2:	2301      	movs	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2110      	movs	r1, #16
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	228c      	movs	r2, #140	@ 0x8c
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b00e      	add	sp, #56	@ 0x38
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	fffffedf 	.word	0xfffffedf
 8002e2c:	effffffe 	.word	0xeffffffe

08002e30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2284      	movs	r2, #132	@ 0x84
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e027      	b.n	8002e96 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2284      	movs	r2, #132	@ 0x84
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2288      	movs	r2, #136	@ 0x88
 8002e52:	2124      	movs	r1, #36	@ 0x24
 8002e54:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2101      	movs	r1, #1
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2288      	movs	r2, #136	@ 0x88
 8002e88:	2120      	movs	r1, #32
 8002e8a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2284      	movs	r2, #132	@ 0x84
 8002e90:	2100      	movs	r1, #0
 8002e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b004      	add	sp, #16
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	dfffffff 	.word	0xdfffffff

08002ea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2284      	movs	r2, #132	@ 0x84
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e02e      	b.n	8002f1a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2284      	movs	r2, #132	@ 0x84
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2288      	movs	r2, #136	@ 0x88
 8002ec8:	2124      	movs	r1, #36	@ 0x24
 8002eca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2101      	movs	r1, #1
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	08d9      	lsrs	r1, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f854 	bl	8002fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2288      	movs	r2, #136	@ 0x88
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2284      	movs	r2, #132	@ 0x84
 8002f14:	2100      	movs	r1, #0
 8002f16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b004      	add	sp, #16
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2284      	movs	r2, #132	@ 0x84
 8002f32:	5c9b      	ldrb	r3, [r3, r2]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e02f      	b.n	8002f9c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2284      	movs	r2, #132	@ 0x84
 8002f40:	2101      	movs	r1, #1
 8002f42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2288      	movs	r2, #136	@ 0x88
 8002f48:	2124      	movs	r1, #36	@ 0x24
 8002f4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f813 	bl	8002fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2288      	movs	r2, #136	@ 0x88
 8002f8e:	2120      	movs	r1, #32
 8002f90:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2284      	movs	r2, #132	@ 0x84
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	f1ffffff 	.word	0xf1ffffff

08002fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	226a      	movs	r2, #106	@ 0x6a
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2268      	movs	r2, #104	@ 0x68
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fc8:	e043      	b.n	8003052 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fca:	260f      	movs	r6, #15
 8002fcc:	19bb      	adds	r3, r7, r6
 8002fce:	2208      	movs	r2, #8
 8002fd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fd2:	200e      	movs	r0, #14
 8002fd4:	183b      	adds	r3, r7, r0
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	0e5b      	lsrs	r3, r3, #25
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	240d      	movs	r4, #13
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2107      	movs	r1, #7
 8002fea:	400a      	ands	r2, r1
 8002fec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	250c      	movs	r5, #12
 8002ffa:	197b      	adds	r3, r7, r5
 8002ffc:	2107      	movs	r1, #7
 8002ffe:	400a      	ands	r2, r1
 8003000:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003002:	183b      	adds	r3, r7, r0
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	197a      	adds	r2, r7, r5
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	4914      	ldr	r1, [pc, #80]	@ (800305c <UARTEx_SetNbDataToProcess+0xb4>)
 800300c:	5c8a      	ldrb	r2, [r1, r2]
 800300e:	435a      	muls	r2, r3
 8003010:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003012:	197b      	adds	r3, r7, r5
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <UARTEx_SetNbDataToProcess+0xb8>)
 8003018:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800301a:	0019      	movs	r1, r3
 800301c:	f7fd f8fc 	bl	8000218 <__divsi3>
 8003020:	0003      	movs	r3, r0
 8003022:	b299      	uxth	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	226a      	movs	r2, #106	@ 0x6a
 8003028:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800302a:	19bb      	adds	r3, r7, r6
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	193a      	adds	r2, r7, r4
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	490a      	ldr	r1, [pc, #40]	@ (800305c <UARTEx_SetNbDataToProcess+0xb4>)
 8003034:	5c8a      	ldrb	r2, [r1, r2]
 8003036:	435a      	muls	r2, r3
 8003038:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800303a:	193b      	adds	r3, r7, r4
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <UARTEx_SetNbDataToProcess+0xb8>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003042:	0019      	movs	r1, r3
 8003044:	f7fd f8e8 	bl	8000218 <__divsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	b299      	uxth	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2268      	movs	r2, #104	@ 0x68
 8003050:	5299      	strh	r1, [r3, r2]
}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	b005      	add	sp, #20
 8003058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	080039d4 	.word	0x080039d4
 8003060:	080039dc 	.word	0x080039dc

08003064 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	435b      	muls	r3, r3
 8003078:	001a      	movs	r2, r3
 800307a:	0013      	movs	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	189b      	adds	r3, r3, r2
 8003080:	43db      	mvns	r3, r3
 8003082:	400b      	ands	r3, r1
 8003084:	001a      	movs	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	435b      	muls	r3, r3
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	434b      	muls	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	46c0      	nop			@ (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}

0800309c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	43d2      	mvns	r2, r2
 80030b0:	401a      	ands	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	434b      	muls	r3, r1
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	435b      	muls	r3, r3
 80030da:	001a      	movs	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	43db      	mvns	r3, r3
 80030e4:	400b      	ands	r3, r1
 80030e6:	001a      	movs	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	435b      	muls	r3, r3
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	434b      	muls	r3, r1
 80030f0:	431a      	orrs	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	609a      	str	r2, [r3, #8]
}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b004      	add	sp, #16
 80030fc:	bd80      	pop	{r7, pc}

080030fe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	435b      	muls	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	189b      	adds	r3, r3, r2
 800311a:	43db      	mvns	r3, r3
 800311c:	400b      	ands	r3, r1
 800311e:	001a      	movs	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	435b      	muls	r3, r3
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	434b      	muls	r3, r1
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	60da      	str	r2, [r3, #12]
}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a19      	ldr	r1, [r3, #32]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	435b      	muls	r3, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4353      	muls	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	435a      	muls	r2, r3
 8003152:	0013      	movs	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	43db      	mvns	r3, r3
 800315a:	400b      	ands	r3, r1
 800315c:	001a      	movs	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	435b      	muls	r3, r3
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	434b      	muls	r3, r1
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	434b      	muls	r3, r1
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	434b      	muls	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b004      	add	sp, #16
 800317a:	bd80      	pop	{r7, pc}

0800317c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	0a12      	lsrs	r2, r2, #8
 8003194:	4353      	muls	r3, r2
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	0a12      	lsrs	r2, r2, #8
 800319a:	4353      	muls	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	0a12      	lsrs	r2, r2, #8
 80031a0:	435a      	muls	r2, r3
 80031a2:	0013      	movs	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	43db      	mvns	r3, r3
 80031aa:	400b      	ands	r3, r1
 80031ac:	001a      	movs	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	0a09      	lsrs	r1, r1, #8
 80031b6:	434b      	muls	r3, r1
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	0a09      	lsrs	r1, r1, #8
 80031bc:	434b      	muls	r3, r1
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	0a09      	lsrs	r1, r1, #8
 80031c2:	434b      	muls	r3, r1
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	434b      	muls	r3, r1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031e4:	e047      	b.n	8003276 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2101      	movs	r1, #1
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4091      	lsls	r1, r2
 80031f0:	000a      	movs	r2, r1
 80031f2:	4013      	ands	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d039      	beq.n	8003270 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d003      	beq.n	800320c <LL_GPIO_Init+0x36>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d10d      	bne.n	8003228 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff ff56 	bl	80030c6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f7ff ff3a 	bl	800309c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff64 	bl	80030fe <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d111      	bne.n	8003262 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2bff      	cmp	r3, #255	@ 0xff
 8003242:	d807      	bhi.n	8003254 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff ff72 	bl	8003136 <LL_GPIO_SetAFPin_0_7>
 8003252:	e006      	b.n	8003262 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff ff8d 	bl	800317c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff fefa 	bl	8003064 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	40da      	lsrs	r2, r3
 800327e:	1e13      	subs	r3, r2, #0
 8003280:	d1b1      	bne.n	80031e6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}

0800328c <LL_RCC_HSI_IsReady>:
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <LL_RCC_HSI_IsReady+0x24>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	401a      	ands	r2, r3
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	429a      	cmp	r2, r3
 80032a0:	d101      	bne.n	80032a6 <LL_RCC_HSI_IsReady+0x1a>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <LL_RCC_HSI_IsReady+0x1c>
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000

080032b4 <LL_RCC_LSE_IsReady>:
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <LL_RCC_LSE_IsReady+0x1c>)
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	2202      	movs	r2, #2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d101      	bne.n	80032c8 <LL_RCC_LSE_IsReady+0x14>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_RCC_LSE_IsReady+0x16>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <LL_RCC_GetSysClkSource>:
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <LL_RCC_GetSysClkSource+0x14>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2238      	movs	r2, #56	@ 0x38
 80032de:	4013      	ands	r3, r2
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000

080032ec <LL_RCC_GetAHBPrescaler>:
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <LL_RCC_GetAHBPrescaler+0x14>)
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	23f0      	movs	r3, #240	@ 0xf0
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	4013      	ands	r3, r2
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <LL_RCC_GetAPB1Prescaler>:
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <LL_RCC_GetAPB1Prescaler+0x14>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	23e0      	movs	r3, #224	@ 0xe0
 800330e:	01db      	lsls	r3, r3, #7
 8003310:	4013      	ands	r3, r2
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000

0800331c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <LL_RCC_GetUSARTClockSource+0x20>)
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	401a      	ands	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	4313      	orrs	r3, r2
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <LL_RCC_PLL_GetN+0x14>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	227f      	movs	r2, #127	@ 0x7f
 800334c:	4013      	ands	r3, r2
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000

08003358 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800335c:	4b03      	ldr	r3, [pc, #12]	@ (800336c <LL_RCC_PLL_GetR+0x14>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0f5b      	lsrs	r3, r3, #29
 8003362:	075b      	lsls	r3, r3, #29
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	40021000 	.word	0x40021000

08003370 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003374:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <LL_RCC_PLL_GetMainSource+0x14>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2203      	movs	r2, #3
 800337a:	4013      	ands	r3, r2
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	40021000 	.word	0x40021000

08003388 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <LL_RCC_PLL_GetDivider+0x14>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2270      	movs	r2, #112	@ 0x70
 8003392:	4013      	ands	r3, r2
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	40021000 	.word	0x40021000

080033a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80033a8:	f000 f8a8 	bl	80034fc <RCC_GetSystemClockFreq>
 80033ac:	0002      	movs	r2, r0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f8ce 	bl	8003558 <RCC_GetHCLKClockFreq>
 80033bc:	0002      	movs	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f8de 	bl	8003588 <RCC_GetPCLK1ClockFreq>
 80033cc:	0002      	movs	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b002      	add	sp, #8
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d134      	bne.n	8003458 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ff93 	bl	800331c <LL_RCC_GetUSARTClockSource>
 80033f6:	0003      	movs	r3, r0
 80033f8:	4a39      	ldr	r2, [pc, #228]	@ (80034e0 <LL_RCC_GetUSARTClockFreq+0x104>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d016      	beq.n	800342c <LL_RCC_GetUSARTClockFreq+0x50>
 80033fe:	4a38      	ldr	r2, [pc, #224]	@ (80034e0 <LL_RCC_GetUSARTClockFreq+0x104>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d81c      	bhi.n	800343e <LL_RCC_GetUSARTClockFreq+0x62>
 8003404:	4a37      	ldr	r2, [pc, #220]	@ (80034e4 <LL_RCC_GetUSARTClockFreq+0x108>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <LL_RCC_GetUSARTClockFreq+0x36>
 800340a:	4a37      	ldr	r2, [pc, #220]	@ (80034e8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d005      	beq.n	800341c <LL_RCC_GetUSARTClockFreq+0x40>
 8003410:	e015      	b.n	800343e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003412:	f000 f873 	bl	80034fc <RCC_GetSystemClockFreq>
 8003416:	0003      	movs	r3, r0
 8003418:	60fb      	str	r3, [r7, #12]
        break;
 800341a:	e05c      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800341c:	f7ff ff36 	bl	800328c <LL_RCC_HSI_IsReady>
 8003420:	0003      	movs	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d150      	bne.n	80034c8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8003426:	4b31      	ldr	r3, [pc, #196]	@ (80034ec <LL_RCC_GetUSARTClockFreq+0x110>)
 8003428:	60fb      	str	r3, [r7, #12]
        }
        break;
 800342a:	e04d      	b.n	80034c8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800342c:	f7ff ff42 	bl	80032b4 <LL_RCC_LSE_IsReady>
 8003430:	0003      	movs	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d14a      	bne.n	80034cc <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800343c:	e046      	b.n	80034cc <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800343e:	f000 f85d 	bl	80034fc <RCC_GetSystemClockFreq>
 8003442:	0003      	movs	r3, r0
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f887 	bl	8003558 <RCC_GetHCLKClockFreq>
 800344a:	0003      	movs	r3, r0
 800344c:	0018      	movs	r0, r3
 800344e:	f000 f89b 	bl	8003588 <RCC_GetPCLK1ClockFreq>
 8003452:	0003      	movs	r3, r0
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e03e      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d13b      	bne.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff ff5b 	bl	800331c <LL_RCC_GetUSARTClockSource>
 8003466:	0003      	movs	r3, r0
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x114>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d016      	beq.n	800349c <LL_RCC_GetUSARTClockFreq+0xc0>
 800346e:	4a20      	ldr	r2, [pc, #128]	@ (80034f0 <LL_RCC_GetUSARTClockFreq+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d81c      	bhi.n	80034ae <LL_RCC_GetUSARTClockFreq+0xd2>
 8003474:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <LL_RCC_GetUSARTClockFreq+0x118>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <LL_RCC_GetUSARTClockFreq+0xa6>
 800347a:	4a1f      	ldr	r2, [pc, #124]	@ (80034f8 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d005      	beq.n	800348c <LL_RCC_GetUSARTClockFreq+0xb0>
 8003480:	e015      	b.n	80034ae <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003482:	f000 f83b 	bl	80034fc <RCC_GetSystemClockFreq>
 8003486:	0003      	movs	r3, r0
 8003488:	60fb      	str	r3, [r7, #12]
        break;
 800348a:	e024      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800348c:	f7ff fefe 	bl	800328c <LL_RCC_HSI_IsReady>
 8003490:	0003      	movs	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d11c      	bne.n	80034d0 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <LL_RCC_GetUSARTClockFreq+0x110>)
 8003498:	60fb      	str	r3, [r7, #12]
        }
        break;
 800349a:	e019      	b.n	80034d0 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800349c:	f7ff ff0a 	bl	80032b4 <LL_RCC_LSE_IsReady>
 80034a0:	0003      	movs	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d116      	bne.n	80034d4 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034ac:	e012      	b.n	80034d4 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034ae:	f000 f825 	bl	80034fc <RCC_GetSystemClockFreq>
 80034b2:	0003      	movs	r3, r0
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 f84f 	bl	8003558 <RCC_GetHCLKClockFreq>
 80034ba:	0003      	movs	r3, r0
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 f863 	bl	8003588 <RCC_GetPCLK1ClockFreq>
 80034c2:	0003      	movs	r3, r0
 80034c4:	60fb      	str	r3, [r7, #12]
        break;
 80034c6:	e006      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	e004      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	e002      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	e000      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80034d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	00030003 	.word	0x00030003
 80034e4:	00030001 	.word	0x00030001
 80034e8:	00030002 	.word	0x00030002
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	000c000c 	.word	0x000c000c
 80034f4:	000c0004 	.word	0x000c0004
 80034f8:	000c0008 	.word	0x000c0008

080034fc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003502:	f7ff fee7 	bl	80032d4 <LL_RCC_GetSysClkSource>
 8003506:	0003      	movs	r3, r0
 8003508:	2b08      	cmp	r3, #8
 800350a:	d002      	beq.n	8003512 <RCC_GetSystemClockFreq+0x16>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d003      	beq.n	8003518 <RCC_GetSystemClockFreq+0x1c>
 8003510:	e007      	b.n	8003522 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <RCC_GetSystemClockFreq+0x50>)
 8003514:	607b      	str	r3, [r7, #4]
      break;
 8003516:	e014      	b.n	8003542 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003518:	f000 f84c 	bl	80035b4 <RCC_PLL_GetFreqDomain_SYS>
 800351c:	0003      	movs	r3, r0
 800351e:	607b      	str	r3, [r7, #4]
      break;
 8003520:	e00f      	b.n	8003542 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <RCC_GetSystemClockFreq+0x54>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	0adb      	lsrs	r3, r3, #11
 8003528:	2207      	movs	r2, #7
 800352a:	4013      	ands	r3, r2
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	4807      	ldr	r0, [pc, #28]	@ (8003554 <RCC_GetSystemClockFreq+0x58>)
 8003538:	f7fc fde4 	bl	8000104 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	607b      	str	r3, [r7, #4]
      break;
 8003540:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 8003542:	687b      	ldr	r3, [r7, #4]
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}
 800354c:	007a1200 	.word	0x007a1200
 8003550:	40021000 	.word	0x40021000
 8003554:	00f42400 	.word	0x00f42400

08003558 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003560:	f7ff fec4 	bl	80032ec <LL_RCC_GetAHBPrescaler>
 8003564:	0003      	movs	r3, r0
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	220f      	movs	r2, #15
 800356a:	401a      	ands	r2, r3
 800356c:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <RCC_GetHCLKClockFreq+0x2c>)
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	58d3      	ldr	r3, [r2, r3]
 8003572:	221f      	movs	r2, #31
 8003574:	4013      	ands	r3, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	40da      	lsrs	r2, r3
 800357a:	0013      	movs	r3, r2
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	0800395c 	.word	0x0800395c

08003588 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003590:	f7ff feb8 	bl	8003304 <LL_RCC_GetAPB1Prescaler>
 8003594:	0003      	movs	r3, r0
 8003596:	0b1a      	lsrs	r2, r3, #12
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <RCC_GetPCLK1ClockFreq+0x28>)
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	58d3      	ldr	r3, [r2, r3]
 800359e:	221f      	movs	r2, #31
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	40da      	lsrs	r2, r3
 80035a6:	0013      	movs	r3, r2
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	0800399c 	.word	0x0800399c

080035b4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80035ba:	f7ff fed9 	bl	8003370 <LL_RCC_PLL_GetMainSource>
 80035be:	0003      	movs	r3, r0
 80035c0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d003      	beq.n	80035d0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d003      	beq.n	80035d6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80035ce:	e005      	b.n	80035dc <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80035d0:	4b13      	ldr	r3, [pc, #76]	@ (8003620 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80035d2:	607b      	str	r3, [r7, #4]
      break;
 80035d4:	e005      	b.n	80035e2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80035d6:	4b13      	ldr	r3, [pc, #76]	@ (8003624 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80035d8:	607b      	str	r3, [r7, #4]
      break;
 80035da:	e002      	b.n	80035e2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80035dc:	4b10      	ldr	r3, [pc, #64]	@ (8003620 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80035de:	607b      	str	r3, [r7, #4]
      break;
 80035e0:	46c0      	nop			@ (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80035e2:	f7ff fead 	bl	8003340 <LL_RCC_PLL_GetN>
 80035e6:	0002      	movs	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4353      	muls	r3, r2
 80035ec:	001c      	movs	r4, r3
 80035ee:	f7ff fecb 	bl	8003388 <LL_RCC_PLL_GetDivider>
 80035f2:	0003      	movs	r3, r0
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	3301      	adds	r3, #1
 80035f8:	0019      	movs	r1, r3
 80035fa:	0020      	movs	r0, r4
 80035fc:	f7fc fd82 	bl	8000104 <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	001c      	movs	r4, r3
 8003604:	f7ff fea8 	bl	8003358 <LL_RCC_PLL_GetR>
 8003608:	0003      	movs	r3, r0
 800360a:	0f5b      	lsrs	r3, r3, #29
 800360c:	3301      	adds	r3, #1
 800360e:	0019      	movs	r1, r3
 8003610:	0020      	movs	r0, r4
 8003612:	f7fc fd77 	bl	8000104 <__udivsi3>
 8003616:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b003      	add	sp, #12
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <LL_USART_IsEnabled>:
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <LL_USART_IsEnabled+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_USART_IsEnabled+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}

0800364a <LL_USART_SetPrescaler>:
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	220f      	movs	r2, #15
 800365a:	4393      	bics	r3, r2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b292      	uxth	r2, r2
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <LL_USART_SetStopBitsLength>:
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <LL_USART_SetStopBitsLength+0x24>)
 8003680:	401a      	ands	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b002      	add	sp, #8
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	ffffcfff 	.word	0xffffcfff

08003698 <LL_USART_SetHWFlowCtrl>:
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <LL_USART_SetHWFlowCtrl+0x24>)
 80036a8:	401a      	ands	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]
}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	fffffcff 	.word	0xfffffcff

080036c0 <LL_USART_SetBaudRate>:
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b0b      	cmp	r3, #11
 80036d2:	d846      	bhi.n	8003762 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d043      	beq.n	8003762 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d126      	bne.n	8003732 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	001a      	movs	r2, r3
 80036ea:	4b20      	ldr	r3, [pc, #128]	@ (800376c <LL_USART_SetBaudRate+0xac>)
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	58d3      	ldr	r3, [r2, r3]
 80036f0:	0019      	movs	r1, r3
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f7fc fd06 	bl	8000104 <__udivsi3>
 80036f8:	0003      	movs	r3, r0
 80036fa:	005a      	lsls	r2, r3, #1
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	0018      	movs	r0, r3
 8003706:	f7fc fcfd 	bl	8000104 <__udivsi3>
 800370a:	0003      	movs	r3, r0
 800370c:	b29b      	uxth	r3, r3
 800370e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <LL_USART_SetBaudRate+0xb0>)
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	001a      	movs	r2, r3
 8003720:	2307      	movs	r3, #7
 8003722:	4013      	ands	r3, r2
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	60da      	str	r2, [r3, #12]
}
 8003730:	e017      	b.n	8003762 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	001a      	movs	r2, r3
 8003738:	4b0c      	ldr	r3, [pc, #48]	@ (800376c <LL_USART_SetBaudRate+0xac>)
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	58d3      	ldr	r3, [r2, r3]
 800373e:	0019      	movs	r1, r3
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f7fc fcdf 	bl	8000104 <__udivsi3>
 8003746:	0003      	movs	r3, r0
 8003748:	001a      	movs	r2, r3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	18d3      	adds	r3, r2, r3
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	0018      	movs	r0, r3
 8003754:	f7fc fcd6 	bl	8000104 <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	b29b      	uxth	r3, r3
 800375c:	001a      	movs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	60da      	str	r2, [r3, #12]
}
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b006      	add	sp, #24
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	080039e4 	.word	0x080039e4
 8003770:	0000fff0 	.word	0x0000fff0

08003774 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b08b      	sub	sp, #44	@ 0x2c
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800377e:	231f      	movs	r3, #31
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff ff4b 	bl	8003628 <LL_USART_IsEnabled>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d16a      	bne.n	800386c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a38      	ldr	r2, [pc, #224]	@ (800387c <LL_USART_Init+0x108>)
 800379c:	401a      	ands	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	4319      	orrs	r1, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	4319      	orrs	r1, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	430b      	orrs	r3, r1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ff54 	bl	8003670 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0011      	movs	r1, r2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff ff61 	bl	8003698 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <LL_USART_Init+0x10c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d105      	bne.n	80037ea <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80037de:	2003      	movs	r0, #3
 80037e0:	f7ff fdfc 	bl	80033dc <LL_RCC_GetUSARTClockFreq>
 80037e4:	0003      	movs	r3, r0
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	e022      	b.n	8003830 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a25      	ldr	r2, [pc, #148]	@ (8003884 <LL_USART_Init+0x110>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d105      	bne.n	80037fe <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80037f2:	200c      	movs	r0, #12
 80037f4:	f7ff fdf2 	bl	80033dc <LL_RCC_GetUSARTClockFreq>
 80037f8:	0003      	movs	r3, r0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e018      	b.n	8003830 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <LL_USART_Init+0x114>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003806:	240c      	movs	r4, #12
 8003808:	193b      	adds	r3, r7, r4
 800380a:	0018      	movs	r0, r3
 800380c:	f7ff fdc8 	bl	80033a0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003810:	193b      	adds	r3, r7, r4
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e00b      	b.n	8003830 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a1c      	ldr	r2, [pc, #112]	@ (800388c <LL_USART_Init+0x118>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d107      	bne.n	8003830 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003820:	240c      	movs	r4, #12
 8003822:	193b      	adds	r3, r7, r4
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff fdbb 	bl	80033a0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800382a:	193b      	adds	r3, r7, r4
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d013      	beq.n	800385e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00f      	beq.n	800385e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800383e:	231f      	movs	r3, #31
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	0023      	movs	r3, r4
 800385a:	f7ff ff31 	bl	80036c0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0011      	movs	r1, r2
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff feef 	bl	800364a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800386c:	231f      	movs	r3, #31
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	781b      	ldrb	r3, [r3, #0]
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b009      	add	sp, #36	@ 0x24
 8003878:	bd90      	pop	{r4, r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	efff69f3 	.word	0xefff69f3
 8003880:	40013800 	.word	0x40013800
 8003884:	40004400 	.word	0x40004400
 8003888:	40004800 	.word	0x40004800
 800388c:	40004c00 	.word	0x40004c00

08003890 <memset>:
 8003890:	0003      	movs	r3, r0
 8003892:	1882      	adds	r2, r0, r2
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	7019      	strb	r1, [r3, #0]
 800389c:	3301      	adds	r3, #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <strstr>:
 80038a0:	780a      	ldrb	r2, [r1, #0]
 80038a2:	b530      	push	{r4, r5, lr}
 80038a4:	2a00      	cmp	r2, #0
 80038a6:	d10c      	bne.n	80038c2 <strstr+0x22>
 80038a8:	bd30      	pop	{r4, r5, pc}
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d108      	bne.n	80038c0 <strstr+0x20>
 80038ae:	2301      	movs	r3, #1
 80038b0:	5ccc      	ldrb	r4, [r1, r3]
 80038b2:	2c00      	cmp	r4, #0
 80038b4:	d0f8      	beq.n	80038a8 <strstr+0x8>
 80038b6:	5cc5      	ldrb	r5, [r0, r3]
 80038b8:	42a5      	cmp	r5, r4
 80038ba:	d101      	bne.n	80038c0 <strstr+0x20>
 80038bc:	3301      	adds	r3, #1
 80038be:	e7f7      	b.n	80038b0 <strstr+0x10>
 80038c0:	3001      	adds	r0, #1
 80038c2:	7803      	ldrb	r3, [r0, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <strstr+0xa>
 80038c8:	0018      	movs	r0, r3
 80038ca:	e7ed      	b.n	80038a8 <strstr+0x8>

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	2600      	movs	r6, #0
 80038d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003904 <__libc_init_array+0x38>)
 80038d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003908 <__libc_init_array+0x3c>)
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	2600      	movs	r6, #0
 80038de:	f000 f823 	bl	8003928 <_init>
 80038e2:	4c0a      	ldr	r4, [pc, #40]	@ (800390c <__libc_init_array+0x40>)
 80038e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003910 <__libc_init_array+0x44>)
 80038e6:	1b64      	subs	r4, r4, r5
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	00b3      	lsls	r3, r6, #2
 80038f2:	58eb      	ldr	r3, [r5, r3]
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	00b3      	lsls	r3, r6, #2
 80038fc:	58eb      	ldr	r3, [r5, r3]
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08003a1c 	.word	0x08003a1c
 8003908:	08003a1c 	.word	0x08003a1c
 800390c:	08003a20 	.word	0x08003a20
 8003910:	08003a1c 	.word	0x08003a1c

08003914 <memcpy>:
 8003914:	2300      	movs	r3, #0
 8003916:	b510      	push	{r4, lr}
 8003918:	429a      	cmp	r2, r3
 800391a:	d100      	bne.n	800391e <memcpy+0xa>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	5ccc      	ldrb	r4, [r1, r3]
 8003920:	54c4      	strb	r4, [r0, r3]
 8003922:	3301      	adds	r3, #1
 8003924:	e7f8      	b.n	8003918 <memcpy+0x4>
	...

08003928 <_init>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr

08003934 <_fini>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr
